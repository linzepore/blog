<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Linzepore&#39;s Blog</title>
  
  
  <link href="https://blog.zepo.re/atom.xml" rel="self"/>
  
  <link href="https://blog.zepo.re/"/>
  <updated>2023-07-28T04:41:57.975Z</updated>
  <id>https://blog.zepo.re/</id>
  
  <author>
    <name>Linzepore</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://blog.zepo.re/2023/07/28/%E6%8E%A8%E8%8D%90%E4%B8%80%E9%83%A8%E7%BA%AA%E5%BD%95%E7%89%87%E3%80%8ADream%20Maker%E3%80%8B%EF%BC%88%E9%80%A0%E6%A2%A6%E8%80%85%EF%BC%89.html/"/>
    <id>https://blog.zepo.re/2023/07/28/%E6%8E%A8%E8%8D%90%E4%B8%80%E9%83%A8%E7%BA%AA%E5%BD%95%E7%89%87%E3%80%8ADream%20Maker%E3%80%8B%EF%BC%88%E9%80%A0%E6%A2%A6%E8%80%85%EF%BC%89.html/</id>
    <published>2023-07-28T04:40:54.539Z</published>
    <updated>2023-07-28T04:41:57.975Z</updated>
    
    <content type="html"><![CDATA[<p>-–</p><p>title: ‘推荐一部纪录片《Dream Maker》（造梦者）’</p><p>date: 2023-07-28 12:41:22</p><p>tags:</p><p>- life</p><p>- movie</p><p>category:</p><p>- [Life, Movie]</p><p>-–</p><h1 id="推荐一部纪录片《Dream-Maker》（造梦者）"><a href="#推荐一部纪录片《Dream-Maker》（造梦者）" class="headerlink" title="推荐一部纪录片《Dream Maker》（造梦者）"></a>推荐一部纪录片《Dream Maker》（造梦者）</h1><p>虽然还没开始工作，但是深处互联网寒冬，相信工作不会顺利，阿里的经历给人鼓舞</p><p>我们高中期间也尝试过小型的创业，疫情打破了原来的节奏。在很长一段时间里，开始怀疑自己的未来是普普通通的程序员，还是更平凡的失业者，对未来充满无力感。但是时代就是这样的，哪个时代都有迷茫的时期，找到自己觉得可以努力的方向，不要停下脚步就行了。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307281229438.png" alt="image-20230728122930383"></p><iframe src="//player.bilibili.com/player.html?aid=230944746&bvid=BV1c8411Q7bH&cid=1197305760&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>SARS、世贸、互联网、移动互联网、云计算，阿里传奇一直在打破传统限制，银行看不起的5元交易费也促使支付宝的诞生，我看到：那些年，阿里是创业型的、充满活力的。</p><p>“小二”、、“亲”、花名，这些都是格局的创新，有洞见的内驱。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307281153879.png" alt="image-20230728115316498"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307281212222.png" alt="image-20230728121256907"></p><p>很有味道，历史也可以因为梦想而添上一笔。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307281227272.png" alt="image-20230728122703811"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307281228177.png" alt="image-20230728122816133"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-–&lt;/p&gt;
&lt;p&gt;title: ‘推荐一部纪录片《Dream Maker》（造梦者）’&lt;/p&gt;
&lt;p&gt;date: 2023-07-28 12:41:22&lt;/p&gt;
&lt;p&gt;tags:&lt;/p&gt;
&lt;p&gt;- life&lt;/p&gt;
&lt;p&gt;- movie&lt;/p&gt;
&lt;p&gt;category:&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>厦门好玩吗</title>
    <link href="https://blog.zepo.re/2023/07/26/%E5%8E%A6%E9%97%A8%E5%A5%BD%E7%8E%A9%E5%90%97.html/"/>
    <id>https://blog.zepo.re/2023/07/26/%E5%8E%A6%E9%97%A8%E5%A5%BD%E7%8E%A9%E5%90%97.html/</id>
    <published>2023-07-25T17:51:22.000Z</published>
    <updated>2023-07-28T02:01:36.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="厦门好玩吗"><a href="#厦门好玩吗" class="headerlink" title="厦门好玩吗"></a>厦门好玩吗</h1><p>前不久去了趟厦门，感受颇深。</p><p>有大海的魅力，有人情的韵味，我们选择跟团去，体验感极佳。</p><p>每趟起床都是早上五六点，健康作息反倒不疲惫。</p><p>旅行社肯定要赚钱，节约成本，剩下的其实就看导游人品了，但是有一点可以肯定：低价团肯定是不好的。</p><p>跟团的有几个高中学生，一路很活跃，随处拍照，溢出的可爱气息让我有总自己融不入的感觉（我才20岁欸&#x2F;(ㄒoㄒ)&#x2F;~~）；导游阿姨身上的正能量让我感受到什么是”干一行爱一行“</p><p>从不善于表达，也自然没有交集的名分，他们是真正旅途上的过客。</p><p>传一些照片吧，以后有时间再细细更新~</p><h2 id="厦门北"><a href="#厦门北" class="headerlink" title="厦门北"></a>厦门北</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270126632.jpg" alt="4344819f1e9dde49230ff3d9dfc850d"></p><h2 id="陈嘉庚先生和他的故居"><a href="#陈嘉庚先生和他的故居" class="headerlink" title="陈嘉庚先生和他的故居"></a>陈嘉庚先生和他的故居</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270126110.jpg" alt="dd23f4cc26403b0be7a91e57b2a4d3d"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270126170.jpg" alt="41aefd7fead9e8f22ae1ea0164c4cb8"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270127738.jpg" alt="dad862c4f04091cd7bef08b7f678211"></p><h2 id="老院子"><a href="#老院子" class="headerlink" title="老院子"></a>老院子</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270127493.jpg" alt="be5d8b51ddc40090aefa7225bf44ca6"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270127363.jpg" alt="6e8aa3ac9eab4a89dcddc4e0a915f95"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270127311.jpg" alt="234d7c5a38b5f8b283230b4fc1382fa"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270128406.jpg" alt="c18749d96e7dfa9addf80311894f20e"></p><h2 id="《闽南传奇》"><a href="#《闽南传奇》" class="headerlink" title="《闽南传奇》"></a>《闽南传奇》</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270128358.jpg" alt="c06d25d44d44322f26fb2c1fba8b8c9"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270128838.jpg" alt="76cd08994aeb3d1eb59f924a28f0626"></p><h2 id="沙蚕冻"><a href="#沙蚕冻" class="headerlink" title="沙蚕冻"></a>沙蚕冻</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270129390.jpg" alt="433430ba5cb76632612f69eeb955e64"></p><h2 id="中山路"><a href="#中山路" class="headerlink" title="中山路"></a>中山路</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270129434.jpg" alt="ea1b371d03cb70d3068f4755dfdce63"></p><h2 id="夜游厦门"><a href="#夜游厦门" class="headerlink" title="夜游厦门"></a>夜游厦门</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270130833.jpg" alt="9e8008f9acaf9525ea6f9708493b7a8"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270130810.jpg" alt="737235e0e1c45a8b36cf241d3305094"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307271411921.jpg" alt="181ad45681800ae7a7469dc40319cb0"></p><h2 id="鼓浪屿"><a href="#鼓浪屿" class="headerlink" title="鼓浪屿"></a>鼓浪屿</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270134059.jpg" alt="38a94415d05aa21aaaf7c4604770365"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270130086.jpg" alt="46bdbd5bc229c38e758a7ca3414491a"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270130744.jpg" alt="d18dd63bbe13ebb3ea46160753da51f"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270131731.jpg" alt="d96a2243de7a7e959b1f50f1d8b84a1"></p><h2 id="郑成功纪念馆"><a href="#郑成功纪念馆" class="headerlink" title="郑成功纪念馆"></a>郑成功纪念馆</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270132511.jpg" alt="e7875a212ecdbc0da3ed8ffb923c4aa"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270132110.jpg" alt="3ffa08f1144f378e526c0b36fc830d1"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270132276.jpg" alt="a44323d8111e69972c51268ad9e706e"></p><h2 id="鼓浪屿全景"><a href="#鼓浪屿全景" class="headerlink" title="鼓浪屿全景"></a>鼓浪屿全景</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270132949.jpg" alt="9a14027c28934d89f554fd3a52f5f76"></p><h2 id="郑成功雕像"><a href="#郑成功雕像" class="headerlink" title="郑成功雕像"></a>郑成功雕像</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270133607.jpg" alt="000fd87df62ae12786b602d523196bc"></p><h2 id="拼音之父"><a href="#拼音之父" class="headerlink" title="拼音之父"></a>拼音之父</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270131747.jpg" alt="6cd8e74be1eae3ecc93e84ee16b679f"></p><h2 id="大使馆旧址"><a href="#大使馆旧址" class="headerlink" title="大使馆旧址"></a>大使馆旧址</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270133462.jpg" alt="9070ba257fe04ca04f70977c78b8dee"></p><h2 id="最美转角与周杰伦MV地点"><a href="#最美转角与周杰伦MV地点" class="headerlink" title="最美转角与周杰伦MV地点"></a>最美转角与周杰伦MV地点</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270134834.jpg" alt="93667759ecbb8409ba82ad046af2299"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270134489.jpg" alt="8de7804c996f166f4c93379ac701088"></p><h2 id="阳光栈道"><a href="#阳光栈道" class="headerlink" title="阳光栈道"></a>阳光栈道</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270135864.jpg" alt="e8a94a24ead6ec49215c46e0e821d40"></p><h2 id="一国两制沙滩"><a href="#一国两制沙滩" class="headerlink" title="一国两制沙滩"></a>一国两制沙滩</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270135724.jpg" alt="aea6d24cf7b83a49c4edc376267847d"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270135585.jpg" alt="a9af852249bb3c73e5454ff4ac0031a"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270135364.jpg" alt="1d2695787470ce043a6e21f2c028c96"></p><h2 id="园林植物园"><a href="#园林植物园" class="headerlink" title="园林植物园"></a>园林植物园</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270136812.jpg" alt="15411457e1aa5b2e1a20fb0ab243dfc"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270136436.jpg" alt="2b5c0e1650000121c99ba1ddd9c2a37"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270136903.jpg" alt="67e3869610b3b76ffcc251d4173b4b7"></p><h2 id="南普陀寺"><a href="#南普陀寺" class="headerlink" title="南普陀寺"></a>南普陀寺</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270137072.jpg" alt="ced24918614e416184bc0e28edfd4a5"></p><h2 id="其他漂亮的地方"><a href="#其他漂亮的地方" class="headerlink" title="其他漂亮的地方"></a>其他漂亮的地方</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270138477.jpg" alt="7b8fd332a87be2d94b8d98dcc7b8c42"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270138684.jpg" alt="9cbf1e77836d08261d4b014414fcf7e"></p><p>这城市的精彩、旅行的乐趣，让我收获了高中以来丢失的孩时向往，人还是要有所明确的追求才行呀！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;厦门好玩吗&quot;&gt;&lt;a href=&quot;#厦门好玩吗&quot; class=&quot;headerlink&quot; title=&quot;厦门好玩吗&quot;&gt;&lt;/a&gt;厦门好玩吗&lt;/h1&gt;&lt;p&gt;前不久去了趟厦门，感受颇深。&lt;/p&gt;
&lt;p&gt;有大海的魅力，有人情的韵味，我们选择跟团去，体验感极佳。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="Life" scheme="https://blog.zepo.re/categories/Life/"/>
    
    <category term="XiaMen" scheme="https://blog.zepo.re/categories/Life/XiaMen/"/>
    
    
    <category term="life" scheme="https://blog.zepo.re/tags/life/"/>
    
    <category term="XiaMen" scheme="https://blog.zepo.re/tags/XiaMen/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记</title>
    <link href="https://blog.zepo.re/2023/07/20/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html/"/>
    <id>https://blog.zepo.re/2023/07/20/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html/</id>
    <published>2023-07-20T03:01:22.000Z</published>
    <updated>2023-07-25T17:00:27.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring学习笔记（更新中）"><a href="#Spring学习笔记（更新中）" class="headerlink" title="Spring学习笔记（更新中）"></a>Spring学习笔记（更新中）</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring 是一个轻量级的控制反转（IOC）和面向切面（AOP）的框架</p><ul><li>开源的、免费的</li><li>轻量级的、非入侵式的</li><li>控制反转、面向切面编程</li><li>支持事务处理</li></ul><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307162135524.gif"></p><p><strong>核心容器（Spring Core）</strong></p><p>　　核心容器提供Spring框架的基本功能。Spring以bean的方式组织和管理Java应用中的各个组件及其关系。Spring使用BeanFactory来产生和管理Bean，它是工厂模式的实现。BeanFactory使用控制反转(IoC)模式将应用的配置和依赖性规范与实际的应用程序代码分开。</p><p><strong>应用上下文（Spring Context）</strong></p><p>　　Spring上下文是一个配置文件，向Spring框架提供上下文信息。Spring上下文包括企业服务，如JNDI、EJB、电子邮件、国际化、校验和调度功能。</p><p><strong>Spring面向切面编程（Spring AOP）</strong></p><p>　　通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring框架中。所以，可以很容易地使 Spring框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。</p><p><strong>JDBC和DAO模块（Spring DAO）</strong></p><p>　　JDBC、DAO的抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理，和不同数据库供应商所抛出的错误信息。异常层次结构简化了错误处理，并且极大的降低了需要编写的代码数量，比如打开和关闭链接。</p><p><strong>对象实体映射（Spring ORM）</strong></p><p>　　Spring框架插入了若干个ORM框架，从而提供了ORM对象的关系工具，其中包括了Hibernate、JDO和 IBatis SQL Map等，所有这些都遵从Spring的通用事物和DAO异常层次结构。</p><p><strong>Web模块（Spring Web）</strong></p><p>　　Web上下文模块建立在应用程序上下文模块之上，为基于web的应用程序提供了上下文。所以Spring框架支持与Struts集成，web模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</p><p><strong>MVC模块（Spring Web MVC）</strong></p><p>　　MVC框架是一个全功能的构建Web应用程序的MVC实现。通过策略接口，MVC框架变成为高度可配置的。MVC容纳了大量视图技术，其中包括JSP、POI等，模型来有JavaBean来构成，存放于m当中，而视图是一个街口，负责实现模型，控制器表示逻辑代码，由c的事情。Spring框架的功能可以用在任何J2EE服务器当中，大多数功能也适用于不受管理的环境。Spring的核心要点就是支持不绑定到特定J2EE服务的可重用业务和数据的访问的对象，毫无疑问这样的对象可以在不同的J2EE环境，独立应用程序和测试环境之间重用。</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>现代化的Java开发，就是基于Spring开发~</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307162150900.png" alt="image-20230716215037783"></p><ul><li>Spring Boot<ul><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速开发单个微服务</li><li>约定大于配置</li></ul></li><li>Spring Cloud<ul><li>基于SpringBoot实现</li></ul></li></ul><p>弊端：配置繁琐，“配置地狱”</p><h2 id="IOC理论推导"><a href="#IOC理论推导" class="headerlink" title="IOC理论推导"></a>IOC理论推导</h2><p>共同的部分：Dao+多个DaoImpl，Service+多个ServiceImpl</p><p>原本的方式：Service靠程序创建实例（主动性在程序员身上）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span> &#123;<br>        userDao.getUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>成本高，每一次都需要手动修改源代码</li><li>需求不能做到动态变化</li></ul><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307170108100.png"></p><p>IOC的方式：Service靠set注入，由用户来创建实例（主动性在用户身上）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> UserDao userDao;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>    <span class="hljs-built_in">this</span>.userDao = userDao;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307170118669.png" alt="image-20230717011854644"></p><h2 id="IOC的本质"><a href="#IOC的本质" class="headerlink" title="IOC的本质"></a>IOC的本质</h2><p>总结来说就是依赖对象的生成方式反转，主动权来到用户手上</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307170124258.png" alt="image-20230717012459111"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307170126898.png" alt="image-20230717012602841"></p><p>DI（依赖注入）只是IOC（控制反转）的一种实现方式</p><p>Spring中实例来自于配置或者注解</p><h2 id="HelloSpring"><a href="#HelloSpring" class="headerlink" title="HelloSpring"></a>HelloSpring</h2><p>使用Spring容器创建管理输出实例，具体步骤：</p><ul><li>保证原型的属性具有getter、setter</li><li>编写配置文件或者注解（配置文件的写法：<a href="https://docs.spring.io/spring-framework/reference/core/beans/basics.html">Container Overview :: Spring Framework</a>）</li><li>使用ClassPathXmlApplicationContext获取Java实例（其他的Bean有其相应的获取方法，比如注解对应的AnnotationConfigApplicationContext，文件对应的Filexxx）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"># Hello类<br><span class="hljs-keyword">package</span> re.zepo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">private</span> String str;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStr</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-built_in">this</span>.str = str;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;str=&#x27;&quot;</span> + str + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"># beans.xml<br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.Hello&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;str&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"># Test类<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">myTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>        System.out.println(context.getBean(<span class="hljs-string">&quot;hello&quot;</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="IOC创建对象的方式"><a href="#IOC创建对象的方式" class="headerlink" title="IOC创建对象的方式"></a>IOC创建对象的方式</h2><p>1、 通过无参构造的方式</p><p>2、 通过有参构造的方式</p><p>​1、 通过index</p><p>​2、 通过类型，但是有相同的时候不适用</p><p>​3、 通过参数名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;user&quot;</span> class=<span class="hljs-string">&quot;re.zepo.pojo.User&quot;</span>&gt;<br>        &lt;constructor-arg index=<span class="hljs-string">&quot;0&quot;</span> value=<span class="hljs-string">&quot;LINZEPORE&quot;</span>/&gt;<br>    &lt;/bean&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;user2&quot;</span> class=<span class="hljs-string">&quot;re.zepo.pojo.User&quot;</span>&gt;<br>        &lt;constructor-arg name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;LINZEPORE&quot;</span>/&gt;<br>    &lt;/bean&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;userT&quot;</span> class=<span class="hljs-string">&quot;re.zepo.pojo.UserT&quot;</span>&gt;<br>        &lt;constructor-arg type=<span class="hljs-string">&quot;java.lang.String&quot;</span> value=<span class="hljs-string">&quot;LINZEPORE-TEST&quot;</span>/&gt;<br>    &lt;/bean&gt;<br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure><h2 id="IOC何时创建对象"><a href="#IOC何时创建对象" class="headerlink" title="IOC何时创建对象"></a>IOC何时创建对象</h2><p>在导入配置文件的时候就已经创建了对象，何以见得呢</p><p>可以从配置文件中配置了但是没有get出来的UserT对象得出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">#Test测试类<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">zeporeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) context.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>    &#125;<br>&#125;<br><br># 输出结果<br>创建了User实例~~<br>User二号生成了实例<br></code></pre></td></tr></table></figure><blockquote><p>另外：多个getBean也得到的同一个对象</p></blockquote><h2 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h2><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>alias起别名其实很简单，name-&gt;alias</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;user1&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h3><p>bean的id就是bean实例的唯一标识，class为bean对应的原型类（包名+类型），<strong>name也是别名且可以同时取多个别名</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.UserT&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user2 u2,ut1;ut&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;LINZEPORE2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>用于团队，可以导入多个配置文件，使用的时候可以使用导入的app就行</p><p><code>applicationContext.xml+beans1.xml+beans2.xml+beans3.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;beans1.xml&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h2><p>首先理解依赖注入，依赖指的是配置好容器创建对象时候的必要参数（如有参构造等），注入指的就是容器创建对象的时候将<strong>这些必要的参数</strong>赋予实例。可以参考[官方的解释](<a href="https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-collaborators.html">Dependency Injection :: Spring Framework</a>)：</p><blockquote><p>Dependency injection (DI) is a process whereby objects define their dependencies (that is, the other objects with which they work) only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method. <strong>The container then injects those dependencies when it creates the bean</strong>.</p></blockquote><p>通过Student类进行一系列简单、Bean、复杂类型（所有的类型包括：bean | ref | idref | list | set | map | props | value | null）的注入方式进行演示</p><h3 id="setter注入"><a href="#setter注入" class="headerlink" title="setter注入"></a>setter注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.Name&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;林泽坡尔&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;EN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Linzepore&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.Address&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addr&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addr&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;广轻工&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;zipcode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;111111&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.Student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;addr&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;books&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>《CSS新世界》<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>《Java从入门到精通》<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>唱歌<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>跳舞<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>写代码<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;games&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>原神<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>崩坏<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>农药<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cards&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ID&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;111111111111111111&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;BANK&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;12121212121212&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;school&quot;</span>&gt;</span>GDIP<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;sid&quot;</span>&gt;</span>232323232<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wife&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="idref是什么？"><a href="#idref是什么？" class="headerlink" title="idref是什么？"></a>idref是什么？</h3><p>一开始我以为是把对象引用的形式作为参数传入，后面一直报错：<code>Property of &#39;re.zepo.pojo.Address&#39; type cannot be injected by &#39;String&#39;</code>，我就纳闷了，我格式也没写错呀。。。原来人家传的是Bean的id，是bean的id名称不是bean对象实例！！！！我猜测应该是可以在Bean出现别名的时候寻找真实Bean的id吧</p><h3 id="拓展注入"><a href="#拓展注入" class="headerlink" title="拓展注入"></a>拓展注入</h3><p>引入p命名空间(<a href="https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-properties-detailed.html#beans-p-namespace">Dependencies and Configuration in Detail :: Spring Framework</a>)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.User&quot;</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;Linzepore&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引入c命名空间（<a href="https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-properties-detailed.html#beans-c-namespace">Dependencies and Configuration in Detail :: Spring Framework</a>）:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:c</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/c&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.User&quot;</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">&quot;Linzepore&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h2><table><thead><tr><th>Scope</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-singleton">singleton</a></td><td>(Default) Scopes a single bean definition to a single object instance for each Spring IoC container.</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-prototype">prototype</a></td><td>Scopes a single bean definition to any number of object instances.</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-request">request</a></td><td>Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-session">session</a></td><td>Scopes a single bean definition to the lifecycle of an HTTP <code>Session</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-application">application</a></td><td>Scopes a single bean definition to the lifecycle of a <code>ServletContext</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/reference/web/websocket/stomp/scope.html">websocket</a></td><td>Scopes a single bean definition to the lifecycle of a <code>WebSocket</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr></tbody></table><p>单例模式（默认）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.something.DefaultAccountService&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- the following is equivalent, though redundant (singleton scope is the default) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.something.DefaultAccountService&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>原型模式，每次getBean都是新对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.something.DefaultAccountService&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h2><ul><li>自动装配是Spring满足bean依赖的一种方式</li><li>Spring会在上下文自动寻找并自动给bean装配属性</li></ul><p>在Spring有三种装配方式：</p><ol><li>在xml中显示配置【前面的例子】</li><li>java中显式配置【后面会提】</li><li>隐式配置中的自动装配【此处演示】</li></ol><p>隐式配置有两种方式，一种是通过名字，通过匹配参数名字与beanId，需要保证beanId唯一；另一种通过类型，需要保证需要注入的属性类型对应的bean唯一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.Cat&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.Dog&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.People&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;LINZEPORE&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.Cat&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.Dog&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.People&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;LINZEPORE&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="使用注解实现自动装配"><a href="#使用注解实现自动装配" class="headerlink" title="使用注解实现自动装配"></a>使用注解实现自动装配</h2><p>注解在JAVA1.5，Spring2.5就开始支持了</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul><li>配置文件需要加入注解约束</li></ul><p>​<code>http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</code>、<code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code></p><ul><li>配置文件需要加入注解支持</li></ul><p>​<code>&lt;context:annotation-config/&gt;</code></p><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>参考文章【<a href="https://zhuanlan.zhihu.com/p/610653086">Spring注解装配：@Autowired和@Resource使用及原理详解 - 知乎 (zhihu.com)</a>】、文档【<a href="https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/autowired.html">Using @Autowired :: Spring Framework</a>】</p><ul><li>直接在属性上使用，需要已经在xml中存在该类型的bean</li><li>在setter、constructor方法上使用，因为通过反射实现setter可以省略了</li><li>可以@Autowired(required&#x3D;false)来允许属性为空</li><li>当有多个类型的bean的时候<ul><li>如果有配合@Qualifier使用，会按照这个名字指定byName</li><li>如果没有，则按照变量名进行匹配，<code>查找name为xxx的bean</code></li></ul></li></ul><p>弹幕提示：<strong>Autowire优先按类型，找不到就报错，找到多个则按名字，Qualifier则是在有多个类型的情况下按名字</strong></p><h3 id="Nullable"><a href="#Nullable" class="headerlink" title="@Nullable"></a>@Nullable</h3><p>表示字段可以为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCat</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Cat cat)</span> &#123;<br>    <span class="hljs-built_in">this</span>.cat = cat;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><p>jdk11之后需要手动配置依赖导包，@Resource默认按byName自动注入，也提供按照byType 注入</p><p>当需要指定名字的时候，可以<code>@Resource(name=&quot;bc&quot;)</code></p><h2 id="使用注解进行开发"><a href="#使用注解进行开发" class="headerlink" title="使用注解进行开发"></a>使用注解进行开发</h2><h3 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h3><p>在spring4以后要使用注解开发，要检查aop是否导入</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307211431408.png" alt="image-20230721143120296"></p><p>前面注解需要增加注解的支持可以换成指定包下的组件扫描（这个包下的注解支持自然就开启了）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 原来<br><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br># 换成<br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;re.zepo&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="bean-1"><a href="#bean-1" class="headerlink" title="bean"></a>bean</h3><ul><li><p>@Component，放在类上，说明该类受Spring管理，容器也会创建Bean，相当于<code>&lt;bean /&gt;</code></p></li><li><p>类名的小写会默认视为bean的id</p></li></ul><h3 id="属性如何注入"><a href="#属性如何注入" class="headerlink" title="属性如何注入"></a>属性如何注入</h3><p>@Value，相当于<code>&lt;property&gt;</code>或者<code>constructor-arg</code></p><h3 id="衍生的注解"><a href="#衍生的注解" class="headerlink" title="衍生的注解"></a>衍生的注解</h3><p>@Component有几个衍生注解，比如web开发中分层架构中对应的三个：</p><ol><li>dao：@Repository</li><li>service：@Service</li><li>controller：@Controller</li></ol><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><p>@Autowired，查找现有bean进行注入</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>回忆在配置文件中是配置在bean字段中的，所以同样的@Scope要配在@Component附近，表示该bean受spring管理，然后注明存在的地方</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs xml">package re.zepo.pojo;<br><br>import org.springframework.beans.factory.annotation.Value;<br>import org.springframework.context.annotation.Scope;<br>import org.springframework.stereotype.Component;<br><br>@Scope(&quot;prototype&quot;)<br>@Component<br>public class User &#123;<br>    @Value(&quot;Linzepore&quot;)<br>    public String name;<br>    public int age;<br><br>    public String getName() &#123;<br>        return name;<br>    &#125;<br><br>    public void setName(String name) &#123;<br>        this.name = name;<br>    &#125;<br><br>    public int getAge() &#123;<br>        return age;<br>    &#125;<br><br>    @Value(&quot;20&quot;)<br>    public void setAge(int age) &#123;<br>        this.age = age;<br>    &#125;<br><br>    @Override<br>    public String toString() &#123;<br>        return &quot;User&#123;&quot; +<br>                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +<br>                &quot;, age=&quot; + age +<br>                &#x27;&#125;&#x27;;<br>    &#125;<br>&#125;<br><br># 测试<br>@Test<br>public void test01() &#123;<br>    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;ApplicationContext.xml&quot;);<br>     User user1 = (User) context.getBean(&quot;user&quot;);<br>    User user2 = (User) context.getBean(&quot;user&quot;);<br>    System.out.println(user1);<br>    System.out.println(user2);<br>    System.out.println(user1 == user2);<br>&#125;<br># 输出<br>User&#123;name=&#x27;Linzepore&#x27;, age=20&#125;<br>User&#123;name=&#x27;Linzepore&#x27;, age=20&#125;<br>false<br></code></pre></td></tr></table></figure><p>xml比较万能，使用所有场合，为何方便</p><p>注解 不是自己类使用不了，维护复杂</p><p>xml与注解一起的最佳实践</p><ul><li>xml用来管理bean</li><li>注解只负责完成属性的注入</li></ul><h2 id="JavaConfig"><a href="#JavaConfig" class="headerlink" title="JavaConfig"></a>JavaConfig</h2><p>完全使用注解的方式使用spring，全权交给Java来做</p><ul><li><p>@Configuration相当于<code>&lt;beans /&gt;</code>，在<code>&lt;beans /&gt;</code>中可以有bean，这里的bean来自于注解下方方法的返回，相当于<code>&lt;bean /&gt;</code></p></li><li><p>使用配置类进行spring的配置的时候，要搭配<code>AnnotationConfigApplicationContext</code>进行获取上下文对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(ZeporeConfig.class);<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br></code></pre></td></tr></table></figure></li><li><p>【全注解】<code>@ComponentScan + @Component</code> 等价于 <code>@Configuration + @Bean</code>（【注解加xml】<code>&lt;context:component-scan base-package=&quot;xxx&quot;/&gt; + @Component </code> 等价于 <code>&lt;beans&gt;&lt;bean/&gt;&lt;/beans&gt;</code>）</p></li><li><p>@Import注解用于导入其他的配置类</p></li></ul><h3 id="Bean跟-Component的区别"><a href="#Bean跟-Component的区别" class="headerlink" title="@Bean跟@Component的区别"></a>@Bean跟@Component的区别</h3><p>参考文章：<a href="https://juejin.cn/post/7054353299528482823">Spring @bean 和 @component 注解有什么区别？ - 掘金 (juejin.cn)</a></p><ol><li>作用对象不同：<code>@Component</code> 注解作用于类，而 <code>@Bean</code> 注解作用于方法</li><li><code>@Component</code> 通常是通过路径扫描来自动侦测以及自动<strong>装配到 Spring 容器</strong>中(我们可以使用 <code>@ComponentScan</code> 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中)。<br><code>@Bean</code> 注解通常是我们在标有该注解的方法中定义产生这个 bean，<code>@Bean</code> 告诉了 Spring 这是某个类的<strong>实例，当我们需要用它的时候还给我</strong>。</li><li><code>@Bean</code> 注解比 <code>@Component</code> 注解的自定义性更强，而且很多地方我们只能通过 <code>@Bean</code> 注解来注册 bean。<br><strong>比如当我们引用第三方库中的类需要装配到 Spring 容器时，只能通过 <code>@Bean</code> 来实现。</strong>（最重要的一点！）</li></ol><h3 id="Primary-Bean"><a href="#Primary-Bean" class="headerlink" title="@Primary+@Bean"></a>@Primary+@Bean</h3><p>@Primary用在有多个同类型Bean的时候，赋予@Atuwired的优先权</p><h3 id="Configuration-Bean"><a href="#Configuration-Bean" class="headerlink" title="@Configuration + @Bean"></a>@Configuration + @Bean</h3><p>@Configuration等价于<code>&lt;beans/&gt;</code>，@Bean等价于<code>&lt;bean/&gt;</code></p><p><a href="https://docs.spring.io/spring-framework/reference/core/beans/java/bean-annotation.html">Using the @Bean Annotation :: Spring Framework</a>；</p><h3 id="ComponentScan-Component"><a href="#ComponentScan-Component" class="headerlink" title="@ComponentScan + @Component"></a>@ComponentScan + @Component</h3><p>@ComponentScan等价于<code>&lt;context:component-scan base-package=&quot;xxx&quot;/&gt;</code>，@Component就依然是@Component</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>先浅浅这样理解吧，在官网看到逆天的操作，但仔细思考了很久，我就觉得是因为**@Configuration本身就是@Component、@Bean和@Component近乎同样处于低层**的缘故，但考虑到太绕，不继续深究，按照前面的理解就行，后面回来考古吧（链接：<a href="https://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html#beans-factorybeans-annotations">Classpath Scanning and Managed Components :: Spring Framework</a>），附上一篇拓展的官方Java配置注解开发文档【<a href="https://docs.spring.io/spring-framework/reference/core/beans/java/composing-configuration-classes.html">Composing Java-based Configurations :: Spring Framework</a>】</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>代理类的要求：需要能做租客的功能，在租客功能的基础上增强，相当于套了一层，而真实业务以组合的形式由代理来决定调用（实现原业务类的实现接口 + 组合上原业务）</p><p>我的理解代理就是<strong>要能跟真实角色能做一样的内容（实现），同时对真实角色的方法做增强（组合）</strong></p><h3 id="房子租赁接口"><a href="#房子租赁接口" class="headerlink" title="房子租赁接口"></a>房子租赁接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">pulic <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Rent</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="房东实体"><a href="#房东实体" class="headerlink" title="房东实体"></a>房东实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Landlord</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rent</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//房东其他事务</span><br>        sout(<span class="hljs-string">&quot;房东租出房子&quot;</span>);<br>        <span class="hljs-comment">//房东其他事务</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="开发商实体"><a href="#开发商实体" class="headerlink" title="开发商实体"></a>开发商实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Devoloper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rent</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//开发商其他事务</span><br>        sout(<span class="hljs-string">&quot;开发商租出房子&quot;</span>);<br>        <span class="hljs-comment">//开发商其他事务</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中介"><a href="#中介" class="headerlink" title="中介"></a>中介</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rent</span> &#123;<br>    <span class="hljs-keyword">private</span> Rent host;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHost</span><span class="hljs-params">(Rent host)</span> &#123;<br>        <span class="hljs-built_in">this</span>.host = host;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//代理其他事务</span><br>        host.rent();<br>        <span class="hljs-comment">//代理其他事务</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试样例"><a href="#测试样例" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Rent</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Landlord</span>();<br>    <span class="hljs-type">Proxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>();<br>    proxy.setsetHost(host);<br>    proxy.rent();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="强制代理"><a href="#强制代理" class="headerlink" title="强制代理"></a>强制代理</h2><p>强制代理中，可以从要实现的结果倒推类的写法，我们需要实现一种结果：客户找房东必须通过中介，没有的话会有提示。也就说明<strong>房东类中需要判断调用者是否为中介</strong>。</p><h3 id="房子租赁接口-1"><a href="#房子租赁接口-1" class="headerlink" title="房子租赁接口"></a>房子租赁接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">iRent</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> Rent <span class="hljs-title function_">rentHouse</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="房东类"><a href="#房东类" class="headerlink" title="房东类"></a>房东类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Landlord <span class="hljs-keyword">implements</span> <span class="hljs-title class_">iRent</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">iRent</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Proxy</span> <span class="hljs-variable">proxy_</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>();<br>        proxy_.setProxy(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-built_in">this</span>.proxy = proxy_;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.proxy;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Rent <span class="hljs-title function_">rentHouse</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(isProxy()) &#123;<br>            sout(<span class="hljs-string">&quot;房东出租了房子&quot;</span>)；<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            sout(<span class="hljs-string">&quot;请找中介吧&quot;</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isProxy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> proxy != <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中介类"><a href="#中介类" class="headerlink" title="中介类"></a>中介类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">iRent</span> &#123;<br>    priavte iRent host;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHost</span><span class="hljs-params">(iRent host)</span> &#123;<br>        <span class="hljs-built_in">this</span>.host = host;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;;<br>    <span class="hljs-keyword">public</span> Rent <span class="hljs-title function_">rentHouse</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//代理其他事务</span><br>        host.rentHouse();<br>        <span class="hljs-comment">//代理其他事务</span><br>    &#125;;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="客户租房测试"><a href="#客户租房测试" class="headerlink" title="客户租房测试"></a>客户租房测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    psvm&#123;<br>        <span class="hljs-type">iRent</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Landlord</span>();<br>        host.rentHouse();<br>        <br>        <span class="hljs-type">iRent</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> host.getProxy();<br>        proxy.rentHouse();<br>    &#125;<br>&#125;<br><br>请找中介<br>中介推销<br>房东出租了房子<br>中介签合同<br></code></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ul><li>动态代理的代理是动态生成的，不是直接写好的</li><li>动态代理分两大类：基于接口的动态代理、基于类的动态代理<ul><li>基于接口——jdk动态代理</li><li>基于类——cglib</li><li>java字节码实现</li></ul></li></ul><p>动态代理主要通过<code>Proxy.*newProxyInstance*</code>实现，而其需要的三个参数分别是<code>ClassLoader loader</code> 、<code>Class&lt;?&gt;[] interfaces</code>、<code>InvocationHandler h</code>，代表了<strong>类加载器（<code>InvocationHandler</code>对象&#x2F;被代理对象 的 classLoader）</strong>、<strong>被代理对象的实现接口（<code>new Class[]&#123;被代理对象的接口1.class, 被代理对象的接口1.class&#125;</code> &#x2F; <code>被代理对象.getClass().getInterfaces()</code>）</strong>、<strong>自己重写的InvocationHandler实例</strong></p><p>在使用代理模式时，需要谨慎选择类加载器，以确保代理类和被代理类能够正确加载并且能够相互访问，要保证代理对象和被代理对象在同一个类加载器中加载，<strong>ClassLoader可以是<code>InvocationHandler</code>对象的，也可以是被代理对象的</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307240244234.png" alt="image-20230724024400176"></p><p>在实践中，可以<strong>将创建代理的过程一并写进InvocationHandler中，提供一个方法直接返回一个代理</strong>，这样在用户测试类中简洁很多，并且代理利用率高；也可以<strong>单纯重写InvocationHandler的invoke方法</strong>，这样做有助于加深理解</p><p>演示两种方式：</p><p><strong>房屋租赁类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">iRent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rentHouse</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>房东类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">landlord</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">iRent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rentHouse</span><span class="hljs-params">()</span> &#123;<br>        sout(<span class="hljs-string">&quot;房东租出了房子&quot;</span>)<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="直接返回代理"><a href="#直接返回代理" class="headerlink" title="直接返回代理"></a>直接返回代理</h3><p><strong>ProxyInvocationHandler类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> iRent host;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHost</span><span class="hljs-params">(iRent host)</span> &#123;<br>        <span class="hljs-built_in">this</span>.host = host;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span> <span class="hljs-params">(...)</span> &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(host, args);<br>    &#125;<br>    <span class="hljs-keyword">public</span> Proxy <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-built_in">this</span>.getClass().getClassLoader(), <span class="hljs-built_in">this</span>.host.getClass().getInterfaces(), <span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>用户测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    main&#123;<br>        <span class="hljs-type">iRent</span> <span class="hljs-variable">landlord</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Landlord</span>();<br>        <span class="hljs-type">ProxyInvocationHandler</span> <span class="hljs-variable">proxyInvocationHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>();<br>        proxyInvocationHandler.setHost(landlord);<br>        <span class="hljs-type">iRent</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (iRent)proxyInvocationHandler.getProxy();<br>        proxy.rentHouse();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="仅做好invoke的重写"><a href="#仅做好invoke的重写" class="headerlink" title="仅做好invoke的重写"></a>仅做好invoke的重写</h3><p><strong>ProxyInvocationHandler类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> proxyInvocationHandler <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> iRent host;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRent</span><span class="hljs-params">(iRent host)</span> &#123;<br>        <span class="hljs-built_in">this</span>.host = host;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(...)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;代理前&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(host, args);<br>        System.out.println(<span class="hljs-string">&quot;代理后&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用户测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    main&#123;<br>        <span class="hljs-type">iRent</span> <span class="hljs-variable">landlord</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Landlord</span>();<br>        <span class="hljs-type">ProxyHandler</span> <span class="hljs-variable">proxyHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyHandler</span>();<br>        proxyHandler.setObj(landlord);<br>        <br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> landlord.getClass().getClassLoader();<br>        <span class="hljs-type">iRent</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (iRent) Proxy.newProxyInstance(classLoader, landlord.getClass().getInterfaces(), proxyHandler);<br>        proxy.rentHouse();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代理优缺点"><a href="#代理优缺点" class="headerlink" title="代理优缺点"></a>代理优缺点</h2><p>代理模式的介绍：<a href="https://zhuanlan.zhihu.com/p/72644638">设计模式（四）——搞懂什么是代理模式 - 知乎 (zhihu.com)</a></p><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ol><li>可以是真实角色的操作更加纯粹！不同关注公共业务</li><li>实现业务的分工，代理角色处理琐事</li><li>公共业务发生拓展的时候方便集中管理</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>静态代理一个真实角色就会产生一个代理角色；</li><li>代码量翻倍</li><li>开发效率降低</li></ol><h2 id="AOP实现"><a href="#AOP实现" class="headerlink" title="AOP实现"></a>AOP实现</h2><p>AOP中的名词</p><ul><li>切面（Aspect）：一个关注点的模块化。以注解@Aspect的形式放在类上方，声明一个切面。<strong>自定义的增强类</strong></li><li>连接点（Joinpoint）：在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候都可以是连接点。<strong>被代理类所有的方法</strong></li><li>切点（Pointcut）：其实就是筛选出的连接点，匹配连接点的断言，一个类中的所有方法都是连接点，但又不全需要，会筛选出某些作为连接点做为切点。如果说通知定义了切面的动作或者执行时机的话，切点则定义了执行的地点。切入点表达式如何和连接点匹配是AOP的核心：Spring缺省使用AspectJ切入点语法。<strong>被代理类接受了增强的方法</strong></li><li>通知（Advice）：通知增强，需要完成的工作叫做通知，就是你写的业务逻辑中需要比如事务、日志等先定义好，然后需要的地方再去用。 主要包括5个注解：Before，After，AfterReturning，AfterThrowing，Around。 @Before：在切点方法之前执行。 @After：在切点方法之后执行 @AfterReturning：切点方法返回后执行 @AfterThrowing：切点方法抛异常执行 @Around：属于环绕增强，能控制切点执行前，执行后，用这个注解后，程序抛异常，会影响@AfterThrowing这个注解<strong>自定义的增强类中的方法</strong></li></ul><p>其中重要的名词有：切面（Aspect），切点（Pointcut）</p><h3 id="实现方式一：配置-切入点-增强方式"><a href="#实现方式一：配置-切入点-增强方式" class="headerlink" title="实现方式一：配置 切入点+增强方式"></a>实现方式一：配置 切入点+增强方式</h3><ol><li>引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>实现环绕类</li></ol><p>​在Spring中的AOP有6种增强方式，分别是：</p><ul><li><p>前置增强 (org.springframework.aop.BeforeAdvice) 表示在目标方法执行前来实施增强 </p></li><li><p>后置增强（org.springframework.aop.AfterAdvice）表示在目标方法执行后返回前来实施增强</p></li><li><p>环绕增强 (org.aopalliance.intercept.MethodInterceptor) 表示在目标方法执行前后同时实施增强 </p></li><li><p>最终增强 (org.springframework.aop.AfterReturningAdvice) 表示在目标方法执行并返回后来实施增强 </p></li><li><p>异常抛出增强 (org.springframework.aop.ThrowsAdvice) 表示在目标方法抛出异常后来实施增强 </p></li><li><p>引介增强 (org.springframework.aop.introductioninterceptor) 表示在目标类中添加一些新的方法和属性</p></li></ul><ol start="3"><li>注册aop命名空间</li></ol><ul><li><p><code>xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</code></p></li><li><p><code>xsi:schemaLocation=&quot;http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</code></p></li></ul><ol start="4"><li>配置 切入点+增强方式</li></ol><p>​关于pointcut的表达式写法：<a href="https://zhuanlan.zhihu.com/p/63001123">spring aop中pointcut表达式完整版 - 知乎 (zhihu.com)</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pt&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* 类名.*(..))&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- pointcut-ref --&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pt&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 非pointcut-ref --&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(* 类名.*(..))&quot;</span>/&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="实现方式二："><a href="#实现方式二：" class="headerlink" title="实现方式二："></a>实现方式二：</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring学习笔记（更新中）&quot;&gt;&lt;a href=&quot;#Spring学习笔记（更新中）&quot; class=&quot;headerlink&quot; title=&quot;Spring学习笔记（更新中）&quot;&gt;&lt;/a&gt;Spring学习笔记（更新中）&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="SSM" scheme="https://blog.zepo.re/categories/SSM/"/>
    
    <category term="Spring" scheme="https://blog.zepo.re/categories/SSM/Spring/"/>
    
    
    <category term="tech" scheme="https://blog.zepo.re/tags/tech/"/>
    
    <category term="SSM" scheme="https://blog.zepo.re/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>查漏补缺 - 23-04-11</title>
    <link href="https://blog.zepo.re/2023/04/11/2023-04-11.html/"/>
    <id>https://blog.zepo.re/2023/04/11/2023-04-11.html/</id>
    <published>2023-04-11T10:43:50.000Z</published>
    <updated>2023-04-11T10:55:20.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查漏补缺-23-04-11"><a href="#查漏补缺-23-04-11" class="headerlink" title="查漏补缺 - 23-04-11"></a>查漏补缺 - 23-04-11</h1><h2 id="solidity-struct的赋值"><a href="#solidity-struct的赋值" class="headerlink" title="solidity - struct的赋值"></a>solidity - struct的赋值</h2><p>在<code>mapping(uint256 =&gt; ProductData) private _product;</code>中，  </p><p>知道所有值的时候</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_product[traceNumber] = ProductData(&#123;xxx:xxx,...&#125;)</span><br></pre></td></tr></table></figure><p>只知道一部分值的时候</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_product[traceNumber].tracenumber = xxx;</span><br><span class="line">_product[traceNumber].product.XXX = xxx;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;查漏补缺-23-04-11&quot;&gt;&lt;a href=&quot;#查漏补缺-23-04-11&quot; class=&quot;headerlink&quot; title=&quot;查漏补缺 - 23-04-11&quot;&gt;&lt;/a&gt;查漏补缺 - 23-04-11&lt;/h1&gt;&lt;h2 id=&quot;solidity-struct的赋</summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/categories/Learning/Vue2/"/>
    
    <category term="solidity" scheme="https://blog.zepo.re/categories/Learning/solidity/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="solidity" scheme="https://blog.zepo.re/tags/solidity/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/tags/Vue2/"/>
    
  </entry>
  
  <entry>
    <title>uCharts - 23-04-09</title>
    <link href="https://blog.zepo.re/2023/04/09/2023-04-09.html/"/>
    <id>https://blog.zepo.re/2023/04/09/2023-04-09.html/</id>
    <published>2023-04-09T12:49:50.000Z</published>
    <updated>2023-04-10T01:42:39.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="uniapp-23-04-09"><a href="#uniapp-23-04-09" class="headerlink" title="uniapp - 23-04-09"></a>uniapp - 23-04-09</h1><h2 id="uCharts与eCharts"><a href="#uCharts与eCharts" class="headerlink" title="uCharts与eCharts"></a>uCharts与eCharts</h2><p>为什么会做这个？eCharts不香吗</p><blockquote><p>呃呃，eCharts因为涉及大量dom操作，微信小程序上会报错，uCharts对小程序兼容性较好</p></blockquote><h2 id="食用方式"><a href="#食用方式" class="headerlink" title="食用方式"></a>食用方式</h2><p>先看看官方的例子，后面再以一个菜鸟的角度分解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;canvas canvas-id=&quot;column&quot; id=&quot;column&quot; class=&quot;charts&quot; @touchend=&quot;tap&quot;/&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import uCharts from &#x27;../../../js/uCharts-master/uni-app/uCharts-原生/u-charts.min.js&#x27;</span><br><span class="line"></span><br><span class="line">var uChartsInstance = &#123;&#125;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      cWidth: 750,</span><br><span class="line">      cHeight: 500</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  onReady() &#123;</span><br><span class="line">    //这里的 750 对应 css .charts 的 width</span><br><span class="line">    this.cWidth = uni.upx2px(750);</span><br><span class="line">    //这里的 500 对应 css .charts 的 height</span><br><span class="line">    this.cHeight = uni.upx2px(500);</span><br><span class="line">    this.getServerData();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getServerData() &#123;</span><br><span class="line">      //模拟从服务器获取数据时的延时</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        //模拟服务器返回数据，如果数据格式和标准格式不同，需自行按下面的格式拼接</span><br><span class="line">        let res = &#123;</span><br><span class="line">            categories: [&quot;2016&quot;,&quot;2017&quot;,&quot;2018&quot;,&quot;2019&quot;,&quot;2020&quot;,&quot;2021&quot;],</span><br><span class="line">            series: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: &quot;目标值&quot;,</span><br><span class="line">                data: [35,36,31,33,13,34]</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: &quot;完成量&quot;,</span><br><span class="line">                data: [18,27,21,24,6,28]</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;;</span><br><span class="line">        this.drawCharts(&#x27;column&#x27;, res);</span><br><span class="line">      &#125;, 500);</span><br><span class="line">    &#125;,</span><br><span class="line">    drawCharts(id,data)&#123;</span><br><span class="line">      const ctx = uni.createCanvasContext(id, this);</span><br><span class="line">      uChartsInstance[id] = new uCharts(&#123;</span><br><span class="line">        type: &quot;column&quot;,</span><br><span class="line">        context: ctx,</span><br><span class="line">        width: this.cWidth,</span><br><span class="line">        height: this.cHeight,</span><br><span class="line">        categories: data.categories,</span><br><span class="line">        series: data.series,</span><br><span class="line">        animation: true,</span><br><span class="line">        background: &quot;#FFFFFF&quot;,</span><br><span class="line">        padding: [15,15,0,5],</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          disableGrid: true</span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;</span><br><span class="line">          data: [&#123;min: 0&#125;]</span><br><span class="line">        &#125;,</span><br><span class="line">        extra: &#123;</span><br><span class="line">          column: &#123;</span><br><span class="line">            type: &quot;group&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    tap(e)&#123;</span><br><span class="line">      uChartsInstance[e.target.id].touchLegend(e);</span><br><span class="line">      uChartsInstance[e.target.id].showToolTip(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .charts&#123;</span><br><span class="line">    width: 750rpx;</span><br><span class="line">    height: 500rpx;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>涉及到的方法有：<code>getServerData()</code>模拟从服务器获取数据的时间延时，同时会调用<code>drawChart(canvasID)</code>，<code>drawChart(canvasID)</code>的逻辑是先创建canvas画布实例（canvasId+this），在创建uCharts实例，uCharts实例引用至canvasId索引的uCharts对象，<br>创建实例的配置里面给定表格类型type、绑定画布实例context、width、height、categories <strong>（同一series不同category间的颜色一样）</strong>、series <strong>（同一categorie不同series间的颜色不同）</strong>、extra&gt;column&gt;type:”group”（实测在多个series的时候不能缺少）<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304092104682.png"></p><h2 id="关于样式的必要性"><a href="#关于样式的必要性" class="headerlink" title="关于样式的必要性"></a>关于样式的必要性</h2><p>首先，vc的data中宽高有必要吗？<br>答案是：不写不影响效果的呈现但是写了就有了Vue的数据代理（响应式的数据）<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304092157973.png"><br><code>uni.upx2px</code>的作用？<br>答案是：将rpx单位值转换成px，参考<a href="https://uniapp.dcloud.net.cn/api/ui/font.html#upx2px">uni.upx2px()</a><br>最后最后，style也不能缺需要赋予同等宽高（方便记忆，也许不一定要一样）</p><h2 id="关于categories与series"><a href="#关于categories与series" class="headerlink" title="关于categories与series"></a>关于categories与series</h2><p>categories <strong>（同一series不同category间的颜色一样）</strong>，series <strong>（同一categorie不同series间的颜色不同）</strong><br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304092119612.png"><br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304092121913.png">  </p><h2 id="去掉图例以及扩大间距"><a href="#去掉图例以及扩大间距" class="headerlink" title="去掉图例以及扩大间距"></a>去掉图例以及扩大间距</h2><p><a href="https://www.ucharts.cn/v2/#/document/index">图例配置 opts.legend</a>、<a href="https://www.ucharts.cn/v2/#/document/index">扩展配置&gt;柱状图</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//图例</span><br><span class="line">legend:&#123;</span><br><span class="line">show:false</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">extra:&#123;</span><br><span class="line">column:&#123;</span><br><span class="line">type:&#x27;group&#x27;,</span><br><span class="line">//多属性间距</span><br><span class="line">seriesGap:20,</span><br><span class="line">//柱的宽度</span><br><span class="line">width:140</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下溢出的处理"><a href="#下溢出的处理" class="headerlink" title="下溢出的处理"></a>下溢出的处理</h2><blockquote><p>手动加上y轴的值：<a href="https://www.ucharts.cn/v2/#/document/index">多Y轴配置 opts.yAxis.data[i]</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yAxis:&#123;</span><br><span class="line">data:[</span><br><span class="line">&#123;min:0,max:90&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304092153906.png"></p><h2 id="附上样题的柱状图复现代码"><a href="#附上样题的柱状图复现代码" class="headerlink" title="附上样题的柱状图复现代码"></a>附上样题的柱状图复现代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;canvas class=&quot;uctest&quot; id=&quot;uctest&quot; canvas-id=&quot;uctest&quot; @touchend=&quot;tap&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import uCharts from &#x27;../../../js/uCharts-master/uni-app/uCharts-原生/u-charts&#x27;</span><br><span class="line">var uChartsInstances = &#123;&#125;</span><br><span class="line">export default &#123;</span><br><span class="line">onReady() &#123;</span><br><span class="line">this.cWidth = uni.upx2px(750)</span><br><span class="line">this.cHeight = uni.upx2px(500)</span><br><span class="line">this.getServerData()</span><br><span class="line">&#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">chartData:&#123;&#125;,</span><br><span class="line">cWidth:750,</span><br><span class="line">cHeight:500</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">getServerData() &#123;</span><br><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">let res = &#123;</span><br><span class="line">categories:[&#x27;&#x27;],//不写就不会显示</span><br><span class="line">series:[</span><br><span class="line">&#123;</span><br><span class="line">name:&#x27;第一种&#x27;,</span><br><span class="line">data:[82]</span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line">name:&#x27;第二种&#x27;,</span><br><span class="line">data:[63]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">this.chartData = JSON.parse(JSON.stringify(res))</span><br><span class="line">this.drawChart(&#x27;uctest&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">,300)</span><br><span class="line">&#125;,</span><br><span class="line">drawChart(id,data) &#123;</span><br><span class="line">const canvasInstance = uni.createCanvasContext(id,this)</span><br><span class="line">uChartsInstances[id] = new uCharts(&#123;</span><br><span class="line">type:&#x27;column&#x27;,</span><br><span class="line">context:canvasInstance,</span><br><span class="line">width:this.cWidth,</span><br><span class="line">height:this.cHeight,</span><br><span class="line">categories:this.chartData.categories,</span><br><span class="line">series:this.chartData.series,</span><br><span class="line">animation:true,</span><br><span class="line">padding:[15,15,0,5],</span><br><span class="line">legend:&#123;</span><br><span class="line">show:false</span><br><span class="line">&#125;,</span><br><span class="line">yAxis:&#123;</span><br><span class="line">data:[</span><br><span class="line">&#123;min:0,max:90&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">extra:&#123;</span><br><span class="line">column:&#123;</span><br><span class="line">type:&#x27;group&#x27;,</span><br><span class="line">seriesGap:20,</span><br><span class="line">width:140</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">tap(e)&#123;</span><br><span class="line">console.log(uChartsInstances[e.target.id]);</span><br><span class="line">uChartsInstances[e.target.id].touchLegend(e)</span><br><span class="line">uChartsInstances[e.target.id].showToolTip(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.uctest&#123;</span><br><span class="line">width: 750rpx;</span><br><span class="line">height: 500rpx;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="以上，uCharts新手的原生方式探索之路"><a href="#以上，uCharts新手的原生方式探索之路" class="headerlink" title="以上，uCharts新手的原生方式探索之路"></a>以上，uCharts新手的原生方式探索之路</h2><p>昨天其实已经试过uCharts的组件方式跟eCharts的原生方式，感觉uCharts的组件方式特别适合小程序，而eCharts的原生方式比uCharts的原生方式更友好一些</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;uniapp-23-04-09&quot;&gt;&lt;a href=&quot;#uniapp-23-04-09&quot; class=&quot;headerlink&quot; title=&quot;uniapp - 23-04-09&quot;&gt;&lt;/a&gt;uniapp - 23-04-09&lt;/h1&gt;&lt;h2 id=&quot;uCharts与e</summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="uCharts" scheme="https://blog.zepo.re/categories/Learning/uCharts/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="uCharts" scheme="https://blog.zepo.re/tags/uCharts/"/>
    
  </entry>
  
  <entry>
    <title>网课文档 | uni-app的基本使用</title>
    <link href="https://blog.zepo.re/2023/04/05/uniapp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html/"/>
    <id>https://blog.zepo.re/2023/04/05/uniapp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html/</id>
    <published>2023-04-05T03:39:23.000Z</published>
    <updated>2023-04-05T04:17:49.370Z</updated>
    
    <content type="html"><![CDATA[<h4 id="uni-app的基本使用"><a href="#uni-app的基本使用" class="headerlink" title="uni-app的基本使用"></a>uni-app的基本使用</h4><p>课程介绍：</p><p>基础部分：</p><ul><li>环境搭建</li><li>页面外观配置</li><li>数据绑定</li><li>uni-app的生命周期</li><li>组件的使用</li><li>uni-app中样式学习</li><li>在uni-app中使用字体图标和开启scss</li><li>条件注释跨端兼容</li><li>uni中的事件</li><li>导航跳转</li><li>组件创建和通讯，及组件的生命周期</li><li>uni-app中使用uni-ui库</li></ul><p>项目：黑马商城项目</p><h5 id="uni-app介绍-官方网页"><a href="#uni-app介绍-官方网页" class="headerlink" title="uni-app介绍 官方网页"></a>uni-app介绍 <a href="https://uniapp.dcloud.io/resource">官方网页</a></h5><p><code>uni-app</code> 是一个使用 <a href="https://vuejs.org/">Vue.js</a> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信&#x2F;支付宝&#x2F;百度&#x2F;头条&#x2F;QQ&#x2F;钉钉）等多个平台。</p><p>即使不跨端，<code>uni-app</code>同时也是更好的小程序开发框架。</p><p>具有vue和微信小程序的开发经验，可快速上手uni-app</p><p>为什么要去学习uni-app？</p><p>相对开发者来说，减少了学习成本，因为只学会uni-app之后，即可开发出iOS、Android、H5、以及各种小程序的应用，不需要再去学习开发其他应用的框架，相对公司而言，也大大减少了开发成本。</p><h5 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h5><p>安装编辑器HbuilderX  <a href="https://www.dcloud.io/hbuilderx.html">下载地址</a></p><p>HBuilderX是通用的前端开发工具，但为<code>uni-app</code>做了特别强化。</p><p>下载App开发版，可开箱即用</p><p>安装微信开发者工具 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">下载地址</a></p><h5 id="利用HbuilderX初始化项目"><a href="#利用HbuilderX初始化项目" class="headerlink" title="利用HbuilderX初始化项目"></a>利用HbuilderX初始化项目</h5><ul><li><p>点击HbuilderX菜单栏文件&gt;项目&gt;新建</p></li><li><p>选择uni-app,填写项目名称，项目创建的目录</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304051217455.png"></p></li></ul><h5 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h5><p>在菜单栏中点击运行，运行到浏览器，选择浏览器即可运行</p><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具，即可在微信开发者工具里面体验uni-app</p><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到手机或模拟器 -&gt; 选择调式的手机</p><p><strong>注意：</strong></p><ul><li>如果是第一次使用，需要先配置小程序ide的相关路径，才能运行成功</li><li>微信开发者工具在设置中安全设置，服务端口开启</li></ul><h5 id="介绍项目目录和文件作用"><a href="#介绍项目目录和文件作用" class="headerlink" title="介绍项目目录和文件作用"></a>介绍项目目录和文件作用</h5><p><code>pages.json</code> 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等</p><p><code>manifest.json</code> 文件是应用的配置文件，用于指定应用的名称、图标、权限等。</p><p><code>App.vue</code>是我们的跟组件，所有页面都是在<code>App.vue</code>下进行切换的，是页面入口文件，可以调用应用的生命周期函数。</p><p><code>main.js</code>是我们的项目入口文件，主要作用是初始化<code>vue</code>实例并使用需要的插件。</p><p><code>uni.scss</code>文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，<code>uni.scss</code>文件里预置了一批scss变量预置。</p><figure class="highlight plaintext"><figcaption><span>就是打包目录，在这里有各个平台的打包文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```pages``` 所有的页面存放目录</span><br><span class="line"></span><br><span class="line">```static``` 静态资源目录，例如图片等</span><br><span class="line"></span><br><span class="line">```components``` 组件存放目录</span><br><span class="line"></span><br><span class="line">为了实现多端兼容，综合考虑编译速度、运行性能等因素，`uni-app` 约定了如下开发规范：</span><br><span class="line"></span><br><span class="line">- 页面文件遵循 [Vue 单文件组件 (SFC) 规范](https://vue-loader.vuejs.org/zh/spec.html)</span><br><span class="line">- 组件标签靠近小程序规范，详见[uni-app 组件规范](https://uniapp.dcloud.io/component/README)</span><br><span class="line">- 接口能力（JS API）靠近微信小程序规范，但需将前缀 `wx` 替换为 `uni`，详见[uni-app接口规范](https://uniapp.dcloud.io/api/README)</span><br><span class="line">- 数据绑定及事件处理同 `Vue.js` 规范，同时补充了App及页面的生命周期</span><br><span class="line">- 为兼容多端运行，建议使用flex布局进行开发</span><br><span class="line"></span><br><span class="line">#### 全局配置和页面配置</span><br><span class="line"></span><br><span class="line">##### 通过globalStyle进行全局配置</span><br><span class="line"></span><br><span class="line">用于设置应用的状态栏、导航条、标题、窗口背景色等。[详细文档](https://uniapp.dcloud.io/collocation/pages?id=globalstyle)</span><br><span class="line"></span><br><span class="line">| 属性                           | 类型       | 默认值     | 描述                                       |</span><br><span class="line">| ---------------------------- | -------- | ------- | ---------------------------------------- |</span><br><span class="line">| navigationBarBackgroundColor | HexColor | #F7F7F7 | 导航栏背景颜色（同状态栏背景色）                         |</span><br><span class="line">| navigationBarTextStyle       | String   | white   | 导航栏标题颜色及状态栏前景颜色，仅支持 black/white          |</span><br><span class="line">| navigationBarTitleText       | String   |         | 导航栏标题文字内容                                |</span><br><span class="line">| backgroundColor              | HexColor | #ffffff | 窗口的背景色                                   |</span><br><span class="line">| backgroundTextStyle          | String   | dark    | 下拉 loading 的样式，仅支持 dark / light          |</span><br><span class="line">| enablePullDownRefresh        | Boolean  | false   | 是否开启下拉刷新，详见[页面生命周期](https://uniapp.dcloud.io/use?id=%e9%a1%b5%e9%9d%a2%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f)。 |</span><br><span class="line">| onReachBottomDistance        | Number   | 50      | 页面上拉触底事件触发时距页面底部距离，单位只支持px，详见[页面生命周期](https://uniapp.dcloud.io/use?id=%e9%a1%b5%e9%9d%a2%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f) |</span><br><span class="line"></span><br><span class="line">##### 创建新的message页面</span><br><span class="line"></span><br><span class="line">右键pages新建message目录，在message目录下右键新建.vue文件,并选择基本模板</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是信息页面</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="通过pages来配置页面"><a href="#通过pages来配置页面" class="headerlink" title="通过pages来配置页面"></a>通过pages来配置页面</h5><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>String</td><td></td><td>配置页面路径</td></tr><tr><td>style</td><td>Object</td><td></td><td>配置页面窗口表现，配置项参考 <a href="https://uniapp.dcloud.io/collocation/pages?id=style">pageStyle</a></td></tr></tbody></table><p>pages数组数组中第一项表示应用启动页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;pages&quot;: [ </span><br><span class="line">&#123;</span><br><span class="line">&quot;path&quot;:&quot;pages/message/message&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;path&quot;: &quot;pages/index/index&quot;,</span><br><span class="line">&quot;style&quot;: &#123;</span><br><span class="line">&quot;navigationBarTitleText&quot;: &quot;uni-app&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>通过style修改页面的标题和导航栏背景色，并且设置h5下拉刷新的特有样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;pages&quot;</span>: [ <span class="comment">//pages数组中第一项表示应用启动页，参考：https://uniapp.dcloud.io/collocation/pages</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;path&quot;</span>:<span class="string">&quot;pages/message/message&quot;</span>,</span><br><span class="line"><span class="string">&quot;style&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;navigationBarBackgroundColor&quot;</span>: <span class="string">&quot;#007AFF&quot;</span>,</span><br><span class="line"><span class="string">&quot;navigationBarTextStyle&quot;</span>: <span class="string">&quot;white&quot;</span>,</span><br><span class="line"><span class="string">&quot;enablePullDownRefresh&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;disableScroll&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;h5&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;pullToRefresh&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;color&quot;</span>: <span class="string">&quot;#007AFF&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="配置tabbar"><a href="#配置tabbar" class="headerlink" title="配置tabbar"></a>配置tabbar</h5><p>如果应用是一个多 tab 应用，可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页。</p><p><strong>Tips</strong></p><ul><li>当设置 position 为 top 时，将不会显示 icon</li><li>tabBar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。</li></ul><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th><th>平台差异说明</th></tr></thead><tbody><tr><td>color</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字默认颜色</td><td></td></tr><tr><td>selectedColor</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字选中时的颜色</td><td></td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>是</td><td></td><td>tab 的背景色</td><td></td></tr><tr><td>borderStyle</td><td>String</td><td>否</td><td>black</td><td>tabbar 上边框的颜色，仅支持 black&#x2F;white</td><td>App 2.3.4+ 支持其他颜色值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td></td><td>tab 的列表，详见 list 属性说明，最少2个、最多5个 tab</td><td></td></tr><tr><td>position</td><td>String</td><td>否</td><td>bottom</td><td>可选值 bottom、top</td><td>top 值仅微信小程序支持</td></tr></tbody></table><p>其中 list 接收一个数组，数组中的每个项都是一个对象，其属性值如下：</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>pagePath</td><td>String</td><td>是</td><td>页面路径，必须在 pages 中先定义</td></tr><tr><td>text</td><td>String</td><td>是</td><td>tab 上按钮文字，在 5+APP 和 H5 平台为非必填。例如中间可放一个没有文字的+号图标</td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td>图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效，不支持网络图片，不支持字体图标</td></tr><tr><td>selectedIconPath</td><td>String</td><td>否</td><td>选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效</td></tr></tbody></table><p>案例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;tabBar&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;list&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;text&quot;</span>: <span class="string">&quot;首页&quot;</span>,</span><br><span class="line"><span class="string">&quot;pagePath&quot;</span>:<span class="string">&quot;pages/index/index&quot;</span>,</span><br><span class="line"><span class="string">&quot;iconPath&quot;</span>:<span class="string">&quot;static/tabs/home.png&quot;</span>,</span><br><span class="line"><span class="string">&quot;selectedIconPath&quot;</span>:<span class="string">&quot;static/tabs/home-active.png&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;text&quot;</span>: <span class="string">&quot;信息&quot;</span>,</span><br><span class="line"><span class="string">&quot;pagePath&quot;</span>:<span class="string">&quot;pages/message/message&quot;</span>,</span><br><span class="line"><span class="string">&quot;iconPath&quot;</span>:<span class="string">&quot;static/tabs/message.png&quot;</span>,</span><br><span class="line"><span class="string">&quot;selectedIconPath&quot;</span>:<span class="string">&quot;static/tabs/message-active.png&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;text&quot;</span>: <span class="string">&quot;我们&quot;</span>,</span><br><span class="line"><span class="string">&quot;pagePath&quot;</span>:<span class="string">&quot;pages/contact/contact&quot;</span>,</span><br><span class="line"><span class="string">&quot;iconPath&quot;</span>:<span class="string">&quot;static/tabs/contact.png&quot;</span>,</span><br><span class="line"><span class="string">&quot;selectedIconPath&quot;</span>:<span class="string">&quot;static/tabs/contact-active.png&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="condition启动模式配置"><a href="#condition启动模式配置" class="headerlink" title="condition启动模式配置"></a>condition启动模式配置</h5><p>启动模式配置，仅开发期间生效，用于模拟直达页面的场景，如：小程序转发后，用户点击所打开的页面。</p><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>current</td><td>Number</td><td>是</td><td>当前激活的模式，list节点的索引值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td>启动模式列表</td></tr></tbody></table><p><strong>list说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>String</td><td>是</td><td>启动模式名称</td></tr><tr><td>path</td><td>String</td><td>是</td><td>启动页面路径</td></tr><tr><td>query</td><td>String</td><td>否</td><td>启动参数，可在页面的 <a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">onLoad</a> 函数里获得</td></tr></tbody></table><h4 id="组件的基本使用"><a href="#组件的基本使用" class="headerlink" title="组件的基本使用"></a>组件的基本使用</h4><p>uni-app提供了丰富的基础组件给开发者，开发者可以像搭积木一样，组合各种组件拼接称自己的应用</p><p>uni-app中的组件，就像 <code>HTML</code> 中的 <code>div</code> 、<code>p</code>、<code>span</code> 等标签的作用一样，用于搭建页面的基础结构</p><h5 id="text文本组件的用法"><a href="#text文本组件的用法" class="headerlink" title="text文本组件的用法"></a>text文本组件的用法</h5><h6 id="001-text-组件的属性"><a href="#001-text-组件的属性" class="headerlink" title="001 - text 组件的属性"></a>001 - text 组件的属性</h6><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">默认值</th><th align="center">必填</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">selectable</td><td align="center">boolean</td><td align="center">false</td><td align="center">否</td><td align="center">文本是否可选</td></tr><tr><td align="center">space</td><td align="center">string</td><td align="center">.</td><td align="center">否</td><td align="center">显示连续空格，可选参数：<code>ensp</code>、<code>emsp</code>、<code>nbsp</code></td></tr><tr><td align="center">decode</td><td align="center">boolean</td><td align="center">false</td><td align="center">否</td><td align="center">是否解码</td></tr></tbody></table><ul><li><code>text</code> 组件相当于行内标签、在同一行显示</li><li>除了文本节点以外的其他节点都无法长按选中</li></ul><h6 id="002-代码案例"><a href="#002-代码案例" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 长按文本是否可选 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">selectable</span>=<span class="string">&#x27;true&#x27;</span>&gt;</span>来了老弟<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 显示连续空格的方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">space</span>=<span class="string">&#x27;ensp&#x27;</span>&gt;</span>来了  老弟<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">space</span>=<span class="string">&#x27;emsp&#x27;</span>&gt;</span>来了  老弟<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">space</span>=<span class="string">&#x27;nbsp&#x27;</span>&gt;</span>来了  老弟<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>skyblue<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 是否解码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">decode</span>=<span class="string">&#x27;true&#x27;</span>&gt;</span><span class="symbol">&amp;nbsp;</span> <span class="symbol">&amp;lt;</span> <span class="symbol">&amp;gt;</span> <span class="symbol">&amp;amp;</span> <span class="symbol">&amp;apos;</span> <span class="symbol">&amp;ensp;</span> <span class="symbol">&amp;emsp;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="view视图容器组件的用法"><a href="#view视图容器组件的用法" class="headerlink" title="view视图容器组件的用法"></a>view视图容器组件的用法</h5><blockquote><p>View 视图容器， 类似于 HTML 中的 div</p></blockquote><h6 id="001-组件的属性"><a href="#001-组件的属性" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h6><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304051217922.png"></p><h6 id="002-代码案例-1"><a href="#002-代码案例-1" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;box2_active&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;box1&#x27;</span> <span class="attr">hover-class</span>=<span class="string">&#x27;active&#x27;</span> <span class="attr">hover-stop-propagation</span> <span class="attr">:hover-start-time</span>=<span class="string">&quot;2000&quot;</span> <span class="attr">:hover-stay-time</span>=<span class="string">&#x27;2000&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="button按钮组件的用法"><a href="#button按钮组件的用法" class="headerlink" title="button按钮组件的用法"></a>button按钮组件的用法</h5><h6 id="001-组件的属性-1"><a href="#001-组件的属性-1" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h6><table><thead><tr><th align="center">属性名</th><th align="center">类型</th><th align="center">默认值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">size</td><td align="center">String</td><td align="center">default</td><td align="center">按钮的大小</td></tr><tr><td align="center">type</td><td align="center">String</td><td align="center">default</td><td align="center">按钮的样式类型</td></tr><tr><td align="center">plain</td><td align="center">Boolean</td><td align="center">false</td><td align="center">按钮是否镂空，背景色透明</td></tr><tr><td align="center">disabled</td><td align="center">Boolean</td><td align="center">false</td><td align="center">是否按钮</td></tr><tr><td align="center">loading</td><td align="center">Boolean</td><td align="center">false</td><td align="center">名称是否带 loading t图标</td></tr></tbody></table><ul><li><code>button</code> 组件默认独占一行，设置 <code>size</code> 为 <code>mini</code> 时可以在一行显示多个</li></ul><h6 id="002-案例代码"><a href="#002-案例代码" class="headerlink" title="002 - 案例代码"></a>002 - 案例代码</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&#x27;mini&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;primary&#x27;</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&#x27;mini&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;default&#x27;</span> <span class="attr">disabled</span>=<span class="string">&#x27;true&#x27;</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&#x27;mini&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;warn&#x27;</span> <span class="attr">loading</span>=<span class="string">&#x27;true&#x27;</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="image组件的使用"><a href="#image组件的使用" class="headerlink" title="image组件的使用"></a>image组件的使用</h5><h6 id="image"><a href="#image" class="headerlink" title="image"></a><a href="https://uniapp.dcloud.io/component/image?id=image">image</a></h6><p>图片。</p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>平台差异说明</th></tr></thead><tbody><tr><td>src</td><td>String</td><td></td><td>图片资源地址</td><td></td></tr><tr><td>mode</td><td>String</td><td>‘scaleToFill’</td><td>图片裁剪、缩放的模式</td><td></td></tr></tbody></table><p><strong>Tips</strong></p><ul><li><code>&lt;image&gt;</code> 组件默认宽度 300px、高度 225px；</li><li><code>src</code> 仅支持相对路径、绝对路径，支持 base64 码；</li><li>页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 <code>image&#123;will-change: transform&#125;</code> ,可优化此问题。</li></ul><h4 id="uni-app中的样式"><a href="#uni-app中的样式" class="headerlink" title="uni-app中的样式"></a>uni-app中的样式</h4><ul><li><p>rpx 即响应式px，一种根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，750rpx恰好为屏幕宽度。屏幕变宽，rpx 实际显示效果会等比放大。</p></li><li><p>使用<code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径，用<code>;</code>表示语句结束</p></li><li><p>支持基本常用的选择器class、id、element等</p></li><li><p>在 <code>uni-app</code> 中不能使用 <code>*</code> 选择器。</p></li><li><p><code>page</code> 相当于 <code>body</code> 节点</p></li><li><p>定义在 App.vue 中的样式为全局样式，作用于每一个页面。在 pages 目录下 的 vue 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 App.vue 中相同的选择器。</p></li><li><p><code>uni-app</code> 支持使用字体图标，使用方式与普通 <code>web</code> 项目相同，需要注意以下几点：</p><ul><li><p>字体文件小于 40kb，<code>uni-app</code> 会自动将其转化为 base64 格式；</p></li><li><p>字体文件大于等于 40kb， 需开发者自己转换，否则使用将不生效；</p></li><li><p>字体文件的引用路径推荐使用以 ~@ 开头的绝对路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    font-family: test1-icon;</span><br><span class="line">    src: url(&#x27;~@/static/iconfont.ttf&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>如何使用scss或者less</p></li></ul><h4 id="uni-app中的数据绑定"><a href="#uni-app中的数据绑定" class="headerlink" title="uni-app中的数据绑定"></a>uni-app中的数据绑定</h4><p>在页面中需要定义数据，和我们之前的vue一摸一样，直接在data中定义数据即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;hello-uni&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="插值表达式的使用"><a href="#插值表达式的使用" class="headerlink" title="插值表达式的使用"></a>插值表达式的使用</h5><ul><li><p>利用插值表达式渲染基本数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在插值表达式中使用三元运算</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; flag ? &#x27;我是真的&#x27;:&#x27;我是假的&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>基本运算</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;1+1&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="v-bind动态绑定属性"><a href="#v-bind动态绑定属性" class="headerlink" title="v-bind动态绑定属性"></a>v-bind动态绑定属性</h5><p>在data中定义了一张图片，我们希望把这张图片渲染到页面上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">img</span>: <span class="string">&#x27;http://destiny001.gitee.io/image/monkey_02.jpg&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用v-bind进行渲染</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;img&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还可以缩写成:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">:src</span>=<span class="string">&quot;img&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-for的使用"><a href="#v-for的使用" class="headerlink" title="v-for的使用"></a>v-for的使用</h5><p>data中定以一个数组，最终将数组渲染到页面上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">arr</span>: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;刘能&#x27;</span>, <span class="attr">age</span>: <span class="number">29</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;赵四&#x27;</span>, <span class="attr">age</span>: <span class="number">39</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;宋小宝&#x27;</span>, <span class="attr">age</span>: <span class="number">49</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;小沈阳&#x27;</span>, <span class="attr">age</span>: <span class="number">59</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用v-for进行循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view v-<span class="keyword">for</span>=<span class="string">&quot;(item,i) in arr&quot;</span> :key=<span class="string">&quot;i&quot;</span>&gt;名字：&#123;&#123;item.<span class="property">name</span>&#125;&#125;---年龄：&#123;&#123;item.<span class="property">age</span>&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure><h4 id="uni中的事件"><a href="#uni中的事件" class="headerlink" title="uni中的事件"></a>uni中的事件</h4><h5 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h5><p>在uni中事件绑定和vue中是一样的，通过v-on进行事件的绑定，也可以简写为@</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;tapHandle&quot;</span>&gt;</span>点我啊<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>事件函数定义在methods中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  tapHandle () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;真的点我了&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h5><ul><li><p>默认如果没有传递参数，事件函数第一个形参为事件对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// template</span><br><span class="line">&lt;button @click=&quot;tapHandle&quot;&gt;点我啊&lt;/button&gt;</span><br><span class="line">// script</span><br><span class="line">methods: &#123;</span><br><span class="line">  tapHandle (e) &#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果给事件函数传递参数了，则对应的事件函数形参接收的则是传递过来的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// template</span><br><span class="line">&lt;button @click=&quot;tapHandle(1)&quot;&gt;点我啊&lt;/button&gt;</span><br><span class="line">// script</span><br><span class="line">methods: &#123;</span><br><span class="line">  tapHandle (num) &#123;</span><br><span class="line">    console.log(num)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果获取事件对象也想传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// template</span><br><span class="line">&lt;button @click=&quot;tapHandle(1,$event)&quot;&gt;点我啊&lt;/button&gt;</span><br><span class="line">// script</span><br><span class="line">methods: &#123;</span><br><span class="line">  tapHandle (num,e) &#123;</span><br><span class="line">    console.log(num,e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="uni的生命周期"><a href="#uni的生命周期" class="headerlink" title="uni的生命周期"></a>uni的生命周期</h4><h5 id="应用的生命周期"><a href="#应用的生命周期" class="headerlink" title="应用的生命周期"></a>应用的生命周期</h5><p>生命周期的概念：一个对象从创建、运行、销毁的整个过程被成为生命周期。</p><p>生命周期函数：在生命周期中每个阶段会伴随着每一个函数的触发，这些函数被称为生命周期函数</p><p><code>uni-app</code> 支持如下应用生命周期函数：</p><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>onLaunch</td><td>当<code>uni-app</code> 初始化完成时触发（全局只触发一次）</td></tr><tr><td>onShow</td><td>当 <code>uni-app</code> 启动，或从后台进入前台显示</td></tr><tr><td>onHide</td><td>当 <code>uni-app</code> 从前台进入后台</td></tr><tr><td>onError</td><td>当 <code>uni-app</code> 报错时触发</td></tr></tbody></table><h5 id="页面的生命周期"><a href="#页面的生命周期" class="headerlink" title="页面的生命周期"></a>页面的生命周期</h5><p><code>uni-app</code> 支持如下页面生命周期函数：</p><table><thead><tr><th>函数名</th><th>说明</th><th>平台差异说明</th><th>最低版本</th></tr></thead><tbody><tr><td>onLoad</td><td>监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参），参考<a href="https://uniapp.dcloud.io/api/router?id=navigateto">示例</a></td><td></td><td></td></tr><tr><td>onShow</td><td>监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td><td></td><td></td></tr><tr><td>onReady</td><td>监听页面初次渲染完成。</td><td></td><td></td></tr><tr><td>onHide</td><td>监听页面隐藏</td><td></td><td></td></tr><tr><td>onUnload</td><td>监听页面卸载</td><td></td><td></td></tr></tbody></table><h4 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h4><h5 id="开启下拉刷新"><a href="#开启下拉刷新" class="headerlink" title="开启下拉刷新"></a>开启下拉刷新</h5><p>在uni-app中有两种方式开启下拉刷新</p><ul><li>需要在 <code>pages.json</code> 里，找到的当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></li><li>通过调用uni.startPullDownRefresh方法来开启下拉刷新</li></ul><h6 id="通过配置文件开启"><a href="#通过配置文件开启" class="headerlink" title="通过配置文件开启"></a>通过配置文件开启</h6><p>创建list页面进行演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">杭州学科</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;item&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">data () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">arr</span>: [<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;ui&#x27;</span>,<span class="string">&#x27;大数据&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过pages.json文件中找到当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;path&quot;</span>:<span class="string">&quot;pages/list/list&quot;</span>,</span><br><span class="line">    <span class="string">&quot;style&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;enablePullDownRefresh&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="通过API开启"><a href="#通过API开启" class="headerlink" title="通过API开启"></a>通过API开启</h6><p><a href="https://uniapp.dcloud.io/api/ui/pulldown">api文档</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uni.startPullDownRefresh()</span><br></pre></td></tr></table></figure><h5 id="监听下拉刷新"><a href="#监听下拉刷新" class="headerlink" title="监听下拉刷新"></a>监听下拉刷新</h5><p>通过onPullDownRefresh可以监听到下拉刷新的动作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">arr</span>: [<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;ui&#x27;</span>,<span class="string">&#x27;大数据&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    startPull () &#123;</span><br><span class="line">      uni.<span class="title function_">startPullDownRefresh</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  onPullDownRefresh () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发下拉刷新了&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="关闭下拉刷新"><a href="#关闭下拉刷新" class="headerlink" title="关闭下拉刷新"></a>关闭下拉刷新</h5><p>uni.stopPullDownRefresh()</p><p>停止当前页面下拉刷新。</p><p>案例演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;startPull&quot;</span>&gt;</span>开启下拉刷新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">杭州学科</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;item&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">data () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">arr</span>: [<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;ui&#x27;</span>,<span class="string">&#x27;大数据&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">startPull () &#123;</span></span><br><span class="line"><span class="language-javascript">uni.<span class="title function_">startPullDownRefresh</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">onPullDownRefresh () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">arr</span> = []</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">arr</span> = [<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;ui&#x27;</span>,<span class="string">&#x27;大数据&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">uni.<span class="title function_">stopPullDownRefresh</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="上拉加载"><a href="#上拉加载" class="headerlink" title="上拉加载"></a>上拉加载</h4><p>通过在pages.json文件中找到当前页面的pages节点下style中配置onReachBottomDistance可以设置距离底部开启加载的距离，默认为50px</p><p>通过onReachBottom监听到触底的行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;startPull&quot;</span>&gt;</span>开启下拉刷新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">杭州学科</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;&#123;item&#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">data () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">arr</span>: [<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;ui&#x27;</span>,<span class="string">&#x27;大数据&#x27;</span>,<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;ui&#x27;</span>,<span class="string">&#x27;大数据&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">onReachBottom () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触底了&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">view&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h4><p>在uni中可以调用uni.request方法进行请求网络请求</p><p>需要注意的是：在小程序中网络相关的 API 在使用前需要配置域名白名单。</p><p><strong>发送get请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendGet&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">sendGet () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">uni.<span class="title function_">request</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">url</span>: <span class="string">&#x27;http://localhost:8082/api/getlunbo&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">success</span>(<span class="params">res</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>发送post请求</strong></p><h4 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h4><h5 id="uni-setStorage"><a href="#uni-setStorage" class="headerlink" title="uni.setStorage"></a><strong>uni.setStorage</strong></h5><p><a href="https://uniapp.dcloud.io/api/storage/storage?id=setstorage">官方文档</a></p><p>将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口。</p><p>代码演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;setStor&quot;</span>&gt;</span>存储数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">setStor () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">uni.<span class="title function_">setStorage</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="attr">key</span>: <span class="string">&#x27;id&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="attr">data</span>: <span class="number">100</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> success () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;存储成功&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="uni-setStorageSync"><a href="#uni-setStorageSync" class="headerlink" title="uni.setStorageSync"></a>uni.setStorageSync</h5><p>将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口。</p><p>代码演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;setStor&quot;</span>&gt;</span>存储数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">setStor () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">uni.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;id&#x27;</span>,<span class="number">100</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="uni-getStorage"><a href="#uni-getStorage" class="headerlink" title="uni.getStorage"></a>uni.getStorage</h5><p>从本地缓存中异步获取指定 key 对应的内容。</p><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getStorage&quot;</span>&gt;</span>获取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">data () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">id</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">getStorage () &#123;</span></span><br><span class="line"><span class="language-javascript">uni.<span class="title function_">getStorage</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">key</span>: <span class="string">&#x27;id&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">success</span>:  <span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">id</span> = res.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="uni-getStorageSync"><a href="#uni-getStorageSync" class="headerlink" title="uni.getStorageSync"></a>uni.getStorageSync</h5><p>从本地缓存中同步获取指定 key 对应的内容。</p><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getStorage&quot;</span>&gt;</span>获取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">getStorage () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> id = uni.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;id&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(id)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="uni-removeStorage"><a href="#uni-removeStorage" class="headerlink" title="uni.removeStorage"></a>uni.removeStorage</h5><p>从本地缓存中异步移除指定 key。</p><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;removeStorage&quot;</span>&gt;</span>删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">removeStorage () &#123;</span></span><br><span class="line"><span class="language-javascript">uni.<span class="title function_">removeStorage</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">key</span>: <span class="string">&#x27;id&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="uni-removeStorageSync"><a href="#uni-removeStorageSync" class="headerlink" title="uni.removeStorageSync"></a>uni.removeStorageSync</h5><p>从本地缓存中同步移除指定 key。</p><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;removeStorage&quot;</span>&gt;</span>删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">removeStorage () &#123;</span></span><br><span class="line"><span class="language-javascript">uni.<span class="title function_">removeStorageSync</span>(<span class="string">&#x27;id&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="上传图片、预览图片"><a href="#上传图片、预览图片" class="headerlink" title="上传图片、预览图片"></a>上传图片、预览图片</h4><h5 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h5><p>uni.chooseImage方法从本地相册选择图片或使用相机拍照。</p><p>案例代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;chooseImg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>上传图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">v-for</span>=<span class="string">&quot;item in imgArr&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">data () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">imgArr</span>: []</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">chooseImg () &#123;</span></span><br><span class="line"><span class="language-javascript">uni.<span class="title function_">chooseImage</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">count</span>: <span class="number">9</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">success</span>: <span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">imgArr</span> = res.<span class="property">tempFilePaths</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="预览图片"><a href="#预览图片" class="headerlink" title="预览图片"></a>预览图片</h5><p>结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">v-for</span>=<span class="string">&quot;item in imgArr&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;item&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;previewImg(item)&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>预览图片的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">previewImg (current) &#123;</span><br><span class="line">  uni.<span class="title function_">previewImage</span>(&#123;</span><br><span class="line">    <span class="attr">urls</span>: <span class="variable language_">this</span>.<span class="property">imgArr</span>,</span><br><span class="line">    current</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="条件注释实现跨段兼容"><a href="#条件注释实现跨段兼容" class="headerlink" title="条件注释实现跨段兼容"></a>条件注释实现跨段兼容</h4><p>条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。</p><p><strong>写法：</strong>以 #ifdef 加平台标识 开头，以 #endif 结尾。</p><p>平台标识</p><table><thead><tr><th>值</th><th>平台</th><th>参考文档</th></tr></thead><tbody><tr><td>APP-PLUS</td><td>5+App</td><td><a href="http://www.html5plus.org/doc/">HTML5+ 规范</a></td></tr><tr><td>H5</td><td>H5</td><td></td></tr><tr><td>MP-WEIXIN</td><td>微信小程序</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/api/">微信小程序</a></td></tr><tr><td>MP-ALIPAY</td><td>支付宝小程序</td><td><a href="https://docs.alipay.com/mini/developer/getting-started">支付宝小程序</a></td></tr><tr><td>MP-BAIDU</td><td>百度小程序</td><td><a href="https://smartprogram.baidu.com/docs/develop/tutorial/codedir/">百度小程序</a></td></tr><tr><td>MP-TOUTIAO</td><td>头条小程序</td><td><a href="https://developer.toutiao.com/dev/cn/mini-app/develop/framework/basic-reference/introduction">头条小程序</a></td></tr><tr><td>MP-QQ</td><td>QQ小程序</td><td>（目前仅cli版支持）</td></tr><tr><td>MP</td><td>微信小程序&#x2F;支付宝小程序&#x2F;百度小程序&#x2F;头条小程序&#x2F;QQ小程序</td><td></td></tr></tbody></table><h5 id="组件的条件注释"><a href="#组件的条件注释" class="headerlink" title="组件的条件注释"></a>组件的条件注释</h5><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- #ifdef H5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  h5页面会显示</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #ifdef MP-WEIXIN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  微信小程序会显示</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #ifdef APP-PLUS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  app会显示</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #endif --&gt;</span></span><br></pre></td></tr></table></figure><h5 id="api的条件注释"><a href="#api的条件注释" class="headerlink" title="api的条件注释"></a>api的条件注释</h5><p>代码演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">onLoad () &#123;</span><br><span class="line">  <span class="comment">//#ifdef MP-WEIXIN</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;微信小程序&#x27;</span>)</span><br><span class="line">  <span class="comment">//#endif</span></span><br><span class="line">  <span class="comment">//#ifdef H5</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;h5页面&#x27;</span>)</span><br><span class="line">  <span class="comment">//#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>样式的条件注释</p><p>代码演示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* #ifdef H5 */</span></span><br><span class="line">view&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* #endif */</span></span><br><span class="line"><span class="comment">/* #ifdef MP-WEIXIN */</span></span><br><span class="line">view&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* #endif */</span></span><br></pre></td></tr></table></figure><h4 id="uni中的导航跳转"><a href="#uni中的导航跳转" class="headerlink" title="uni中的导航跳转"></a>uni中的导航跳转</h4><h5 id="利用navigator进行跳转"><a href="#利用navigator进行跳转" class="headerlink" title="利用navigator进行跳转"></a>利用navigator进行跳转</h5><p>navigator详细文档：<a href="https://uniapp.dcloud.io/component/navigator">文档地址</a></p><p>跳转到普通页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/about/about&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;navigator-hover&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;default&quot;</span>&gt;</span>跳转到关于页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure><p>跳转到tabbar页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/message/message&quot;</span> <span class="attr">open-type</span>=<span class="string">&quot;switchTab&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;default&quot;</span>&gt;</span>跳转到message页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="利用编程式导航进行跳转"><a href="#利用编程式导航进行跳转" class="headerlink" title="利用编程式导航进行跳转"></a>利用编程式导航进行跳转</h5><p><a href="%5Buni.navigateTo%5D(https://uniapp.dcloud.io/api/router?id=navigateto)">导航跳转文档</a></p><p><strong>利用navigateTo进行导航跳转</strong></p><p>保留当前页面，跳转到应用内的某个页面，使用<code>uni.navigateBack</code>可以返回到原页面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;goAbout&quot;</span>&gt;</span>跳转到关于页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过navigateTo方法进行跳转到普通页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goAbout () &#123;</span><br><span class="line">  uni.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/pages/about/about&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过switchTab跳转到tabbar页面</strong></p><p>跳转到tabbar页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;goMessage&quot;</span>&gt;</span>跳转到message页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过switchTab方法进行跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goMessage () &#123;</span><br><span class="line">  uni.<span class="title function_">switchTab</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/pages/message/message&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>redirectTo进行跳转</strong> </p><p>关闭当前页面，跳转到应用内的某个页面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;goMessage&quot;</span>&gt;</span>跳转到message页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- js --&gt;</span></span><br><span class="line">goMessage () &#123;</span><br><span class="line">  uni.switchTab(&#123;</span><br><span class="line">    url: &#x27;/pages/message/message&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过onUnload测试当前组件确实卸载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onUnload () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件卸载了&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="导航跳转传递参数"><a href="#导航跳转传递参数" class="headerlink" title="导航跳转传递参数"></a>导航跳转传递参数</h5><p>在导航进行跳转到下一个页面的同时，可以给下一个页面传递相应的参数，接收参数的页面可以通过onLoad生命周期进行接收</p><p>传递参数的页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goAbout () &#123;</span><br><span class="line">  uni.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/pages/about/about?id=80&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收参数的页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">onLoad (options) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(options)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="uni-app中组件的创建"><a href="#uni-app中组件的创建" class="headerlink" title="uni-app中组件的创建"></a>uni-app中组件的创建</h4><p>在uni-app中，可以通过创建一个后缀名为vue的文件，即创建一个组件成功，其他组件可以将该组件通过impot的方式导入，在通过components进行注册即可</p><ul><li><p>创建login组件，在component中创建login目录，然后新建login.vue文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是一个自定义组件</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>在其他组件中导入该组件并注册</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import login from &quot;@/components/test/test.vue&quot;</span><br></pre></td></tr></table></figure></li><li><p>注册组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">components</span>: &#123;test&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;test&gt;&lt;/test&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="组件的生命周期函数"><a href="#组件的生命周期函数" class="headerlink" title="组件的生命周期函数"></a>组件的生命周期函数</h5><table><thead><tr><th>beforeCreate</th><th>在实例初始化之后被调用。<a href="https://cn.vuejs.org/v2/api/#beforeCreate">详见</a></th><th></th><th></th></tr></thead><tbody><tr><td>created</td><td>在实例创建完成后被立即调用。<a href="https://cn.vuejs.org/v2/api/#created">详见</a></td><td></td><td></td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用。<a href="https://cn.vuejs.org/v2/api/#beforeMount">详见</a></td><td></td><td></td></tr><tr><td>mounted</td><td>挂载到实例上去之后调用。<a href="https://cn.vuejs.org/v2/api/#mounted">详见</a> 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用<code>$nextTick</code><a href="https://cn.vuejs.org/v2/api/#Vue-nextTick">Vue官方文档</a></td><td></td><td></td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟 DOM 打补丁之前。<a href="https://cn.vuejs.org/v2/api/#beforeUpdate">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>updated</td><td>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。<a href="https://cn.vuejs.org/v2/api/#updated">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用。在这一步，实例仍然完全可用。<a href="https://cn.vuejs.org/v2/api/#beforeDestroy">详见</a></td><td></td><td></td></tr><tr><td>destroyed</td><td>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<a href="https://cn.vuejs.org/v2/api/#destroyed">详见</a></td><td></td><td></td></tr></tbody></table><h4 id="组件的通讯"><a href="#组件的通讯" class="headerlink" title="组件的通讯"></a>组件的通讯</h4><h5 id="父组件给子组件传值"><a href="#父组件给子组件传值" class="headerlink" title="父组件给子组件传值"></a>父组件给子组件传值</h5><p>通过props来接受外界传递到组件内部的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是一个自定义组件 &#123;&#123;msg&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">props: [&#x27;msg&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>其他组件在使用login组件的时候传递值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;test :msg=&quot;msg&quot;&gt;&lt;/test&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import test from &quot;@/components/test/test.vue&quot;</span><br><span class="line">export default &#123;</span><br><span class="line">data () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &#x27;hello&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">components: &#123;test&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="子组件给父组件传值"><a href="#子组件给父组件传值" class="headerlink" title="子组件给父组件传值"></a>子组件给父组件传值</h5><p>通过$emit触发事件进行传递参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">这是一个自定义组件 &#123;&#123;msg&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;sendMsg&quot;</span>&gt;</span>给父组件传值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">data () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">status</span>: <span class="string">&#x27;打篮球&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">value</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">sendMsg () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;myEvent&#x27;</span>,<span class="variable language_">this</span>.<span class="property">status</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件定义自定义事件并接收参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span> <span class="attr">:msg</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">myEvent</span>=<span class="string">&quot;getMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">&quot;@/components/test/test.vue&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">data () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">getMsg (res) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="attr">components</span>: &#123;test&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="兄弟组件通讯"><a href="#兄弟组件通讯" class="headerlink" title="兄弟组件通讯"></a>兄弟组件通讯</h5><h4 id="uni-ui的使用"><a href="#uni-ui的使用" class="headerlink" title="uni-ui的使用"></a>uni-ui的使用</h4><p><a href="https://uniapp.dcloud.io/component/README?id=uniui">uni-ui文档</a></p><p>1、进入Grid宫格组件</p><p>2、使用HBuilderX导入该组件</p><p>3、导入该组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import uniGrid from &quot;@/components/uni-grid/uni-grid.vue&quot;</span><br><span class="line">import uniGridItem from &quot;@/components/uni-grid-item/uni-grid-item.vue&quot;</span><br></pre></td></tr></table></figure><p>4、注册组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">components: &#123;uniGrid,uniGridItem&#125;</span><br></pre></td></tr></table></figure><p>5、使用组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uni-grid</span> <span class="attr">:column</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uni-grid-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">uni-grid-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uni-grid-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">uni-grid-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uni-grid-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">uni-grid-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">uni-grid</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;uni-app的基本使用&quot;&gt;&lt;a href=&quot;#uni-app的基本使用&quot; class=&quot;headerlink&quot; title=&quot;uni-app的基本使用&quot;&gt;&lt;/a&gt;uni-app的基本使用&lt;/h4&gt;&lt;p&gt;课程介绍：&lt;/p&gt;
&lt;p&gt;基础部分：&lt;/p&gt;
&lt;ul&gt;
&lt;l</summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="uni-app" scheme="https://blog.zepo.re/categories/Learning/uni-app/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="uni-app" scheme="https://blog.zepo.re/tags/uni-app/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 - 23-04-05</title>
    <link href="https://blog.zepo.re/2023/04/05/2023-04-05.html/"/>
    <id>https://blog.zepo.re/2023/04/05/2023-04-05.html/</id>
    <published>2023-04-05T03:30:23.000Z</published>
    <updated>2023-04-05T14:30:35.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="uniapp-23-04-05"><a href="#uniapp-23-04-05" class="headerlink" title="uniapp - 23-04-05"></a>uniapp - 23-04-05</h1><h2 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h2><h3 id="condition"><a href="#condition" class="headerlink" title="condition"></a>condition</h3><p>配置项</p><p>pages配置项的第一个顺序为默认的首页</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//list[0]==&#123;&quot;name&quot;: &quot;详情页&quot;,&quot;path&quot;: &quot;pages/detail/detail&quot;,&quot;query&quot;: &quot;id=80&quot;&#125;</span></span><br><span class="line"><span class="string">&quot;condition&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;current&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&quot;list&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;详情页&quot;</span>,</span><br><span class="line"><span class="string">&quot;path&quot;</span>: <span class="string">&quot;pages/detail/detail&quot;</span>,</span><br><span class="line"><span class="string">&quot;query&quot;</span>: <span class="string">&quot;id=80&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>微信开发者工具启动方式<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304051212530.png"></p><h2 id="缓存数据的异步方法与同步方法"><a href="#缓存数据的异步方法与同步方法" class="headerlink" title="缓存数据的异步方法与同步方法"></a>缓存数据的异步方法与同步方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//异步写法</span><br><span class="line">uni.setStorage(&#123;</span><br><span class="line">key: &#x27;id&#x27;,</span><br><span class="line">data: 80,</span><br><span class="line">success(res) &#123;</span><br><span class="line">console.log(&#x27;存储成功&#x27;,res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">//同步写法</span><br><span class="line">uni.setStorageSync(&#x27;id&#x27;,80)</span><br><span class="line"></span><br><span class="line">//异步写法</span><br><span class="line">uni.getStorage(&#123;</span><br><span class="line">key: &#x27;id&#x27;,</span><br><span class="line">success(res) &#123;</span><br><span class="line">console.log(&#x27;获取成功&#x27;,res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">//同步写法</span><br><span class="line">console.log(uni.getStorageSync(&#x27;id&#x27;));</span><br><span class="line"></span><br><span class="line">//异步写法</span><br><span class="line">uni.removeStorage(&#123;</span><br><span class="line">key:&#x27;id&#x27;,</span><br><span class="line">success(res) &#123;</span><br><span class="line">console.log(&#x27;移除成功&#x27;,res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">//同步写法</span><br><span class="line">uni.removeStorageSync(&#x27;id&#x27;);</span><br></pre></td></tr></table></figure><h2 id="上传图片以及预览"><a href="#上传图片以及预览" class="headerlink" title="上传图片以及预览"></a>上传图片以及预览</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;button type=&quot;primary&quot; @click=&quot;chooseImg&quot;&gt;上传图片&lt;/button&gt;</span><br><span class="line">&lt;image</span><br><span class="line">v-for=&quot;(img,index) in imgArr&quot;</span><br><span class="line">:key=&quot;index&quot;</span><br><span class="line">:src=&quot;img&quot;</span><br><span class="line">mode=&quot;aspectFit&quot;</span><br><span class="line">@click=&quot;previewImg(img)&quot;</span><br><span class="line">&gt;&lt;/image&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">imgArr:[]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">chooseImg() &#123;</span><br><span class="line">uni.chooseImage(&#123;</span><br><span class="line">count:5,//实际上很多时候控制不了</span><br><span class="line">success:(imgs)=&gt;&#123;</span><br><span class="line">console.log(imgs);</span><br><span class="line">this.imgArr = imgs.tempFilePaths</span><br><span class="line">&#125;//使用this的时候要改用箭头函数</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">previewImg(img) &#123;</span><br><span class="line">uni.previewImage(&#123;</span><br><span class="line">current:img,</span><br><span class="line">urls:this.imgArr,</span><br><span class="line">loop:true</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="多平台注释编译"><a href="#多平台注释编译" class="headerlink" title="多平台注释编译"></a>多平台注释编译</h2><p>参考官方文档-&gt;<a href="https://uniapp.dcloud.net.cn/tutorial/platform.html#preprocessor">条件编译</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#ifdef</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304052155284.png"></p><h2 id="声明式跳转及编程式跳转"><a href="#声明式跳转及编程式跳转" class="headerlink" title="声明式跳转及编程式跳转"></a>声明式跳转及编程式跳转</h2><p><a href="https://uniapp.dcloud.net.cn/component/navigator.html">声明式跳转（组件）</a><br><a href="https://uniapp.dcloud.net.cn/api/router.html">编程式跳转（API）</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;view&gt;导航跳转学习&lt;/view&gt;</span><br><span class="line">&lt;navigator url=&quot;/pages/detail/detail?id=80&amp;age=19&quot;&gt;跳转到详情页(默认可以返回)&lt;/navigator&gt;</span><br><span class="line">&lt;navigator url=&quot;/pages/message/message&quot; open-type=&quot;switchTab&quot;&gt;跳转到信息页&lt;/navigator&gt;</span><br><span class="line">&lt;navigator url=&quot;/pages/detail/detail&quot; open-type=&quot;redirect&quot;&gt;跳转到详情页（redirect不可返回）&lt;/navigator&gt;</span><br><span class="line">&lt;button @click=&quot;directToDetail&quot;&gt;跳转到详情页&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;directToMsg&quot;&gt;跳转到tab页面，并关闭所有非tab页面&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;redirectToDetail&quot;&gt;跳转非tab但仅关闭当前页面&lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">onUnload() &#123;</span><br><span class="line">console.log(&#x27;导航页面卸载了&#x27;);</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">directToDetail() &#123;</span><br><span class="line">uni.navigateTo(&#123;</span><br><span class="line">url:&quot;/pages/detail/detail&quot;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">directToMsg() &#123;</span><br><span class="line">uni.switchTab(&#123;</span><br><span class="line">url:&quot;/pages/message/message&quot;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">redirectToDetail()&#123;</span><br><span class="line">uni.redirectTo(&#123;</span><br><span class="line">url:&quot;/pages/detail/detail&quot;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>传参的形式：<code>query</code>+<code>onLoad(options)</code></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;uniapp-23-04-05&quot;&gt;&lt;a href=&quot;#uniapp-23-04-05&quot; class=&quot;headerlink&quot; title=&quot;uniapp - 23-04-05&quot;&gt;&lt;/a&gt;uniapp - 23-04-05&lt;/h1&gt;&lt;h2 id=&quot;配置相关&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="uni-app" scheme="https://blog.zepo.re/categories/Learning/uni-app/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="uni-app" scheme="https://blog.zepo.re/tags/uni-app/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 - 23-04-04</title>
    <link href="https://blog.zepo.re/2023/04/04/2023-04-04.html/"/>
    <id>https://blog.zepo.re/2023/04/04/2023-04-04.html/</id>
    <published>2023-04-04T01:37:23.000Z</published>
    <updated>2023-04-04T08:44:40.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-23-04-04"><a href="#Vue2-23-04-04" class="headerlink" title="Vue2 - 23-04-04"></a>Vue2 - 23-04-04</h1><h2 id="路由query传参"><a href="#路由query传参" class="headerlink" title="路由query传参"></a>路由query传参</h2><p>第一种写法：模板字符串+路径直接写<br><code>&lt;router-link :to=&quot;`/home/message/detail?id=$&#123;msg.id&#125;&amp;title=$&#123;msg.title&#125;&amp;content=$&#123;msg.content&#125;`&quot;&gt;</code></p><p>第二种写法：对象式写法  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link </span><br><span class="line">   :to=&quot;&#123;</span><br><span class="line">     path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">     query:&#123;</span><br><span class="line">       title:msg.title,</span><br><span class="line">       id:msg.id,</span><br><span class="line">       content:msg.content</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>使用：在路由组件找到<code>$route.query</code><br>eg.<code>&#123;&#123;$route.query.id&#125;&#125;</code></p><h2 id="路由命名"><a href="#路由命名" class="headerlink" title="路由命名"></a>路由命名</h2><p>路由命名要在路由处配置name属性，在使用的时候，给to选项用上name就不用path，可以避免把自己写乱了<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304040952466.png"></p><h2 id="路由params传参"><a href="#路由params传参" class="headerlink" title="路由params传参"></a>路由params传参</h2><p>要先到路由配置的地方进行占位<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304041031776.png"></p><p>路由params传参:路径写法<br><code>&lt;router-link :to=&quot;</code>&#x2F;home&#x2F;message&#x2F;detail&#x2F;${msg.id}&#x2F;${msg.title}&#x2F;${msg.content}<code>&quot;&gt;</code>  </p><p>路由params传参:对象写法<br><code>&lt;router-link :to=&quot;</code>&#x2F;home&#x2F;message&#x2F;detail&#x2F;${msg.id}&#x2F;${msg.title}&#x2F;${msg.content}<code>&quot;&gt;</code></p><h2 id="两种传参方式总结"><a href="#两种传参方式总结" class="headerlink" title="两种传参方式总结"></a>两种传参方式总结</h2><h3 id="路由的query参数"><a href="#路由的query参数" class="headerlink" title="路由的query参数"></a>路由的query参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化跳转：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">    :to=&quot;&#123;</span><br><span class="line">        name:&#x27;hello&#x27;,</span><br><span class="line">        query:&#123;</span><br><span class="line">           id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="路由的params参数"><a href="#路由的params参数" class="headerlink" title="路由的params参数"></a>路由的params参数</h3><ol><li><p>配置路由，声明接收params参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;xiangqing&#x27;,</span><br><span class="line">params:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="使用props提高接收参数的效率"><a href="#使用props提高接收参数的效率" class="headerlink" title="使用props提高接收参数的效率"></a>使用props提高接收参数的效率</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 第一种写法：对象式，只能写死数据</span><br><span class="line">// props:&#123;a:&quot;xxx&quot;,b:&quot;yyy&quot;&#125;</span><br><span class="line">//第二种写法：能接收到所有的params</span><br><span class="line">// props:true</span><br><span class="line">//第三种写法：函数式，返回值会给到路由组件的props</span><br><span class="line">props(route)&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        title:route.params.title,</span><br><span class="line">        id:route.params.id,</span><br><span class="line">        content:route.params.content</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>作用：让路由组件更方便的收到参数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line"><span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line"><span class="attr">title</span>:route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="router-link的replace模式"><a href="#router-link的replace模式" class="headerlink" title="router-link的replace模式"></a>router-link的replace模式</h2><p>router-link的replace属性相对于默认的压栈出栈式模式  </p><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h2 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h2><ol><li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进也可后退，正负数值决定</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="路由缓存"><a href="#路由缓存" class="headerlink" title="路由缓存"></a>路由缓存</h2><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 缓存所有 --&gt;</span><br><span class="line">&lt;!-- &lt;keep-alive&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt; --&gt;</span><br><span class="line">&lt;!-- 缓存指定单个 --&gt;</span><br><span class="line">&lt;!-- &lt;keep-alive&gt;</span><br><span class="line">&lt;router-view include=&quot;News&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt; --&gt;</span><br><span class="line">&lt;!-- 缓存指定多个 --&gt;</span><br><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;router-view :include=&quot;[&#x27;News&#x27;,&#x27;Message&#x27;]&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><h2 id="使用了keep-alive之后才有两个生命周期！"><a href="#使用了keep-alive之后才有两个生命周期！" class="headerlink" title="使用了keep-alive之后才有两个生命周期！"></a>使用了keep-alive之后才有两个生命周期！</h2><p>配合<code>keep-alive</code>标签时候，有了这两个新的生命周期钩子，不会重新create组件，但会监测激活状态</p><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><p>路由守卫有三大类：全局守卫、独享守卫、组件内守卫。<br>全局守卫分前后守卫，<code>beforeEach((to,from,next)=&gt;&#123;&#125;)</code>、<code>afterEach((to,from,next)=&gt;&#123;&#125;)</code><br>独享守卫只有<code>beforeEnter((to,from,next)=&gt;&#123;&#125;)</code><br>组件内守卫分两种：<code>beforeRouterEnter((to,from,next)=&gt;&#123;&#125;)</code>、<code>beforeRouterLeave((to,from,next)=&gt;&#123;&#125;)</code>，要注意只有被路由的时候才会触发，作为组件不会触发</p><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>)&#123; </span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>独享守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件内守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="路由器的两种工作模式"><a href="#路由器的两种工作模式" class="headerlink" title="路由器的两种工作模式"></a>路由器的两种工作模式</h2><ol><li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li><li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</li><li>hash模式：<ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li>history模式：<ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue2-23-04-04&quot;&gt;&lt;a href=&quot;#Vue2-23-04-04&quot; class=&quot;headerlink&quot; title=&quot;Vue2 - 23-04-04&quot;&gt;&lt;/a&gt;Vue2 - 23-04-04&lt;/h1&gt;&lt;h2 id=&quot;路由query传参&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/categories/Learning/Vue2/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/tags/Vue2/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 - 23-04-03</title>
    <link href="https://blog.zepo.re/2023/04/03/2023-04-03.html/"/>
    <id>https://blog.zepo.re/2023/04/03/2023-04-03.html/</id>
    <published>2023-04-03T01:33:23.000Z</published>
    <updated>2023-04-03T14:32:58.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-23-04-03"><a href="#Vue2-23-04-03" class="headerlink" title="Vue2 - 23-04-03"></a>Vue2 - 23-04-03</h1><h2 id="mapMutations和mapActions"><a href="#mapMutations和mapActions" class="headerlink" title="mapMutations和mapActions"></a>mapMutations和mapActions</h2><p><code>mapMutations和mapActions</code> 跟 <code>mapState和mapGetters</code> 很像<br>写法：  </p><ul><li><code>...mapMutations(&#123;methodName:&#39;mutationName&#39;,methodName:&#39;mutationName&#39;,...&#125;)</code> &#x2F; <code>...mapMutations([&#39;mutationName(==methodName)&#39;,&#39;mutationName(==methodName)&#39;,...])</code>  </li><li><code>...mapActions(&#123;methodName:&#39;actionName&#39;,methodName:&#39;actionName&#39;,...&#125;)</code> &#x2F; <code>...mapActions([&#39;actionName(==methodName)&#39;,&#39;actionName(==methodName)&#39;,...])</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">            // 自己写mutations调用者方法</span><br><span class="line">            /*increment() &#123;</span><br><span class="line">                this.$store.commit(&#x27;increment&#x27;,this.num)</span><br><span class="line">                console.log(this);</span><br><span class="line">            &#125;,</span><br><span class="line">            decrement() &#123;</span><br><span class="line">                this.$store.commit(&#x27;decrement&#x27;,this.num)</span><br><span class="line">            &#125;,*/</span><br><span class="line">            // mapMutations写法：对象</span><br><span class="line">            // ...mapMutations(&#123;increment:&#x27;increment&#x27;,decrement:&#x27;decrement&#x27;&#125;),</span><br><span class="line">            // mapMutations写法：数组</span><br><span class="line">            ...mapMutations([&#x27;increment&#x27;,&#x27;decrement&#x27;]),</span><br><span class="line"></span><br><span class="line">            // 自己写actions调用者方法</span><br><span class="line">            /*</span><br><span class="line">            incrementOdd()&#123;</span><br><span class="line">                this.$store.dispatch(&#x27;incrementOdd&#x27;,this.num)</span><br><span class="line">            &#125;,</span><br><span class="line">            incrementWait() &#123;</span><br><span class="line">                // setTimeout(()=&gt;&#123;</span><br><span class="line">                //     this.$store.dispatch(&#x27;incrementWait&#x27;,this.num)</span><br><span class="line">                // &#125;,3000)</span><br><span class="line">                this.$store.dispatch(&#x27;incrementWait&#x27;,this.num)</span><br><span class="line">            */</span><br><span class="line">            // mapActions写法：对象</span><br><span class="line">            // ...mapActions(&#123;incrementOdd:&#x27;incrementOdd&#x27;,incrementWait:&#x27;incrementWait&#x27;&#125;)</span><br><span class="line">            // mapActions写法：数组</span><br><span class="line">            ...mapActions([&#x27;incrementOdd&#x27;,&#x27;incrementWait&#x27;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vuex模块化写法与namespaced属性"><a href="#vuex模块化写法与namespaced属性" class="headerlink" title="vuex模块化写法与namespaced属性"></a>vuex模块化写法与namespaced属性</h2><h3 id="引入并配置"><a href="#引入并配置" class="headerlink" title="引入并配置"></a>引入并配置</h3><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304031342769.png"><br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304031410764.png"><br>首先要把独立配置项组合（标配四大件：actions、mutations、state、getters）的对象分开写，导入index.js，之后在配置Vuex.Store的时候，传入modules对象，每对<code>key-value</code>分别对应<code>namespace:模块对象的名字</code></p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>在computed&#x2F;methods中，使用mapXX的话与前面非模块化写法类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123;mapXXX,...&#125; from &#x27;vuex&#x27;</span><br><span class="line">computed() &#123;</span><br><span class="line">    ...mapState(&#x27;namespace&#x27;,[&#x27;stateName1&#x27;,&#x27;stateName2&#x27;,...]),</span><br><span class="line">    ...mapGetters(&#x27;namespace&#x27;,[&#x27;gettersName1&#x27;,&#x27;gettersNames2&#x27;,...])</span><br><span class="line">&#125;</span><br><span class="line">methods() &#123;</span><br><span class="line">    ...mapActions(&#x27;namespace&#x27;,[&#x27;actionsName1&#x27;,&#x27;actionsName2&#x27;,...])</span><br><span class="line">    ...mapMutations(&#x27;namespace&#x27;,[&#x27;mutationsName1&#x27;,&#x27;mutationsName2&#x27;,...])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手动写的话会麻烦很多</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">computed() &#123;</span><br><span class="line">    stateName1() &#123;</span><br><span class="line">        return this.$store.state.namespace.stateName1</span><br><span class="line">    &#125;</span><br><span class="line">    gettersName1() &#123;</span><br><span class="line">        return this.$store.getters[namespace/gettersName1]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">methods() &#123;</span><br><span class="line">    actionsName1() &#123;</span><br><span class="line">        this.$store.dispatch(&#x27;namespace/actionsName1&#x27;,param)</span><br><span class="line">    &#125;</span><br><span class="line">    mutationsName1() &#123;</span><br><span class="line">        this.$store.commit(&#x27;namespace/mutationsName1&#x27;,param)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结以及笔记"><a href="#总结以及笔记" class="headerlink" title="总结以及笔记"></a>总结以及笔记</h2><h3 id="四个map方法的使用"><a href="#四个map方法的使用" class="headerlink" title="四个map方法的使用"></a>四个map方法的使用</h3><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="模块化-命名空间"><a href="#模块化-命名空间" class="headerlink" title="模块化+命名空间"></a>模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件，后端路由value是函数</li></ol><h3 id="配置并引入路由"><a href="#配置并引入路由" class="headerlink" title="配置并引入路由"></a>配置并引入路由</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//.../router/index.js</span><br><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import VC from &#x27;xxx/xxx&#x27;</span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line">const vr = new VueRouter(&#123;</span><br><span class="line">   routes:[</span><br><span class="line">      &#123;path: &#x27;/path&#x27;, component: VC&#125;,</span><br><span class="line">   ]</span><br><span class="line">&#125;)</span><br><span class="line">export default vr</span><br><span class="line">//.../main.js</span><br><span class="line">import vr from &#x27;.../router&#x27;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">   router:vr</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由的使用"><a href="#路由的使用" class="headerlink" title="路由的使用"></a>路由的使用</h3><p>可以配合<code>&lt;router-view&gt;&lt;/router-view&gt;</code>和<code>&lt;router-link&gt;&lt;/router-link&gt;</code>一起使用，<code>&lt;router-view&gt;&lt;/router-view&gt;</code>为路由到的组件之后会插入的地方，<code>&lt;router-link&gt;&lt;/router-link&gt;</code>最后会解析成<code>&lt;a&gt;</code>标签</p><h2 id="路由基本使用——总结"><a href="#路由基本使用——总结" class="headerlink" title="路由基本使用——总结"></a>路由基本使用——总结</h2><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定展示位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h2 id="多级路由（多级路由）"><a href="#多级路由（多级路由）" class="headerlink" title="多级路由（多级路由）"></a>多级路由（多级路由）</h2><ol><li><p>配置路由规则，使用children配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>跳转（要写完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue2-23-04-03&quot;&gt;&lt;a href=&quot;#Vue2-23-04-03&quot; class=&quot;headerlink&quot; title=&quot;Vue2 - 23-04-03&quot;&gt;&lt;/a&gt;Vue2 - 23-04-03&lt;/h1&gt;&lt;h2 id=&quot;mapMutations和mapA</summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/categories/Learning/Vue2/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/tags/Vue2/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 - 23-04-02</title>
    <link href="https://blog.zepo.re/2023/04/02/2023-04-02.html/"/>
    <id>https://blog.zepo.re/2023/04/02/2023-04-02.html/</id>
    <published>2023-04-02T02:59:23.000Z</published>
    <updated>2023-04-02T14:37:42.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-23-04-02"><a href="#Vue2-23-04-02" class="headerlink" title="Vue2 - 23-04-02"></a>Vue2 - 23-04-02</h1><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">           &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>具名插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">              &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">            &lt;template v-slot:footer&gt;</span><br><span class="line">               &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">                &lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">                &lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">                &lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;</span><br><span class="line">                name:&#x27;Category&#x27;,</span><br><span class="line">                props:[&#x27;title&#x27;],</span><br><span class="line">                //数据在子组件自身</span><br><span class="line">                data() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p>官方文档-&gt;<a href="https://v3.vuex.vuejs.org/zh/">与 Vue 2 匹配的 Vuex 3 的文档</a>  </p><h3 id="Vuex的引入"><a href="#Vuex的引入" class="headerlink" title="Vuex的引入"></a>Vuex的引入</h3><p>为什么不在Vue的入口文件引入？</p><blockquote><p>会出现报错，因为是插件，要引入并使用，使用的时候ES6会把import放到前面，参考视频说法：<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH/?p=108&share_source=copy_web&vd_source=39c43c193154a4c6141d1cb3c1af6aba&t=1383">【尚硅谷vuejs从入门到精通】 【精准空降到 23:03】</a></p></blockquote><p>在<code>vuex/store.js</code>或<code>store/index.js</code>(官方推荐)这样写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">// new不能丢</span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">    actions:&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    state:&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在入口函数引入  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import store from &#x27;../store&#x27;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    //...</span><br><span class="line">    store</span><br><span class="line">    //...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="使用vuex"><a href="#使用vuex" class="headerlink" title="使用vuex"></a>使用vuex</h2><p>搞清楚vuex，要清楚vuex是干嘛的，vuex是插件，插件的使用参考<a href="https://blog.zepo.re/2023/03/25/2023-03-25.html/">之前的文章</a><br>我们可以在组件实例中通过<code>this.$store.dispatch(params)</code>操作store的actions，也可以通过<code>this.$store.commit(params)</code>操作store的mutations，当然也可以通过<code>this.$store.state.xxx</code>查看状态变量xxx。<br>在配置index的时候，actions中接收到的参数第一个是context，一个迷你版的store，第二个参数是在dispatch传入的值；配置mutations的时候，第一个参数是状态变量，第二个参数是调用commit的时候传入的参数<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304021724338.png"></p><h2 id="vuex基础总结"><a href="#vuex基础总结" class="headerlink" title="vuex基础总结"></a>vuex基础总结</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304022025501.png"></p><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><blockquote><p>在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信。</p></blockquote><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><blockquote><p>多个组件需要共享数据时</p></blockquote><h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line"><span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line"><span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.<span class="property">sum</span> += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h2 id="vuex的getters配置项"><a href="#vuex的getters配置项" class="headerlink" title="vuex的getters配置项"></a>vuex的getters配置项</h2><p>vuex的getters配置项类似于vm、vc中的computed，接收到的第一个参数是state，第二个参数是getters<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304022147926.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getters:&#123;</span><br><span class="line">    puls10(state,b)&#123;</span><br><span class="line">        console.log(state,b);</span><br><span class="line">        return state.sum*10;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mapState和mapGetters"><a href="#mapState和mapGetters" class="headerlink" title="mapState和mapGetters"></a>mapState和mapGetters</h2><p>在使用vuex的时候，前面那一坨重复的<code>this.$store.state</code>、<code>this.$store.getters</code>很烦人？<br>鱿鱼须也想到了这一点，然后就有了mapXXX  </p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p><code>import &#123;mapState,mapGetters&#125; from &#39;vuex&#39;</code><br><code>...mapState([&#39;stateName&#39;,...]),</code> &#x2F; <code>...mapState(&#123;computedName:&#39;stateName&#39;,...&#125;)</code><br><code>...mapGetters([&#39;gettersName&#39;,...]),</code> &#x2F; <code>...mapGetters(&#123;computedName:&#39;gettersName&#39;,...&#125;)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    import &#123;mapState,mapGetters&#125; from &#x27;vuex&#x27;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Count&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                num:1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            /*自己写计算属性</span><br><span class="line">            sum()&#123;</span><br><span class="line">                return this.$store.state.sum</span><br><span class="line">            &#125;,</span><br><span class="line">            schoolName()&#123;</span><br><span class="line">                return this.$store.state.schoolName</span><br><span class="line">            &#125;,</span><br><span class="line">            schoolAddr()&#123;</span><br><span class="line">                return this.$store.state.schoolAddr</span><br><span class="line">            &#125;,*/</span><br><span class="line">            /* 使用mapState自动生成计算属性：对象（前面为属性名，后为状态名）</span><br><span class="line">            ...mapState(&#123;sum:&#x27;sum&#x27;,schoolName:&#x27;schoolName&#x27;,schoolAddr:&#x27;schoolAddr&#x27;&#125;),*/</span><br><span class="line">            // 使用mapState自动生成计算属性：数组（属性名、状态名重合的时候对象可缺省）</span><br><span class="line">            ...mapState([&#x27;sum&#x27;,&#x27;schoolName&#x27;,&#x27;schoolAddr&#x27;]),</span><br><span class="line">            // ================================================================================</span><br><span class="line">            /* 自己写计算属性的getters</span><br><span class="line">            puls10()&#123;</span><br><span class="line">                return this.$store.getters.puls10</span><br><span class="line">            &#125;,*/</span><br><span class="line">            ...mapGetters([&#x27;plus10&#x27;])</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            increment() &#123;</span><br><span class="line">                this.$store.commit(&#x27;increment&#x27;,this.num)</span><br><span class="line">                console.log(this);</span><br><span class="line">            &#125;,</span><br><span class="line">            decrement() &#123;</span><br><span class="line">                this.$store.commit(&#x27;decrement&#x27;,this.num)</span><br><span class="line">            &#125;,</span><br><span class="line">            incrementOdd()&#123;</span><br><span class="line">                this.$store.dispatch(&#x27;incrementOdd&#x27;,this.num)</span><br><span class="line">            &#125;,</span><br><span class="line">            incrementWait() &#123;</span><br><span class="line">                // setTimeout(()=&gt;&#123;</span><br><span class="line">                //     this.$store.dispatch(&#x27;incrementWait&#x27;,this.num)</span><br><span class="line">                // &#125;,3000)</span><br><span class="line">                this.$store.dispatch(&#x27;incrementWait&#x27;,this.num)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue2-23-04-02&quot;&gt;&lt;a href=&quot;#Vue2-23-04-02&quot; class=&quot;headerlink&quot; title=&quot;Vue2 - 23-04-02&quot;&gt;&lt;/a&gt;Vue2 - 23-04-02&lt;/h1&gt;&lt;h2 id=&quot;插槽&quot;&gt;&lt;a href=&quot;#插槽&quot;</summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/categories/Learning/Vue2/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/tags/Vue2/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 - 23-03-31</title>
    <link href="https://blog.zepo.re/2023/03/31/2023-03-31.html/"/>
    <id>https://blog.zepo.re/2023/03/31/2023-03-31.html/</id>
    <published>2023-03-31T02:59:23.000Z</published>
    <updated>2023-04-02T04:24:03.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-23-03-31"><a href="#Vue2-23-03-31" class="headerlink" title="Vue2 - 23-03-31"></a>Vue2 - 23-03-31</h1><h2 id="几种常见的前后端发送接收方式"><a href="#几种常见的前后端发送接收方式" class="headerlink" title="几种常见的前后端发送接收方式"></a>几种常见的前后端发送接收方式</h2><ul><li>XHR</li><li>JQuery</li><li>axios （鱿鱼须推荐）</li><li>fetch</li></ul><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303311102797.png"></p><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><p><a href="https://juejin.cn/post/6844903718085722119">axios配合Vue使用</a>，简单的get请求就是</p><ul><li><code>import axios from &#39;axios&#39;</code></li><li><code>axios.get(xxx).then(func1,func2,...)</code></li></ul><h2 id="代理服务器接收跨域请求"><a href="#代理服务器接收跨域请求" class="headerlink" title="代理服务器接收跨域请求"></a>代理服务器接收跨域请求</h2><p>使用代理服务器进行跨域请求有两种常见的方式：</p><ul><li>Nginx</li><li>Vue-cli</li></ul><h2 id="Vue-cli配置代理服务器"><a href="#Vue-cli配置代理服务器" class="headerlink" title="Vue-cli配置代理服务器"></a>Vue-cli配置代理服务器</h2><p>vue-cli中通过 <code>vue.config.js</code> 中的 <code>devServer.proxy</code> 选项来配置，将 API 请求代理到 API 服务器<br>vue-cli文档-&gt;<a href="https://cli.vuejs.org/zh/config/#devserver-proxy">【HERE】</a><br>单个代理：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#x27;http://localhost:4000&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同路径多个代理：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">odule.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      &#x27;/api&#x27;: &#123;</span><br><span class="line">        target: &#x27;&lt;url&gt;&#x27;,</span><br><span class="line">        ws: true,</span><br><span class="line">        changeOrigin: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x27;/foo&#x27;: &#123;</span><br><span class="line">        target: &#x27;&lt;other_url&gt;&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303311114907.png"></p><h2 id="笔记-练习代码"><a href="#笔记-练习代码" class="headerlink" title="笔记&amp;练习代码"></a>笔记&amp;练习代码</h2><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;button @click=&quot;getStusInfo&quot;&gt;接收学生信息&lt;/button&gt;</span><br><span class="line">      &lt;button @click=&quot;getCarsInfo&quot;&gt;接收汽车信息&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import axios from &#x27;axios&#x27;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#x27;zepore&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          getStusInfo()&#123;</span><br><span class="line">            axios.get(&#x27;http://localhost:8080/s1/students&#x27;).then(</span><br><span class="line">              response=&gt;&#123;</span><br><span class="line">                console.log(&#x27;请求成功：&#x27;, response.data);</span><br><span class="line">              &#125;,</span><br><span class="line">              error=&gt;&#123;</span><br><span class="line">                console.log(&#x27;请求失败：&#x27;, error.message);</span><br><span class="line">              &#125;</span><br><span class="line">            )</span><br><span class="line">          &#125;,</span><br><span class="line">          getCarsInfo()&#123;</span><br><span class="line">            axios.get(&#x27;http://localhost:8080/s2/cars&#x27;).then(</span><br><span class="line">              response =&gt; &#123;</span><br><span class="line">                console.log(&#x27;请求成功：&#x27; , response.data);</span><br><span class="line">              &#125;,</span><br><span class="line">              error =&gt; &#123;</span><br><span class="line">                console.log(&#x27;请求失败：&#x27; , error.message);</span><br><span class="line">              &#125;</span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>vue.config.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const &#123; defineConfig &#125; = require(&#x27;@vue/cli-service&#x27;)</span><br><span class="line">module.exports = defineConfig(&#123;</span><br><span class="line">  transpileDependencies: true,</span><br><span class="line">  lintOnSave: false,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy:&#123;</span><br><span class="line">      &#x27;/s1&#x27;: &#123;</span><br><span class="line">        target: &#x27;http://localhost:5000&#x27;,</span><br><span class="line">        pathRewrite: &#123;&#x27;^/s1&#x27;: &#x27;&#x27;&#125;,</span><br><span class="line">        ws: true,</span><br><span class="line">        changeOrigin: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x27;/s2&#x27;: &#123;</span><br><span class="line">        target: &#x27;http://localhost:5001&#x27;,</span><br><span class="line">        pathRewrite: &#123;&#x27;^/s2&#x27;: &#x27;&#x27;&#125;,</span><br><span class="line">        ws: true,</span><br><span class="line">        changeOrigin:true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="GitHub搜索案例"><a href="#GitHub搜索案例" class="headerlink" title="GitHub搜索案例"></a>GitHub搜索案例</h2><h3 id="为何不放asset？"><a href="#为何不放asset？" class="headerlink" title="为何不放asset？"></a>为何不放asset？</h3><p>引入静态资源，会进行严格检查，没有的字体文件会报错</p><h3 id="技术难点-坑"><a href="#技术难点-坑" class="headerlink" title="技术难点&#x2F;坑"></a>技术难点&#x2F;坑</h3><h4 id="使用模板进行拼接链接"><a href="#使用模板进行拼接链接" class="headerlink" title="使用模板进行拼接链接"></a>使用模板进行拼接链接</h4><p><code>https://api.github.com/search/users?q=$&#123;this.inputVal&#125;</code> 里的 <code>$&#123;this.inputVal&#125;</code></p><h4 id="代码练习"><a href="#代码练习" class="headerlink" title="代码练习"></a>代码练习</h4><p>MyHeader.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;section class=&quot;jumbotron&quot;&gt;</span><br><span class="line">      &lt;h3 class=&quot;jumbotron-heading&quot;&gt;Search Github Users&lt;/h3&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">         type=&quot;text&quot;</span><br><span class="line">         placeholder=&quot;enter the name you search&quot;</span><br><span class="line">         v-model=&quot;inputVal&quot;</span><br><span class="line">         @keyup.enter=&quot;searchViaLogin&quot;</span><br><span class="line">         /&gt;&amp;nbsp;</span><br><span class="line">        &lt;button @click=&quot;searchViaLogin&quot;&gt;Search&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import axios from &#x27;axios&#x27;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;MyHeader&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            inputVal:&#x27;&#x27;,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          searchViaLogin()&#123;</span><br><span class="line">            this.$bus.$emit(&#x27;userList&#x27;,&#123;isFirst:false, isLoading:true, users:[], errMsg:&#x27;&#x27;&#125;)</span><br><span class="line">            axios.get(`https://api.github.com/search/users?q=$&#123;this.inputVal&#125;`).then(</span><br><span class="line">              receive =&gt;&#123;</span><br><span class="line">                  // console.log(receive.data);</span><br><span class="line">                  this.$bus.$emit(&#x27;userList&#x27;,&#123;isLoading:false, users:receive.data.items, errMsg:&#x27;&#x27;&#125;)</span><br><span class="line">              &#125;,</span><br><span class="line">              error =&gt; &#123;</span><br><span class="line">                console.log(error.message);</span><br><span class="line">                this.$bus.$emit(&#x27;userList&#x27;,&#123;isLoading:false, users:[], errMsg:error.message&#125;)</span><br><span class="line">              &#125;</span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>MyList.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">      &lt;!-- 发送成功之后 --&gt;</span><br><span class="line">      &lt;div class=&quot;card&quot; v-for=&quot;user in info.users&quot; :key=&quot;user.login&quot;&gt;</span><br><span class="line">        &lt;a :href=&quot;user.html_url&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">          &lt;img :src=&quot;user.avatar_url&quot; style=&#x27;width: 100px&#x27;/&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;p class=&quot;card-text&quot;&gt;&#123;&#123;user.login&#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 第一次展示欢迎词 --&gt;</span><br><span class="line">      &lt;div v-show=&quot;info.isFirst&quot;&gt;</span><br><span class="line">        &lt;h1&gt;欢迎使用&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 搜索过程展示加载中 --&gt;</span><br><span class="line">      &lt;div v-show=&quot;info.isLoading&quot;&gt;</span><br><span class="line">        &lt;h1&gt;加载中...&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 搜索错误展示错误信息 --&gt;</span><br><span class="line">      &lt;div v-show=&quot;info.errMsg&quot;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123;info.errMsg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &#x27;MyList&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            info: &#123;</span><br><span class="line">              isFirst:true,</span><br><span class="line">              isLoading:false,</span><br><span class="line">              users:[],</span><br><span class="line">              errMsg:&#x27;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">          this.$bus.$on(&#x27;userList&#x27;, (info)=&gt;&#123;</span><br><span class="line">            console.log(&#x27;List这边收到了&#x27;,info);</span><br><span class="line">            // this.users = users;</span><br><span class="line">            this.info = info</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.album &#123;</span><br><span class="line">    min-height: 50rem; /* Can be removed; just added for demo purposes */</span><br><span class="line">    padding-top: 3rem;</span><br><span class="line">    padding-bottom: 3rem;</span><br><span class="line">    background-color: #f7f7f7;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .card &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 33.333%;</span><br><span class="line">    padding: .75rem;</span><br><span class="line">    margin-bottom: 2rem;</span><br><span class="line">    border: 1px solid #efefef;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .card &gt; img &#123;</span><br><span class="line">    margin-bottom: .75rem;</span><br><span class="line">    border-radius: 100px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .card-text &#123;</span><br><span class="line">    font-size: 85%;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;MyHeader /&gt;</span><br><span class="line">    &lt;MyList/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import MyHeader from &#x27;./components/MyHeader.vue&#x27;</span><br><span class="line">  import MyList from &#x27;./components/MyList.vue&#x27;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#x27;zepore&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;MyHeader,MyList&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue2-23-03-31&quot;&gt;&lt;a href=&quot;#Vue2-23-03-31&quot; class=&quot;headerlink&quot; title=&quot;Vue2 - 23-03-31&quot;&gt;&lt;/a&gt;Vue2 - 23-03-31&lt;/h1&gt;&lt;h2 id=&quot;几种常见的前后端发送接收方式&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/categories/Learning/Vue2/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/tags/Vue2/"/>
    
  </entry>
  
  <entry>
    <title>Vue网课笔记</title>
    <link href="https://blog.zepo.re/2023/03/30/Vue%E8%A7%86%E9%A2%91%E8%80%81%E5%B8%88%E7%AC%94%E8%AE%B0.html/"/>
    <id>https://blog.zepo.re/2023/03/30/Vue%E8%A7%86%E9%A2%91%E8%80%81%E5%B8%88%E7%AC%94%E8%AE%B0.html/</id>
    <published>2023-03-30T14:32:23.000Z</published>
    <updated>2023-04-28T03:47:38.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><pre><code>├── node_modules ├── public│   ├── favicon.ico: 页签图标│   └── index.html: 主页面├── src│   ├── assets: 存放静态资源│   │   └── logo.png│   │── component: 存放组件│   │   └── HelloWorld.vue│   │── App.vue: 汇总所有组件│   │── main.js: 入口文件├── .gitignore: git版本管制忽略的配置├── babel.config.js: babel的配置文件├── package.json: 应用包配置文件 ├── README.md: 应用描述文件├── package-lock.json：包版本控制文件</code></pre><h2 id="关于不同版本的Vue"><a href="#关于不同版本的Vue" class="headerlink" title="关于不同版本的Vue"></a>关于不同版本的Vue</h2><ol><li>vue.js与vue.runtime.xxx.js的区别：<ol><li>vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</li><li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li></ol></li><li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</li></ol><h2 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h2><ol><li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li><li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li></ol><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><ol><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h2 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h2><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;] </code></p></li><li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//类型</span></span><br><span class="line"><span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line"><span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></blockquote></li></ol><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p> 第一步定义混合：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data()&#123;....&#125;,</span><br><span class="line">    methods:&#123;....&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 第二步使用混入：</p><p> ​全局混入：<code>Vue.mixin(xxx)</code><br> ​局部混入：<code>mixins:[&#39;xxx&#39;]</code></p></li></ol><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol><li><p>功能：用于增强Vue</p></li><li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">对象.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;...&#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用插件：<code>Vue.use()</code></p></li></ol><h2 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h2><ol><li>作用：让样式在局部生效，防止冲突。</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><h2 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h2><ol><li><p>组件化编码流程：</p><p> ​(1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p> ​(2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p> ​1).一个组件在用：放在组件自身即可。</p><p> ​2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</p><p> ​(3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p> ​(1).父组件 &#x3D;&#x3D;&gt; 子组件 通信</p><p> ​(2).子组件 &#x3D;&#x3D;&gt; 父组件 通信（要求父先给子一个函数）</p></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code><br>             该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p> ​该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p> ​该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code> xxxxxStorage.clear()</code></p><p> ​该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code></p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><h2 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">&#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p></li></ol><h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h2 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h2><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：<img src="https://img04.sogoucdn.com/app/a/100520146/5990c1dff7dc7a8fb3b34b4462bd0105" style="width:60%" /></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>​在vue.config.js中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>​编写vue.config.js配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">           &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>具名插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">              &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">            &lt;template v-slot:footer&gt;</span><br><span class="line">               &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;</span><br><span class="line">                name:&#x27;Category&#x27;,</span><br><span class="line">                props:[&#x27;title&#x27;],</span><br><span class="line">                //数据在子组件自身</span><br><span class="line">                data() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>​在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p>​多个组件需要共享数据时</p><h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line"><span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line"><span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.<span class="property">sum</span> += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"><span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">......</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6.四个map方法的使用"></a>6.四个map方法的使用</h3><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li></ol><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定展示位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h3 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h3><ol><li><p>配置路由规则，使用children配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>跳转（要写完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line">                      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化跳转：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;hello&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="6-路由的params参数"><a href="#6-路由的params参数" class="headerlink" title="6.路由的params参数"></a>6.路由的params参数</h3><ol><li><p>配置路由，声明接收params参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;xiangqing&#x27;,</span><br><span class="line">params:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h3><p>​作用：让路由组件更方便的收到参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line"><span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line"><span class="attr">title</span>:route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-的replace属性"><a href="#8-的replace属性" class="headerlink" title="8.&lt;router-link&gt;的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h3><ol><li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>)&#123; </span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>独享守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件内守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><ol><li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li><li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</li><li>hash模式：<ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li>history模式：<ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;笔记&quot;&gt;&lt;a href=&quot;#笔记&quot; class=&quot;headerlink&quot; title=&quot;笔记&quot;&gt;&lt;/a&gt;笔记&lt;/h1&gt;&lt;h2 id=&quot;脚手架文件结构&quot;&gt;&lt;a href=&quot;#脚手架文件结构&quot; class=&quot;headerlink&quot; title=&quot;脚手架文件结构&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/categories/Learning/Vue2/"/>
    
    <category term="Vue3" scheme="https://blog.zepo.re/categories/Learning/Vue3/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/tags/Vue2/"/>
    
    <category term="Vue3" scheme="https://blog.zepo.re/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 - 23-03-30</title>
    <link href="https://blog.zepo.re/2023/03/30/2023-03-30.html/"/>
    <id>https://blog.zepo.re/2023/03/30/2023-03-30.html/</id>
    <published>2023-03-30T06:05:23.000Z</published>
    <updated>2023-03-31T02:56:39.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-23-03-30"><a href="#Vue2-23-03-30" class="headerlink" title="Vue2 - 23-03-30"></a>Vue2 - 23-03-30</h1><h2 id="回顾了一下-set"><a href="#回顾了一下-set" class="headerlink" title="回顾了一下$set"></a>回顾了一下$set</h2><p>在<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=91">视频案例</a>里面，up主使用的方式修改了传过来的props，所以应该重点是为了提一下$set导致的疏忽吧<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303301711604.png"><br>如果在<code>this.$set(todo,&#39;isEdited&#39;,true)</code>中写成<code>todo.isEdited=true</code>，就没办法做到响应式，数据不会同步到App.vue</p><h2 id="关于dom未更新不存在input不能触发focus的问题"><a href="#关于dom未更新不存在input不能触发focus的问题" class="headerlink" title="关于dom未更新不存在input不能触发focus的问题"></a>关于dom未更新不存在input不能触发focus的问题</h2><p>可以使用<code>this.$nextTick(function()&#123;&#125;)</code>让下一次更新（也就是说如果本次涉及修改数据的话就是紧接着这次），再去执行回调函数<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303301718486.png"></p><h2 id="动画及过度"><a href="#动画及过度" class="headerlink" title="动画及过度"></a>动画及过度</h2><p><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=91">【视频地址p91-p95】</a>，因为这部分内容很容易忘，之前学习css的时候就练过，都还回去了…后面需要在进行补充吧  </p><h3 id="vue-动画的理解"><a href="#vue-动画的理解" class="headerlink" title="vue 动画的理解"></a>vue 动画的理解</h3><ul><li>1.操作 css 的 trasition 或 animation</li><li>2.vue 会给目标元素添加&#x2F;移除特定的 class</li><li>3.过渡的相关类名：<ul><li>1.xxx-enter-active: 指定显示的 transition</li><li>2.xxx-leave-active: 指定隐藏的 transition</li><li>3.xxx-enter&#x2F;xxx-leave-to: 指定隐藏时的样式</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303302210004.png">  </p><h3 id="基本过渡动画的编码"><a href="#基本过渡动画的编码" class="headerlink" title="基本过渡动画的编码"></a>基本过渡动画的编码</h3><ul><li>1.在目标元素外包裹<transition name="xxx"></li><li>2.定义 class 样式<ul><li>a)指定过渡样式: transition</li><li>b)指定隐藏时的样式: opacity&#x2F;其它</li></ul></li></ul><h3 id="使用第三方动画库animate-css"><a href="#使用第三方动画库animate-css" class="headerlink" title="使用第三方动画库animate.css"></a>使用第三方动画库animate.css</h3><p><a href="https://animate.style/">animate.css官网</a>已经给出了相对详细的使用方式了</p><p>贴出完整Test.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏文字&lt;/button&gt;</span><br><span class="line">    &lt;!-- 前两个使用的是默认名称 --&gt;</span><br><span class="line">    &lt;transition&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;isShow&quot; class=&quot;test&quot;&gt;你好，这是&#123;&#123;name&#125;&#125;！！(一样)&lt;/h1&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">    &lt;transition&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;!isShow&quot; class=&quot;test&quot;&gt;你好，这是&#123;&#123;name.toUpperCase()&#125;&#125;！！(一样)&lt;/h1&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 这是自定义名称动画效果 --&gt;</span><br><span class="line">    &lt;transition name=&quot;test2&quot;&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;isShow&quot; class=&quot;test2&quot;&gt;你好，这是&#123;&#123;name&#125;&#125;！！（二）&lt;/h1&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">    &lt;!-- 使用过渡效果 --&gt;</span><br><span class="line">    &lt;transition name=&quot;test3&quot;&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;!isShow&quot; class=&quot;test3&quot;&gt;你好，这是&#123;&#123;name.toUpperCase()&#125;&#125;！！（三）&lt;/h1&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;transition</span><br><span class="line">        appear</span><br><span class="line">        name=&quot;animate__animated animate__bounce&quot;</span><br><span class="line">        enter-active-class=&quot;animate__backInRight&quot;</span><br><span class="line">        leave-active-class=&quot;animate__backOutRight&quot;</span><br><span class="line">    &gt;</span><br><span class="line">        &lt;h1 v-show=&quot;isShow&quot; class=&quot;test4&quot;&gt;你好啊&lt;/h1&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import &#x27;animate.css&#x27;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#x27;linzepore&#x27;,</span><br><span class="line">                isShow:true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .test &#123;</span><br><span class="line">        background-color: orange;</span><br><span class="line">        color: black;</span><br><span class="line">        width: 500px;</span><br><span class="line">    &#125;</span><br><span class="line">    .v-enter-active &#123;</span><br><span class="line">        animation: testAni 0.5s;</span><br><span class="line">    &#125;</span><br><span class="line">    .v-leave-active &#123;</span><br><span class="line">        animation: testAni reverse 0.5s</span><br><span class="line">    &#125;</span><br><span class="line">    @keyframes testAni &#123;</span><br><span class="line">        from &#123;</span><br><span class="line">            transform: translateX(-100%);</span><br><span class="line">        &#125;</span><br><span class="line">        to &#123;</span><br><span class="line">            transform: translateX(0%);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .test2 &#123;</span><br><span class="line">        background-color: green;</span><br><span class="line">        color: black;</span><br><span class="line">        width: 500px;</span><br><span class="line">    &#125;</span><br><span class="line">    .test2-enter-active &#123;</span><br><span class="line">        animation: testAni2 .5s;</span><br><span class="line">    &#125;</span><br><span class="line">    .test-leave-active &#123;</span><br><span class="line">        animation: testAni2 reverse .5s;</span><br><span class="line">    &#125;</span><br><span class="line">    @keyframes testAni2 &#123;</span><br><span class="line">        from &#123;</span><br><span class="line">            transform: translateX(-100%);</span><br><span class="line">        &#125;</span><br><span class="line">        to &#123;</span><br><span class="line">            transform: translateX(0%);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .test3 &#123;</span><br><span class="line">        background-color: blue;</span><br><span class="line">        color: black;</span><br><span class="line">        width: 500px;</span><br><span class="line">        /* transition: 0.5s; 不破坏结构，可以写成动画：active */</span><br><span class="line">    &#125;</span><br><span class="line">    .test3-enter &#123;</span><br><span class="line">        transform: translateX(-100%);</span><br><span class="line">    &#125;</span><br><span class="line">    .test3-enter-to &#123;</span><br><span class="line">        transform: translateX(0%);</span><br><span class="line">    &#125;</span><br><span class="line">    .test3-leave &#123;</span><br><span class="line">        transform: translateX(0%);</span><br><span class="line">    &#125;</span><br><span class="line">    .test3-leave-to &#123;</span><br><span class="line">        transform: translateX(-100%);</span><br><span class="line">    &#125;</span><br><span class="line">    .test3-enter-active, .test3-leave-active &#123;</span><br><span class="line">        transition: .5s;</span><br><span class="line">    &#125;</span><br><span class="line">    .test4 &#123;</span><br><span class="line">        background-color: blueviolet;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>给todoList进行补充动画效果，只修改了List.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">      &lt;ul class=&quot;todo-main&quot;&gt;</span><br><span class="line">          &lt;!-- 每一份都是独一无二的vc --&gt;</span><br><span class="line">      &lt;transition-group name=&#x27;todo&#x27; &gt;</span><br><span class="line">          &lt;MyItem </span><br><span class="line">          appear</span><br><span class="line">          v-for=&quot;todo in todos&quot; </span><br><span class="line">          :key=&quot;todo.id&quot;</span><br><span class="line">          :todoItem=&quot;todo&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">      &lt;/transition-group&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import MyItem from &#x27;./MyItem.vue&#x27;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;MyList&#x27;,</span><br><span class="line">        components:&#123;MyItem&#125;,</span><br><span class="line">        props:[&#x27;todos&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/*main*/</span><br><span class="line">.todo-main &#123;</span><br><span class="line">  margin-left: 0px;</span><br><span class="line">  border: 1px solid #ddd;</span><br><span class="line">  border-radius: 2px;</span><br><span class="line">  padding: 0px;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.todo-empty &#123;</span><br><span class="line">  height: 40px;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">  border: 1px solid #ddd;</span><br><span class="line">  border-radius: 2px;</span><br><span class="line">  padding-left: 5px;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes todoAni &#123;</span><br><span class="line">    from &#123;</span><br><span class="line">        transform: translateX(100%);</span><br><span class="line">    &#125;</span><br><span class="line">    to &#123;</span><br><span class="line">        transform: translateX(0%);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.todo-enter-active &#123;</span><br><span class="line">  animation: todoAni 0.5s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.todo-leave-active &#123;</span><br><span class="line">  animation: todoAni reverse 0.5s;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue2-23-03-30&quot;&gt;&lt;a href=&quot;#Vue2-23-03-30&quot; class=&quot;headerlink&quot; title=&quot;Vue2 - 23-03-30&quot;&gt;&lt;/a&gt;Vue2 - 23-03-30&lt;/h1&gt;&lt;h2 id=&quot;回顾了一下-set&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/categories/Learning/Vue2/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/tags/Vue2/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 - 23-03-28</title>
    <link href="https://blog.zepo.re/2023/03/28/2023-03-28.html/"/>
    <id>https://blog.zepo.re/2023/03/28/2023-03-28.html/</id>
    <published>2023-03-28T07:55:23.000Z</published>
    <updated>2023-03-28T14:03:19.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-23-03-28"><a href="#Vue2-23-03-28" class="headerlink" title="Vue2 - 23-03-28"></a>Vue2 - 23-03-28</h1><h2 id="回顾昨日"><a href="#回顾昨日" class="headerlink" title="回顾昨日"></a>回顾昨日</h2><p>回调函数在谁身上，谁就可以收到数据；子给父传数据的两种方式：props传函数、在父中给子绑定自定义事件，回调函数为父组件。而绑定自定义事件有两种方式：ref+$refs.xx.$on(事件名称,箭头函数&#x2F;this.methods里的函数)</p><h2 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h2><p>事件总线能实现兄弟组件之间的通信<br>关于能实现事件总线特性的分析，<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=84">视频</a>里面讲的很绕，反正到最后结论就是往构建的Vue实例对象上，向Vue原型追加一个属性，值为Vue实例本身（视频里面演示了实际上追加一个组件实例也能实现同样的效果，但是步骤繁琐不推荐）<br>有点向在Java里的被追加的（虽然Java实现不了），但是多少能够帮助像我这样的后端理解吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Vue&#123;</span><br><span class="line">    private Object object;</span><br><span class="line">    //Vue vm;//这就是追加后的样子，Java实现不了</span><br><span class="line">    Vue(Object object)&#123;this.object = object;&#125;</span><br><span class="line">    public static void extends(Object object)&#123;</span><br><span class="line">        reutrn new VueComponent(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class VueComponent&#123;</span><br><span class="line">    private Object object;</span><br><span class="line">    VueComponent(Object object)&#123;this.object = object;&#125;</span><br><span class="line">&#125;</span><br><span class="line">Vue vm = new Vue(...);</span><br><span class="line">vm.prototype.$bus=vm;//追加的过程，Java实现不了</span><br></pre></td></tr></table></figure><h3 id="事件总线实现方式"><a href="#事件总线实现方式" class="headerlink" title="事件总线实现方式"></a>事件总线实现方式</h3><p>在main.js（创建vm的入口）中创建vue实例的时候，调用生命周期钩子beforeCreate，通过<code>Vue.prototype</code>的方式往Vue原型追加实例vm自身</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    Vue.prototype.$bus = this</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="事件总线的使用"><a href="#事件总线的使用" class="headerlink" title="事件总线的使用"></a>事件总线的使用</h3><p>事件总线可以通过<code>组件实例.$bus.$on(&#39;事件名&#39;,回调方法)</code>进行定义，在通过<code>组件实例.$emit(&#39;事件名&#39;,数据)</code>进行触发，建议在定义事件的地方消亡之前调用<code>组件实例.$off(&#39;事件名&#39;)</code>进行销毁</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303281705284.png"></p><h2 id="pubsub-js"><a href="#pubsub-js" class="headerlink" title="pubsub.js"></a>pubsub.js</h2><p>订阅发布库：pub——publish，sub——subscribe<br>使用方式：分别在发布端跟接收端引入，然后在发布端作为触发方法体中可供使用的函数：<code>pubsub.publish(&#39;订阅名称&#39;,数据)</code>；<br>在订阅端（一般在mounted）使用<code>pubsub.subscribe(&#39;订阅名称&#39;,回调函数)</code>，其中回调函数第一个参数为订阅名称，第二个参数为数据</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue2-23-03-28&quot;&gt;&lt;a href=&quot;#Vue2-23-03-28&quot; class=&quot;headerlink&quot; title=&quot;Vue2 - 23-03-28&quot;&gt;&lt;/a&gt;Vue2 - 23-03-28&lt;/h1&gt;&lt;h2 id=&quot;回顾昨日&quot;&gt;&lt;a href=&quot;#回</summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/categories/Learning/Vue2/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/tags/Vue2/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 - 23-03-27</title>
    <link href="https://blog.zepo.re/2023/03/27/2023-03-27.html/"/>
    <id>https://blog.zepo.re/2023/03/27/2023-03-27.html/</id>
    <published>2023-03-27T01:05:23.000Z</published>
    <updated>2023-03-28T07:55:36.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-23-03-27"><a href="#Vue2-23-03-27" class="headerlink" title="Vue2 - 23-03-27"></a>Vue2 - 23-03-27</h1><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><p>在父组件中定义自定义事件以及方法（父组件），然后子组件在需要的地方进行触发该事件，可以在第二个以后参数传入子组件的相关东西  </p><p>触发事件之后调用的方法是父组件的方法，父组件给子组件绑定上的自定义事件，然后由子组件触发该事件，进而调用了父组件的方法</p><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h1 class=&quot;apph&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;!-- 通过标签v-on的形式 --&gt;</span><br><span class="line">  &lt;Student v-on:getStudentNameEvent=&quot;getStudentName&quot;/&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;!-- 使用ref+生命周期钩子进行绑定 --&gt;</span><br><span class="line">  &lt;Student ref=&quot;student&quot;/&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;!-- 通过v-bind单向绑定进行传入，子组件props进行接收 --&gt;</span><br><span class="line">  &lt;School :getSchoolName=&#x27;getSchoolName&#x27;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Student from &quot;./components/Student.vue&quot;</span><br><span class="line">import School from &quot;./components/School.vue&quot;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        Student,</span><br><span class="line">        School</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg:&#x27;你好啊！&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      getSchoolName(name) &#123;</span><br><span class="line">        console.log(&#x27;App得到了学校名称：&#x27;+name);</span><br><span class="line">      &#125;,</span><br><span class="line">      getStudentName(name)&#123;</span><br><span class="line">        console.log(&#x27;App得到了学生姓名：&#x27;+name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted()&#123;</span><br><span class="line">      this.$refs.student.$on(&#x27;getStudentNameEvent&#x27;, this.getStudentName)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .apph&#123;</span><br><span class="line">    background-color: pink;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>Student.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">    &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&#x27;sendStudentName&#x27;&gt;点我发送学生名给父组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;Student&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name:&#x27;linzepore&#x27;,</span><br><span class="line">            age:21</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        sendStudentName()&#123;</span><br><span class="line">            //触发tudent实例的zepoevent事件</span><br><span class="line">            this.$emit(&#x27;getStudentNameEvent&#x27;,this.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .demo &#123;</span><br><span class="line">        background-color: gray;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="自定义组件的两种绑定方式："><a href="#自定义组件的两种绑定方式：" class="headerlink" title="自定义组件的两种绑定方式："></a>自定义组件的两种绑定方式：</h3><ul><li><code>v-on/@</code> + <code>自定义事件名称</code></li><li>标签上加<code>ref</code>属性，在mounted钩子上调用获取的子组件，然后进行绑定，<code>this.$refs</code> + <code>.ref属性值</code> + <code>.$on</code> &#x2F; <code>$once</code></li></ul><h4 id="ref属性忘了？"><a href="#ref属性忘了？" class="headerlink" title="ref属性忘了？"></a>ref属性忘了？</h4><p>参考这篇文章：<a href="https://blog.csdn.net/m0_53022813/article/details/127292442">HERE</a>  </p><ul><li>ref 属性被用来给元素或子组件注册引用信息（id的替代者），相当于对页面元素或子组件标识，使用 ref 属性标识页面元素或子组件之后，被标识的元素或子组件会被所在的组件实例对象收集，挂载在所在组件实例对象的$ref属性上</li><li>ref 属性应用在 html 标签元素上，获取的是对应的<strong>真实DOM元素</strong>；ref 属性应用在组件标签上，获取的是对应<strong>组件实例对象</strong></li></ul><h4 id="还可以加上修饰符"><a href="#还可以加上修饰符" class="headerlink" title="还可以加上修饰符"></a>还可以加上修饰符</h4><p><code>this.$refs.student.$once(&#39;eventName&#39;,params)</code> &#x2F;<br><code>@eventName.once=&#39;methodsName&#39;</code></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>在父组件给子组件标签实例绑定的事件都会被视为自定义事件，如果定义为原生的，可以这样写<code>@click.native</code></p><h3 id="自定义事件在子组件的触发以及在父组件的接收"><a href="#自定义事件在子组件的触发以及在父组件的接收" class="headerlink" title="自定义事件在子组件的触发以及在父组件的接收"></a>自定义事件在子组件的触发以及在父组件的接收</h3><p>假如父组件给子组件绑定<br><code>v-on:eventA=&quot;getParams&quot;</code>，  </p><p>子组件可以通过这种方式触发事件<br><code>this.$emit(&#39;eventA&#39;,param1,param2,param3,...)</code>，  </p><p>那么父组件可以通过定义这种方式进行接收：<br><code>getParams(a, ...params) &#123;&#125;</code></p><h2 id="解绑自定义事件"><a href="#解绑自定义事件" class="headerlink" title="解绑自定义事件"></a>解绑自定义事件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.$off(&#x27;eventName&#x27;)//解绑一个</span><br><span class="line">this.$off([&#x27;eventName1&#x27;,&#x27;eventName2&#x27;])//解绑多个</span><br><span class="line">this.off()//解绑所有</span><br></pre></td></tr></table></figure><h2 id="通过ref传递的时候，回调函数注意事项"><a href="#通过ref传递的时候，回调函数注意事项" class="headerlink" title="通过ref传递的时候，回调函数注意事项"></a>通过ref传递的时候，回调函数注意事项</h2><p>通过ref绑定自定义事件的时候，回调函数要写成箭头函数，要么就得写在methods里，不应该写成普通函数（this的指向变成vc实例）<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303271144123.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue2-23-03-27&quot;&gt;&lt;a href=&quot;#Vue2-23-03-27&quot; class=&quot;headerlink&quot; title=&quot;Vue2 - 23-03-27&quot;&gt;&lt;/a&gt;Vue2 - 23-03-27&lt;/h1&gt;&lt;h2 id=&quot;组件的自定义事件&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/categories/Learning/Vue2/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/tags/Vue2/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 - 23-03-26</title>
    <link href="https://blog.zepo.re/2023/03/26/2023-03-26.html/"/>
    <id>https://blog.zepo.re/2023/03/26/2023-03-26.html/</id>
    <published>2023-03-26T02:08:23.000Z</published>
    <updated>2023-03-26T14:32:26.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-23-03-26"><a href="#Vue2-23-03-26" class="headerlink" title="Vue2 - 23-03-26"></a>Vue2 - 23-03-26</h1><h2 id="一个错误"><a href="#一个错误" class="headerlink" title="一个错误"></a>一个错误</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ERROR in ./src/components/MyList.vue?vue&amp;type=script&amp;lang=js&amp; (./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/MyList.vue?vue&amp;type=script&amp;lang=js&amp;)</span><br><span class="line">Module build failed (from ./node_modules/babel-loader/lib/index.js):</span><br><span class="line">SyntaxError: D:\CODE_VsCode\VUE\vue_study\脚手架之后的内容\vue_test\src\components\MyList.vue: Legacy octal literals are not allowed in strict mode. (7:16)</span><br><span class="line"></span><br><span class="line">   5 |         data()&#123;</span><br><span class="line">   6 |           todos[</span><br><span class="line">&gt;  7 |             &#123;id:001, title:抽烟, done: true&#125;,</span><br><span class="line">     |                 ^</span><br><span class="line">   8 |             &#123;id:002, title:喝酒, done: false&#125;,</span><br><span class="line">   9 |             &#123;id:003, title:开车, done: false&#125;</span><br><span class="line">  10 |           ]</span><br></pre></td></tr></table></figure><blockquote><p>记得serve之前保存文件！！！</p></blockquote><h2 id="另一个错误"><a href="#另一个错误" class="headerlink" title="另一个错误"></a>另一个错误</h2><p>卡在这里不动了。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> npm run serve</span><br><span class="line"></span><br><span class="line">&gt; vue_test@0.1.0 serve</span><br><span class="line">&gt; vue-cli-service serve</span><br><span class="line"></span><br><span class="line"> INFO  Starting development server...</span><br><span class="line">[24%] building (12/33 modules)</span><br></pre></td></tr></table></figure><blockquote><p>检查template里面是不是有错误，编译失败</p></blockquote><h2 id="子组件向父组件传数据"><a href="#子组件向父组件传数据" class="headerlink" title="子组件向父组件传数据"></a>子组件向父组件传数据</h2><p>实现方式：父组件先向子组件<strong>传函数</strong>，子组件在合适的时候将数据通过调用父组件的函数，将数据传给父组件</p><h2 id="css中父元素被hover的时候触发子元素的属性"><a href="#css中父元素被hover的时候触发子元素的属性" class="headerlink" title="css中父元素被hover的时候触发子元素的属性"></a>css中父元素被hover的时候触发子元素的属性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li:hover button &#123;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取点击事件的元素"><a href="#获取点击事件的元素" class="headerlink" title="获取点击事件的元素"></a>获取点击事件的元素</h2><p>e.target.value&#x2F;e.target.checked</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v-on:click(funName)</span><br><span class="line">funName(e) &#123;</span><br><span class="line">    log(e.target.value)/log(e.target.checked)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自行练习了一遍"><a href="#自行练习了一遍" class="headerlink" title="自行练习了一遍"></a>自行练习了一遍</h2><h3 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;todo-container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;todo-wrap&quot;&gt;</span><br><span class="line">        &lt;MyHeader</span><br><span class="line">            :addTodo=&quot;addTodo&quot;/&gt;</span><br><span class="line">        &lt;MyList</span><br><span class="line">            :todos=&quot;todoList&quot;</span><br><span class="line">            :changeDone=&quot;changeDone&quot;</span><br><span class="line">            :deleteTodo=&quot;deleteTodo&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;MyFooter</span><br><span class="line">            :todos=&quot;todoList&quot;</span><br><span class="line">            :checkAll=&#x27;checkAll&#x27;</span><br><span class="line">            :clearDone=&quot;clearDone&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import MyHeader from &quot;./components/MyHeader.vue&quot;</span><br><span class="line">    import MyList from &quot;./components/MyList.vue&quot;</span><br><span class="line">    import MyFooter from &quot;./components/MyFooter.vue&quot;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components:&#123;MyHeader, MyList, MyFooter&#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                todoList:[</span><br><span class="line">                    &#123;id:&#x27;001&#x27;, title:&#x27;抽烟&#x27;, done:false&#125;,</span><br><span class="line">                    &#123;id:&#x27;002&#x27;, title:&#x27;喝酒&#x27;, done:true&#125;,</span><br><span class="line">                    &#123;id:&#x27;003&#x27;, title:&#x27;吃饭&#x27;, done:false&#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            addTodo(todo) &#123;</span><br><span class="line">                // console.log(&#x27;收到了todo&#x27;,todo);</span><br><span class="line">                this.todoList.unshift(todo)</span><br><span class="line">            &#125;,</span><br><span class="line">            changeDone(id) &#123;</span><br><span class="line">                this.todoList.forEach(todo =&gt; &#123;</span><br><span class="line">                    if(todo.id === id) todo.done = !todo.done</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            deleteTodo(id) &#123;</span><br><span class="line">                this.todoList = this.todoList.filter((todo)=&gt;&#123;</span><br><span class="line">                    return todo.id!=id</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            checkAll(value) &#123;</span><br><span class="line">                </span><br><span class="line">                    this.todoList.forEach((todo)=&gt;&#123;</span><br><span class="line">                    todo.done = value</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            clearDone() &#123;</span><br><span class="line">                if(confirm(&quot;将要清除所有已完成项&quot;) )&#123;</span><br><span class="line">                    this.todoList=this.todoList.filter(todo=&gt; !todo.done)</span><br><span class="line">                  &#125;   </span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">/*base*/</span><br><span class="line">body &#123;</span><br><span class="line">  background: #fff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.btn &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  padding: 4px 12px;</span><br><span class="line">  margin-bottom: 0;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  line-height: 20px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);</span><br><span class="line">  border-radius: 4px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.btn-danger &#123;</span><br><span class="line">  color: #fff;</span><br><span class="line">  background-color: #da4f49;</span><br><span class="line">  border: 1px solid #bd362f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.btn-danger:hover &#123;</span><br><span class="line">  color: #fff;</span><br><span class="line">  background-color: #bd362f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.btn:focus &#123;</span><br><span class="line">  outline: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.todo-container &#123;</span><br><span class="line">  width: 600px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line">.todo-container .todo-wrap &#123;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  border: 1px solid #ddd;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="Header-vue"><a href="#Header-vue" class="headerlink" title="Header.vue"></a>Header.vue</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;todo-header&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;请输入你的任务名称，按回车键确认&quot; @keyup.enter=&quot;addATodo&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import &#123;nanoid&#125; from &#x27;nanoid&#x27;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;MyHeader&#x27;,</span><br><span class="line">        props:[&quot;addTodo&quot;],</span><br><span class="line">        methods:&#123;</span><br><span class="line">            addATodo(e)&#123;</span><br><span class="line">                const todo = &#123;id:nanoid(),title:e.target.value,done:false&#125;</span><br><span class="line">                this.addTodo(todo)</span><br><span class="line">                e.target.value=&#x27;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/*header*/</span><br><span class="line">.todo-header input &#123;</span><br><span class="line">  width: 560px;</span><br><span class="line">  height: 28px;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-radius: 4px;</span><br><span class="line">  padding: 4px 7px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.todo-header input:focus &#123;</span><br><span class="line">  outline: none;</span><br><span class="line">  border-color: rgba(82, 168, 236, 0.8);</span><br><span class="line">  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="MyList-vue"><a href="#MyList-vue" class="headerlink" title="MyList.vue"></a>MyList.vue</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul class=&quot;todo-main&quot;&gt;</span><br><span class="line">        &lt;!-- 每一份都是独一无二的vc --&gt;</span><br><span class="line">        &lt;MyItem </span><br><span class="line">        v-for=&quot;todo in todos&quot; </span><br><span class="line">        :key=&quot;todo.id&quot;</span><br><span class="line">        :todoItem=&quot;todo&quot;</span><br><span class="line">        :changeDone=&#x27;changeDone&#x27;</span><br><span class="line">        :deleteTodo=&#x27;deleteTodo&#x27;</span><br><span class="line">        /&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import MyItem from &#x27;./MyItem.vue&#x27;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;MyList&#x27;,</span><br><span class="line">        components:&#123;MyItem&#125;,</span><br><span class="line">        props:[&#x27;todos&#x27;,&#x27;changeDone&#x27;,&#x27;deleteTodo&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/*main*/</span><br><span class="line">.todo-main &#123;</span><br><span class="line">  margin-left: 0px;</span><br><span class="line">  border: 1px solid #ddd;</span><br><span class="line">  border-radius: 2px;</span><br><span class="line">  padding: 0px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.todo-empty &#123;</span><br><span class="line">  height: 40px;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">  border: 1px solid #ddd;</span><br><span class="line">  border-radius: 2px;</span><br><span class="line">  padding-left: 5px;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="MyItem-vue"><a href="#MyItem-vue" class="headerlink" title="MyItem.vue"></a>MyItem.vue</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; :checked=&quot;todoItem.done&quot; @change=&quot;handleDone&quot;/&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;todoItem.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-danger&quot; @click=&quot;handleDelete&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;MyItem&#x27;,</span><br><span class="line">        props:[&#x27;todoItem&#x27;,&#x27;changeDone&#x27;,&#x27;deleteTodo&#x27;],</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleDone()&#123;</span><br><span class="line">                // console.log(&#x27;点了&#x27;);</span><br><span class="line">                this.changeDone(this.todoItem.id)</span><br><span class="line">            &#125;,</span><br><span class="line">            handleDelete()&#123;</span><br><span class="line">                if(confirm(&quot;确认要删除这一项吗？？&quot;)) this.deleteTodo(this.todoItem.id)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/*item*/</span><br><span class="line">li &#123;</span><br><span class="line">  list-style: none;</span><br><span class="line">  height: 36px;</span><br><span class="line">  line-height: 36px;</span><br><span class="line">  padding: 0 5px;</span><br><span class="line">  border-bottom: 1px solid #ddd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li:hover &#123;</span><br><span class="line">    background-color: #ebebeb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li:hover button &#123;</span><br><span class="line">    display: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li label &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li label li input &#123;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">  margin-right: 6px;</span><br><span class="line">  position: relative;</span><br><span class="line">  top: -1px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li button &#123;</span><br><span class="line">  float: right;</span><br><span class="line">  display: none;</span><br><span class="line">  margin-top: 3px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li:before &#123;</span><br><span class="line">  content: initial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li:last-child &#123;</span><br><span class="line">  border-bottom: none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="MyFooter-vue"><a href="#MyFooter-vue" class="headerlink" title="MyFooter.vue"></a>MyFooter.vue</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;todo-footer&quot; v-show=&quot;todoTotal&gt;0&quot;&gt;</span><br><span class="line">  &lt;label&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; v-model=&quot;isAll&quot;/&gt;</span><br><span class="line">  &lt;/label&gt;</span><br><span class="line">  &lt;span&gt;</span><br><span class="line">    &lt;span&gt;已完成&#123;&#123;todoDone&#125;&#125;&lt;/span&gt; / 全部&#123;&#123;todoTotal&#125;&#125;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">  &lt;button class=&quot;btn btn-danger&quot; @click=&quot;clearDone&quot;&gt;清除已完成任务&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;MyFooter&#x27;,</span><br><span class="line">        props:[&#x27;todos&#x27;,&#x27;checkAll&#x27;,&#x27;clearDone&#x27;],</span><br><span class="line">        computed:&#123;</span><br><span class="line">            todoTotal()&#123;</span><br><span class="line">                return this.todos.length;</span><br><span class="line">            &#125;,</span><br><span class="line">            todoDone()&#123;</span><br><span class="line">                return this.todos.reduce((pre,todo)=&gt;&#123;</span><br><span class="line">                    return pre += todo.done? 1: 0</span><br><span class="line">                &#125;,0)</span><br><span class="line">            &#125;,</span><br><span class="line">            isAll:&#123;</span><br><span class="line">                get()&#123;</span><br><span class="line">                    return this.todoDone === this.todoTotal</span><br><span class="line">                &#125;,</span><br><span class="line">                set(checked)&#123;</span><br><span class="line">                    this.checkAll(checked)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/*footer*/</span><br><span class="line">.todo-footer &#123;</span><br><span class="line">  height: 40px;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">  padding-left: 6px;</span><br><span class="line">  margin-top: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.todo-footer label &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin-right: 20px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.todo-footer label input &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  top: -1px;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">  margin-right: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.todo-footer button &#123;</span><br><span class="line">  float: right;</span><br><span class="line">  margin-top: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="WebStorage"><a href="#WebStorage" class="headerlink" title="WebStorage"></a>WebStorage</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303262159573.png"></p><p>增<code>(window.)localStorage/sessionStorage</code> . <code>setItem([key],[value])</code><br>查<code>(window.)localStorage/sessionStorage</code> . <code>getItem([key])</code><br>单删<code>(window.)localStorage/sessionStorage</code> . <code>removeItem([key])</code><br>全删<code>(window.)localStorage/sessionStorage</code> . <code>clear</code>  </p><p>转字符串<code>JSON.stringify</code> &#x2F; 恢复对象<code>JSON.parse</code></p><h2 id="TodoList新增本地存储功能"><a href="#TodoList新增本地存储功能" class="headerlink" title="TodoList新增本地存储功能"></a>TodoList新增本地存储功能</h2><h3 id="防止初始的时候key不存在"><a href="#防止初始的时候key不存在" class="headerlink" title="防止初始的时候key不存在"></a>防止初始的时候key不存在</h3><p><code>todoList: JSON.parse(localStorage.getItem(&quot;todos&quot;)) || []</code></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">  todoList:&#123;</span><br><span class="line">    deep:true,</span><br><span class="line">    handler(value) &#123;</span><br><span class="line">      localStorage.setItem(&#x27;todos&#x27;,JSON.stringify(value))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303262221198.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue2-23-03-26&quot;&gt;&lt;a href=&quot;#Vue2-23-03-26&quot; class=&quot;headerlink&quot; title=&quot;Vue2 - 23-03-26&quot;&gt;&lt;/a&gt;Vue2 - 23-03-26&lt;/h1&gt;&lt;h2 id=&quot;一个错误&quot;&gt;&lt;a href=&quot;#一</summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/categories/Learning/Vue2/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/tags/Vue2/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 - 23-03-25</title>
    <link href="https://blog.zepo.re/2023/03/25/2023-03-25.html/"/>
    <id>https://blog.zepo.re/2023/03/25/2023-03-25.html/</id>
    <published>2023-03-25T02:14:23.000Z</published>
    <updated>2023-03-26T02:09:19.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-23-03-25"><a href="#Vue2-23-03-25" class="headerlink" title="Vue2 - 23-03-25"></a>Vue2 - 23-03-25</h1><h2 id="书接上回"><a href="#书接上回" class="headerlink" title="书接上回"></a>书接上回</h2><blockquote><p>但是有个东西还没搞懂：VueComponent与VueComponent实例、函数与原型对象之间的关系，明天更新</p></blockquote><h3 id="VueComponent与VueComponent实例"><a href="#VueComponent与VueComponent实例" class="headerlink" title="VueComponent与VueComponent实例"></a>VueComponent与VueComponent实例</h3><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303251018773.png"><br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303251021571.png">  </p><h3 id="函数与原型对象之间的关系"><a href="#函数与原型对象之间的关系" class="headerlink" title="函数与原型对象之间的关系"></a>函数与原型对象之间的关系</h3><p>参考博文-&gt;<a href="https://blog.csdn.net/weixin_44468506/article/details/100814404">HERE</a>，隐式原型在ES6之前是不能够通过实例调用的，也就是说只能通过原型进行添加，ES6赋予了操作原型属性的权力，这点跟Java区别就很大了</p><h2 id="export"><a href="#export" class="headerlink" title="export"></a>export</h2><p>没仔细学习ES6，所以这时候涉及到模块化，还是得看看-&gt;<a href="https://www.jianshu.com/p/2822e717592f/">理解JS ES6中的模块化（export和import）</a></p><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><ul><li><p>管理员方式打开cmd，首先要先换一下镜像源<br><code>npm config set registry https://registry.npmmirror.com/</code>  </p></li><li><p>全局安装vue-cli<br><code>npm install -g @vue/cli</code>  </p></li><li><p>切换到工作目录，进行初始化<br><code>vue create vue_test</code>  </p></li><li><p>切换进去vue_test，然后启动<br><code>npm run serve</code></p></li><li><p>根据目录结构，分成App连接各个组件，main.js引入App，因为是脚手架模块化的方式进行构建，所以Vue并非完整的包，没有办法在Vue实例配置模板，只能通过渲染或者更换引入的vue</p></li></ul><h3 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.文件目录</span><br><span class="line">├── node_modules</span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico: 页签图标</span><br><span class="line">│   └── index.html: 主页面</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets: 存放静态资源</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   │── component: 存放组件</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   │── App.vue: 汇总所有组件</span><br><span class="line">│   └── main.js: 入口文件</span><br><span class="line">├── .gitignore: git版本管制忽略的配置</span><br><span class="line">├── babel.config.js: babel的配置文件</span><br><span class="line">├── package.json: 应用包配置文件</span><br><span class="line">├── README.md: 应用描述文件</span><br><span class="line">└── package-lock.json: 包版本控制文件</span><br></pre></td></tr></table></figure><h2 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h2><blockquote><p>使用了render函数之后，不单单是解决了template插件的问题，<strong>js中Vue实例的components也无须再配置了</strong>，这一点视频中没有提到<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303251407096.png"></p></blockquote><ul><li><p>查看npm模块中的Vue包的配置，当<strong>用ES6模块化语法</strong>进行引用的时候，具体到第六行的js文件<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303251436481.png"></p></li><li><p>两种解决方式：<br>一——在main.js中引入完整版的vue：&#96;import Vue from ‘vue&#x2F;dist&#x2F;vue’<br>二——使用默认runtime版本，使用render解析模板</p></li><li><p>render函数怎么写</p><ul><li>render函数会接受一个参数，该参数是函数类型，复杂点写就像这样子<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render(createElement) &#123;</span><br><span class="line">return createElement(&#x27;h1&#x27;,&#x27;你好啊&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>因为没有用到this，可以写成箭头函数，这是逐渐进化的过程<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">render:(createElement)=&gt;&#123;</span><br><span class="line">  return createElement(&#x27;h1&#x27;,&#x27;你好啊&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">-----</span><br><span class="line">//只有一个句的时候</span><br><span class="line">render:(createElement)=&gt;createElement(&#x27;h1&#x27;,&#x27;你好啊&#x27;)</span><br><span class="line">-----</span><br><span class="line">//把名字简化</span><br><span class="line">render:h=&gt;h(&#x27;h1&#x27;,&#x27;你好啊&#x27;)</span><br><span class="line">-----</span><br><span class="line">//已经引入的App组件拿来用</span><br><span class="line">render:h=&gt;h(App)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>.vue文件里面标签化的template，vue有专门的编译器库<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303251506747.png"></p></li></ul><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><p>放个链接，后面有需要的时候，在重新看一遍吧-&gt;<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=64">【064_尚硅谷Vue技术_修改默认配置】</a><br>官方文档<a href="https://cli.vuejs.org/zh/config/#pages">vue.config.js</a><br>vue.config.js 是一个可选的配置文件，如果项目的 (和 package.json 同级的) 根目录中存在这个文件，那么它会被 @vue&#x2F;cli-service 自动加载<br>该export使用的是common，因为webpack基于node.js</p><p>关掉语法检查<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303251524485.png"></p><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303251649595.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h1 v-text=&quot;msg&quot; ref=&quot;title&quot;&gt;&lt;/h1&gt;</span><br><span class="line">  &lt;button @click=&quot;showDom&quot; ref=&quot;btn&quot;&gt;点我输出上方的dom元素&lt;/button&gt;</span><br><span class="line">  &lt;School ref=&quot;sch&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">showDom() &#123;</span><br><span class="line">  console.log(this.$refs.title);</span><br><span class="line">  console.log(this.$refs.btn);</span><br><span class="line">  console.log(this.$refs.sch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册错误？？"><a href="#注册错误？？" class="headerlink" title="注册错误？？"></a>注册错误？？</h2><p>看看component是不是写错了┭┮﹏┭┮，谢谢bing<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303251639956.png"></p><h2 id="创建组件时候，通过父容器传输参数"><a href="#创建组件时候，通过父容器传输参数" class="headerlink" title="创建组件时候，通过父容器传输参数"></a>创建组件时候，通过父容器传输参数</h2><p>props优先级比data更高，所以data里面可以出现<code>myAge = this.age</code></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303251729030.png"></p><p>父容器（App.vue）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;!-- 如果要使用数字类型，使用v-bind传入js --&gt;</span><br><span class="line">  &lt;Student name=&quot;李四&quot; :age=&quot;21&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Student from &quot;./components/Student.vue&quot;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        Student</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件有三种形式，从简到繁，但是可用性完整性变强</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//简单声明接收</span><br><span class="line">props:[&#x27;name&#x27;,&#x27;age&#x27;] </span><br><span class="line"></span><br><span class="line">//接受并检查类型</span><br><span class="line">props:&#123;</span><br><span class="line">        name:String,</span><br><span class="line">        age:Number</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">// 接收的同时对类型进行限制+默认值的指定+必要性的限制</span><br><span class="line">props:&#123;</span><br><span class="line">        // 接受的同时对类型进行限制+默认值的指定+必要性的限制</span><br><span class="line">        // 正常情况下required跟default不同时存在</span><br><span class="line">        name:&#123;</span><br><span class="line">            type:String,</span><br><span class="line">            required:true</span><br><span class="line">        &#125;,</span><br><span class="line">        age:&#123;</span><br><span class="line">            type:Number,</span><br><span class="line">            default:99</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin 混入"></a>mixin 混入</h2><p>什么是混入？<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303251738501.png"><br>简单来说就是姜公有的东西提取出来，可以复用，同时data、methods等冲突的时候以自身的为主（生命周期钩子除外）<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303251754634.png"></p><p>mixin文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">export const hunhe = &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        showName() &#123;</span><br><span class="line">            alert(this.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export const hunhe2 = &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            x: 100</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部混入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//在Student.vue中</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;hunhe&#125; from &#x27;../mixin.js&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;Student&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg:&#x27;Hello&#x27;,</span><br><span class="line">            name:&#x27;linzepore&#x27;,</span><br><span class="line">            age:21</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mixins:[hunhe]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">//在School.vue中</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;hunhe,hunhe2&#125; from &#x27;../mixin.js&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;School&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg:&#x27;Hello&#x27;,</span><br><span class="line">            name:&#x27;gdip&#x27;,</span><br><span class="line">            address:&#x27;foshan&#x27;,</span><br><span class="line">            x:777</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mixins:[hunhe,hunhe2]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>全局混入：在main.js中写上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123;hunhe,hunhe2&#125; from &#x27;./mixin.js&#x27;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line">Vue.mixins = [hunhe,hunhe2]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303251805731.png"></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="定义插件"><a href="#定义插件" class="headerlink" title="定义插件"></a>定义插件</h3><p>插件是一个<strong>对象</strong>，需要包含install函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export const plugin = &#123;</span><br><span class="line">    install() &#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">    //其他函数...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插件的使用：先引入后使用"><a href="#插件的使用：先引入后使用" class="headerlink" title="插件的使用：先引入后使用"></a>插件的使用：先引入后使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import plugin from &#x27;./plugin.js&#x27;</span><br><span class="line">Vue.use(plugin)</span><br></pre></td></tr></table></figure><h3 id="插件install函数的参数"><a href="#插件install函数的参数" class="headerlink" title="插件install函数的参数"></a>插件install函数的参数</h3><ul><li>插件里面第一个参数是Vue构造器，也就是vm原型，拿到vm原型我们就可以做很多事情了</li><li>install方法后面还可以在main.js文件的Vue.use方法中第二个开始向install方法进行传参</li></ul><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303252030663.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">export const plugin = &#123;</span><br><span class="line">    install(Vue) &#123;</span><br><span class="line">        console.log(&quot;安装插件喽&quot;,Vue);</span><br><span class="line">        //添加全局过滤器</span><br><span class="line">        Vue.filter(&#x27;mySlice&#x27;, function(value)&#123;</span><br><span class="line">            return value.slice(0,4);</span><br><span class="line">        &#125;)</span><br><span class="line">        //添加全局指令</span><br><span class="line">        Vue.directive(&#x27;bigg&#x27;,function(element, binding)&#123;</span><br><span class="line">            element.innerText = binding.value*10</span><br><span class="line">        &#125;)</span><br><span class="line">        //配置全局混入</span><br><span class="line">        Vue.mixin(&#123;</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    x: 100</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        //添加实例方法</span><br><span class="line">        Vue.prototype.hello = ()=&gt;alert(&#x27;你好啊&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="脚手架中编写样式的技巧"><a href="#脚手架中编写样式的技巧" class="headerlink" title="脚手架中编写样式的技巧"></a>脚手架中编写样式的技巧</h2><p><code>&lt;style scoped&gt;</code><br>在不同组件里写的样式最终都被汇总到一起了，这就会导致样式冲突（会按引入顺序覆盖而非标签顺序），<strong>解决办法就是给style加上scoped</strong><br>原理是根据模板div自动生成的data-v-XXX，结合属性选择器<br>app不能加scoped，会导致子组件用scoped无效<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303252050467.png"></p><p>如果使用less，<code>lang=&quot;less&quot;</code>需要安装less-loader，安装的时候需要留意版本；不写lang默认是css</p><h2 id="ToDoList案例"><a href="#ToDoList案例" class="headerlink" title="ToDoList案例"></a>ToDoList案例</h2><h3 id="组件化编码"><a href="#组件化编码" class="headerlink" title="组件化编码"></a>组件化编码</h3><p>笔记来源：<a href="https://www.yuque.com/cessstudy/kak11d/fk481k#comment-22408815">Here</a></p><h3 id="1-组件化编码流程"><a href="#1-组件化编码流程" class="headerlink" title="1.组件化编码流程:"></a>1.组件化编码流程:</h3><ul><li>(1).拆分静态组件:组件要按照功能点拆分，命名不要与html元素冲突。</li><li>(2).实现动态组件:考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用:<ul><li>1).一个组件在用:放在组件自身即可。</li><li>2).一些组件在用:放在他们共同的父组件上(状态提升)。</li></ul></li><li>(3).实现交互:从绑定事件开始。</li></ul><h3 id="2-props适用于"><a href="#2-props适用于" class="headerlink" title="2.props适用于:"></a>2.props适用于:</h3><ul><li>(1).父组件&#x3D;&#x3D;&gt;子组件通信</li><li>(2).子组件&#x3D;&#x3D;&gt;父组件通信(要求父先给子一个函数)</li></ul><h3 id="3-使用v-model时要切记"><a href="#3-使用v-model时要切记" class="headerlink" title="3.使用v-model时要切记:"></a>3.使用v-model时要切记:</h3><p>v-model绑定的值不能是props传过来的值，因为props是不可以修改的!</p><h3 id="4-props传过来的若是对象类型的值"><a href="#4-props传过来的若是对象类型的值" class="headerlink" title="4.props传过来的若是对象类型的值"></a>4.props传过来的若是对象类型的值</h3><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue2-23-03-25&quot;&gt;&lt;a href=&quot;#Vue2-23-03-25&quot; class=&quot;headerlink&quot; title=&quot;Vue2 - 23-03-25&quot;&gt;&lt;/a&gt;Vue2 - 23-03-25&lt;/h1&gt;&lt;h2 id=&quot;书接上回&quot;&gt;&lt;a href=&quot;#书</summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/categories/Learning/Vue2/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/tags/Vue2/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 - 23-03-23</title>
    <link href="https://blog.zepo.re/2023/03/23/2023-03-23.html/"/>
    <id>https://blog.zepo.re/2023/03/23/2023-03-23.html/</id>
    <published>2023-03-23T00:42:23.000Z</published>
    <updated>2023-03-24T01:05:20.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-23-03-23"><a href="#Vue2-23-03-23" class="headerlink" title="Vue2 - 23-03-23"></a>Vue2 - 23-03-23</h1><h2 id="VueComponent"><a href="#VueComponent" class="headerlink" title="VueComponent"></a>VueComponent</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303230954417.png"></p><ul><li>每次调用Vue.extend都会返回一个全新的VueComponent</li><li>VueComponent的this指的是VueComponent本身</li><li>VueComponent拥有VM的大部分东西，注册了VC的VM身上有着children<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 如果标签没有应用的话，开发者工具、vm都不会有他--&gt;</span><br><span class="line">&lt;!-- &lt;test&gt;&lt;/test&gt; --&gt;</span><br><span class="line"></span><br><span class="line">const test = Vue.extend(&#123;</span><br><span class="line">    template:`</span><br><span class="line">    &lt;div&gt;测试&lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">components:&#123;</span><br><span class="line">            test</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303232035073.png"></li></ul><p>解开注释<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303232036462.png"></p><h2 id="重要的内置关系"><a href="#重要的内置关系" class="headerlink" title="重要的内置关系"></a>重要的内置关系</h2><p>前置知识：<a href="https://www.bilibili.com/video/BV1Q64y1v7fW?p=2">原型相关的知识</a><br>说白了，原型就相当于Java中的类，类实例化出来的对象中有<code>__proto__</code>，指向原型的各种属性<code>prototype</code>，所以才会有<code>xx.__proto__ === XX.prototype</code><br><code>XX.prototype = value</code>相当于给类添加一个私有属性</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303232157843.png"></p><p>内置关系：<code>VueComponent.prototype.__proto__ == Vue.prototype</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//前置知识：原型对象</span><br><span class="line">function Demo()&#123;</span><br><span class="line">    this.a = 1;</span><br><span class="line">    this.b = 2;</span><br><span class="line">&#125;;</span><br><span class="line">const d = new Demo();</span><br><span class="line">console.log(Demo.prototype);//显示原型属性</span><br><span class="line">console.log(d.__proto__);//隐形原型属性</span><br><span class="line">console.log(Demo.prototype === d.__proto__);</span><br></pre></td></tr></table></figure><p>但是有个东西还没搞懂：VueComponent与VueComponent实例、函数与原型对象之间的关系，明天更新</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue2-23-03-23&quot;&gt;&lt;a href=&quot;#Vue2-23-03-23&quot; class=&quot;headerlink&quot; title=&quot;Vue2 - 23-03-23&quot;&gt;&lt;/a&gt;Vue2 - 23-03-23&lt;/h1&gt;&lt;h2 id=&quot;VueComponent&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/categories/Learning/Vue2/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/tags/Vue2/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 - 23-03-22</title>
    <link href="https://blog.zepo.re/2023/03/22/2023-03-22.html/"/>
    <id>https://blog.zepo.re/2023/03/22/2023-03-22.html/</id>
    <published>2023-03-22T00:36:23.000Z</published>
    <updated>2023-03-23T00:42:05.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-23-03-22"><a href="#Vue2-23-03-22" class="headerlink" title="Vue2 - 23-03-22"></a>Vue2 - 23-03-22</h1><h2 id="自定义v-fbind指令"><a href="#自定义v-fbind指令" class="headerlink" title="自定义v-fbind指令"></a>自定义v-fbind指令</h2><p>如果要写一个一上来就能够自动获取焦点的指令，就会涉及到插入页面，<br>但是默认函数式写法只包括元素与指令绑定时和模板重新解析时  </p><p>此时就需要时候对象式写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-fbind:value=&quot;n&quot;&gt;</span><br><span class="line">fbind:&#123;</span><br><span class="line">    bind(element, binding)&#123;</span><br><span class="line">        element.value = binding.value;</span><br><span class="line">    &#125;,</span><br><span class="line">    inserted(element, binding)&#123;</span><br><span class="line">        element.focus();</span><br><span class="line">    &#125;,</span><br><span class="line">    update(element, binding)&#123;</span><br><span class="line">        element.value = binding.value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回顾DOM操作顺序"><a href="#回顾DOM操作顺序" class="headerlink" title="回顾DOM操作顺序"></a>回顾DOM操作顺序</h3><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303220920577.png"></p><h2 id="自定义指令容易踩的坑"><a href="#自定义指令容易踩的坑" class="headerlink" title="自定义指令容易踩的坑"></a>自定义指令容易踩的坑</h2><h3 id="指令名称多个单词组成"><a href="#指令名称多个单词组成" class="headerlink" title="指令名称多个单词组成"></a>指令名称多个单词组成</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;放大十倍后的n值是&lt;span v-big-number=&quot;n&quot;&gt;&lt;/span&gt;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&#x27;big-number&#x27;(element, binding)&#123;</span><br><span class="line">    element.innerText = binding.value*10</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自定指令的this"><a href="#自定指令的this" class="headerlink" title="自定指令的this"></a>自定指令的this</h2><p>指令里面的this都是Windows，需要什么属性通过binding传<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303220931452.png"></p><h2 id="定义全局指令"><a href="#定义全局指令" class="headerlink" title="定义全局指令"></a>定义全局指令</h2><p>做法与全局过滤器类似</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;放大十倍后的n值是&lt;span v-bigg=&quot;n&quot;&gt;&lt;/span&gt;&lt;/h2&gt;</span><br><span class="line">//定义全局指令</span><br><span class="line">Vue.directive(&#x27;bigg&#x27;,function(element, binding)&#123;</span><br><span class="line">            element.innerText = binding.value*10</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="总结自定义指令"><a href="#总结自定义指令" class="headerlink" title="总结自定义指令"></a>总结自定义指令</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303220944990.png"></p><h2 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h2><ul><li>生命周期又名生命周期回调函数、生命周期函数、生命周期钩子</li><li>是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数</li><li>生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的</li><li>生命周期函数中的 this 指向是vm或组件实例对象<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303221559446.png"></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate()&#123;</span><br><span class="line">    // 生成数据代理前</span><br><span class="line">    console.log(&quot;beforeCreate&quot;);</span><br><span class="line">&#125;,</span><br><span class="line">created()&#123;</span><br><span class="line">    // 生成数据代理后</span><br><span class="line">    console.log(&quot;created&quot;);</span><br><span class="line">&#125;,</span><br><span class="line">beforeMount() &#123;</span><br><span class="line">    // 虚拟dom覆盖原来dom之前</span><br><span class="line">    console.log(&quot;beforeMount&quot;);</span><br><span class="line">&#125;,</span><br><span class="line">mounted()&#123;</span><br><span class="line">    // 虚拟dom覆盖原来dom之后</span><br><span class="line">    console.log(&quot;mounted&quot;);</span><br><span class="line">    console.log(this.$el);</span><br><span class="line">&#125;,</span><br><span class="line">beforeUpdate()&#123;</span><br><span class="line">    // 数据已经变了，页面更新前</span><br><span class="line">    console.log(&quot;beforeUpdate&quot;);</span><br><span class="line">&#125;,</span><br><span class="line">updated()&#123;</span><br><span class="line">    // 数据页面同步</span><br><span class="line">    console.log(&quot;updated&quot;);</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy()&#123;</span><br><span class="line">    // 收尾</span><br><span class="line">    console.log(&quot;beforedestroy&quot;);</span><br><span class="line">&#125;,</span><br><span class="line">destroyed()&#123;</span><br><span class="line">    //对页面残留结果进行操作</span><br><span class="line">    console.log(&quot;destroyed&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生命周期总结"><a href="#生命周期总结" class="headerlink" title="生命周期总结"></a>生命周期总结</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303221726875.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;总结生命周期&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;../resources/js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2 :style=&quot;&#123;opacity&#125;&quot;&gt;欢迎学习Vue&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;opacity = 1&quot;&gt;透明度变为1&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;stop&quot;&gt;停止变换&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        Vue.config.productionTip = false;</span><br><span class="line">        const vm = new Vue(&#123;</span><br><span class="line">            el: &#x27;#root&#x27;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                opacity:1</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                stop()&#123;</span><br><span class="line">                    this.$destroy();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            mounted()&#123;</span><br><span class="line">                //开发中常用的给当前实例追加属性</span><br><span class="line">                this.timer = setInterval(()=&gt;&#123;</span><br><span class="line">                    this.opacity-=0.01;</span><br><span class="line">                    // if(this.opacity==0) this.opacity=1 js没办法与零比较</span><br><span class="line">                    if(this.opacity&lt;=0) this.opacity=1</span><br><span class="line">                &#125;,16)</span><br><span class="line">            &#125;,</span><br><span class="line">            beforeDestroy()&#123;</span><br><span class="line">                clearInterval(this.timer)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="模块化与组件化"><a href="#模块化与组件化" class="headerlink" title="模块化与组件化"></a>模块化与组件化</h2><blockquote><p><strong>模块化</strong>是指将js文件进行拆分<br><strong>组件化</strong>是指一系列代码和资源的集合</p></blockquote><h2 id="组件的基本使用"><a href="#组件的基本使用" class="headerlink" title="组件的基本使用"></a>组件的基本使用</h2><ul><li>创建组件（一般包括data、template）</li><li>注册组件</li><li>使用组件标签</li></ul><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303222136236.png"></p><h3 id="为什么要将data的data写成函数式？"><a href="#为什么要将data的data写成函数式？" class="headerlink" title="为什么要将data的data写成函数式？"></a>为什么要将data的data写成函数式？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let data = &#123;a: 1, b: 2&#125;</span><br><span class="line">const d1 = data;</span><br><span class="line">const d2 = data;</span><br><span class="line">d1.a = 10;</span><br><span class="line">console.log(d2)//returns &#123;a: 10, b: 2&#125;</span><br><span class="line">-----</span><br><span class="line">let data()&#123;</span><br><span class="line">    return &#123;a: 1, b: 2&#125;</span><br><span class="line">&#125;</span><br><span class="line">const d1 = data;</span><br><span class="line">const d2 = data;</span><br><span class="line">d1.a = 10;</span><br><span class="line">console.log()//returns &#123;a: 1, b: 2&#125;</span><br></pre></td></tr></table></figure><h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><p>全局组件要放在最开头处，否则容易未被解析出现错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 全局组件</span><br><span class="line">    // 创建组件</span><br><span class="line">    const test = Vue.extend(&#123;</span><br><span class="line">        template:`</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;test&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        `,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                test:&#x27;test successfully! &#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    // 全局注册组件</span><br><span class="line">    Vue.component(&#x27;test&#x27;,test);</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// 注册局部组件</span><br><span class="line">    //第一步：创建组件</span><br><span class="line">    const school = Vue.extend(&#123;</span><br><span class="line">        template:`</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        `,</span><br><span class="line">        // 只能写成函数式</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                schoolName: &#x27;gdip&#x27;,</span><br><span class="line">                address:&#x27;foshan&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    const student = Vue.extend(&#123;</span><br><span class="line">        template:`</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;学生姓名：&#123;&#123;studentName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;test&gt;&lt;/test&gt;</span><br><span class="line">        &lt;/div&gt;`,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                studentName:&#x27;linzepore&#x27;,</span><br><span class="line">                age:20</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    //第二步：创建vm，注册组件</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&#x27;#root&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            hello:&#x27;hello&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            school: school,</span><br><span class="line">            // student: student</span><br><span class="line">            student</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="组件的使用"><a href="#组件的使用" class="headerlink" title="组件的使用"></a>组件的使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;!-- 第三步：编写组件标签 --&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;hello&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;school&gt;&lt;/school&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;student&gt;&lt;/student&gt;</span><br><span class="line">    &lt;test&gt;&lt;/test&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="组件标签名称大小写"><a href="#组件标签名称大小写" class="headerlink" title="组件标签名称大小写"></a>组件标签名称大小写</h2><ul><li>注册组件名称写成以-连接会自动形成大写（如<code>&#39;my-school&#39;:school</code>）  </li><li>注册的时候用的什么名字，使用标签就要用什么名字；如果组件定义了名字，开发者工具会随之变化，但是使用标签时候还是要用注册的名字  </li><li>创建组件的时候可以先不写Vue.extend，直接写成对象的形式，注册的时候Vue会进行调用<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303222150759.png"><br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303222154319.png"></li></ul><h2 id="组件的嵌套以及书写规范"><a href="#组件的嵌套以及书写规范" class="headerlink" title="组件的嵌套以及书写规范"></a>组件的嵌套以及书写规范</h2><p>详见-&gt;<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=57">第57集</a><br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303222241184.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//定义student组件</span><br><span class="line">const student = Vue.extend(&#123;</span><br><span class="line">//定义school组件，嵌套了student</span><br><span class="line">const school = Vue.extend(&#123;</span><br><span class="line">    template:`</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;学校名称：&#123;&#123;schoolname&#125;&#125;&lt;/h2&gt;    </span><br><span class="line">        &lt;h2&gt;学校地址: &#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;student&gt;&lt;/student&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            schoolname:&#x27;gdip&#x27;,</span><br><span class="line">            address:&#x27;foshan&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        student</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> //定义了hello组件，与school平级</span><br><span class="line">const hello = Vue.extend(&#123;</span><br><span class="line">    template:`</span><br><span class="line">    &lt;h2&gt;欢迎来到Linzepore的博客&lt;/h2&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;)</span><br><span class="line">const app = Vue.extend(&#123;</span><br><span class="line">    template:`</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;hello&gt;&lt;/hello&gt;</span><br><span class="line">    &lt;school&gt;&lt;/school&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    components:&#123;</span><br><span class="line">        hello,</span><br><span class="line">        school</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    template:`&lt;app&gt;&lt;/app&gt;`,</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        app</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="一个bug————忘记把标签包裹成为一个根标签"><a href="#一个bug————忘记把标签包裹成为一个根标签" class="headerlink" title="一个bug————忘记把标签包裹成为一个根标签"></a>一个bug————忘记把标签包裹成为一个根标签</h3><p>Vue报错：[Vue warn]: Error compiling template:<br>Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue2-23-03-22&quot;&gt;&lt;a href=&quot;#Vue2-23-03-22&quot; class=&quot;headerlink&quot; title=&quot;Vue2 - 23-03-22&quot;&gt;&lt;/a&gt;Vue2 - 23-03-22&lt;/h1&gt;&lt;h2 id=&quot;自定义v-fbind指令&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/categories/Learning/Vue2/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/tags/Vue2/"/>
    
  </entry>
  
  <entry>
    <title>Vue2 - 23-03-21</title>
    <link href="https://blog.zepo.re/2023/03/21/2023-03-21.html/"/>
    <id>https://blog.zepo.re/2023/03/21/2023-03-21.html/</id>
    <published>2023-03-21T07:30:23.000Z</published>
    <updated>2023-03-21T14:13:14.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-23-03-21"><a href="#Vue2-23-03-21" class="headerlink" title="Vue2 - 23-03-21"></a>Vue2 - 23-03-21</h1><h2 id="总结数据监视"><a href="#总结数据监视" class="headerlink" title="总结数据监视"></a>总结数据监视</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303211623214.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;总结Vue数据监测&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;../resources/js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h1&gt;学生信息&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;student.age++&quot;&gt;年龄+1岁&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;addGender&quot;&gt;添加性别属性，默认值为男&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;addFriend&quot;&gt;在列表首位添加一个朋友&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;updateFirstFriendName&quot;&gt;修改第一个朋友的名字为“张三”&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;addHobby&quot;&gt;添加一个爱好&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;modifyHobby&quot;&gt;修改第一个爱好为“开车”&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;filterSmoking&quot;&gt;过滤掉爱好中的抽烟&lt;/button&gt;</span><br><span class="line">        &lt;h2&gt;学生姓名：&#123;&#123;student.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2 v-if=&quot;student.gender&quot;&gt;学生性别：&#123;&#123;student.gender&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学生年龄：&#123;&#123;student.age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学生爱好&lt;/h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(h, index) in student.hobby&quot;&gt;</span><br><span class="line">                &#123;&#123;h&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;h2&gt;朋友：&lt;/h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(f,index) of student.friends&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">                &#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false;</span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">    el:&quot;#root&quot;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        student:&#123;</span><br><span class="line">            name:&#x27;Linzepore&#x27;,</span><br><span class="line">            age:18,</span><br><span class="line">            hobby:[&#x27;抽烟&#x27;,&#x27;喝酒&#x27;,&#x27;烫头&#x27;],</span><br><span class="line">            friends:[</span><br><span class="line">                &#123;name:&#x27;jack&#x27;,age:30&#125;,</span><br><span class="line">                &#123;name:&#x27;lily&#x27;,age:20&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        addGender()&#123;</span><br><span class="line">            // 错误写法 vm.set(this,student.gender,&#x27;男&#x27;)</span><br><span class="line">            // 另一种方式 Vue.set(this.student,&#x27;gender&#x27;,&#x27;男&#x27;),</span><br><span class="line">            this.$set(this.student,&#x27;gender&#x27;,&#x27;男&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        addFriend()&#123;</span><br><span class="line">            this.student.friends.unshift(&#123;name:&#x27;tom&#x27;, age:13&#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        updateFirstFriendName()&#123;</span><br><span class="line">            this.student.friends[0].name = &#x27;张三&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        addHobby()&#123;</span><br><span class="line">            this.student.hobby.push(&#x27;打台球&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        modifyHobby()&#123;</span><br><span class="line">            // this.student.hobby.splice(0,1,&#x27;开车&#x27;)</span><br><span class="line">            Vue.set(this.student.hobby,0,&#x27;开车&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        filterSmoking()&#123;</span><br><span class="line">            const newHobby = this.student.hobby.filter((val)=&gt;&#123;</span><br><span class="line">                return val != &#x27;抽烟&#x27;</span><br><span class="line">            &#125;)</span><br><span class="line">            this.student.hobby = newHobby;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>补充filter监测不到做不了响应式，那么就可以<strong>通过直接将过滤之后的新数组覆盖原数组</strong><br>数据劫持实际上就是数据代理，通过Object.defineProperty()可以实现数据劫持，让属性在赋值的时候能够触发set方法</p></blockquote><h2 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h2><h3 id="v-model修饰符"><a href="#v-model修饰符" class="headerlink" title="v-model修饰符"></a>v-model修饰符</h3><p><code>v-model.number</code>：将value的值赋给data的属性时候转换成数字类型<br><code>v-model.trim</code>：去掉value中前后的空格<br><code>v-model.lazy</code>：失去焦点之后再返回数据  </p><h3 id="一些input里面需要手动配value"><a href="#一些input里面需要手动配value" class="headerlink" title="一些input里面需要手动配value"></a>一些input里面需要手动配value</h3><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303211726771.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;../resources/js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;form @submit.prevent=&quot;demo&quot;&gt;</span><br><span class="line">            &lt;!-- .trim前后去掉空格 --&gt;</span><br><span class="line">            账号：&lt;input type=&quot;text&quot; v-model=&quot;account&quot;&gt;&lt;br&gt;</span><br><span class="line">            密码：&lt;input type=&quot;password&quot; v-model=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="line">            &lt;!-- 一般来说type=&quot;number&quot;和“.number”修饰符会同时使用 --&gt;</span><br><span class="line">            年龄：&lt;input type=&quot;number&quot; v-model.number=&quot;age&quot;&gt;&lt;br&gt;</span><br><span class="line">            性别：</span><br><span class="line">            男&lt;input type=&quot;radio&quot; name=&quot;gender&quot; v-model=&quot;gender&quot; value=&quot;male&quot;&gt;</span><br><span class="line">            女&lt;input type=&quot;radio&quot; name=&quot;gender&quot; v-model=&quot;gender&quot; value=&quot;female&quot;&gt;&lt;br&gt;</span><br><span class="line">            爱好：</span><br><span class="line">            学习&lt;input type=&quot;checkbox&quot; v-model=&quot;hobby&quot; value=&quot;study&quot;&gt;</span><br><span class="line">            打电动&lt;input type=&quot;checkbox&quot; v-model=&quot;hobby&quot; value=&quot;game&quot;&gt;</span><br><span class="line">            吃饭&lt;input type=&quot;checkbox&quot; v-model=&quot;hobby&quot; value=&quot;eat&quot;&gt;</span><br><span class="line">            所属校区</span><br><span class="line">            &lt;select v-model=&quot;city&quot;&gt;</span><br><span class="line">                &lt;option value=&quot;&quot;&gt;请选择校区&lt;/option&gt;</span><br><span class="line">                &lt;option value=&quot;beijing&quot;&gt;北京&lt;/option&gt;</span><br><span class="line">                &lt;option value=&quot;shanghai&quot;&gt;上海&lt;/option&gt;</span><br><span class="line">                &lt;option value=&quot;shenzhen&quot;&gt;深圳&lt;/option&gt;</span><br><span class="line">                &lt;option value=&quot;wuhan&quot;&gt;武汉&lt;/option&gt;</span><br><span class="line">            &lt;/select&gt;&lt;br&gt;</span><br><span class="line">            其他信息：</span><br><span class="line">            &lt;!-- .lazy失去焦点的时候就会解析 --&gt;</span><br><span class="line">            &lt;textarea v-model.lazy=&quot;other&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;&lt;br&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; v-model=&quot;agree&quot;&gt; 阅读并接受&lt;a href=&quot;http://baidu.com&quot;&gt;《用户协议》&lt;/a&gt;</span><br><span class="line">            &lt;button &gt;提交&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        Vue.config.productionTip = false;</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el: &#x27;#root&#x27;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                account:&#x27;&#x27;,</span><br><span class="line">                password:&#x27;&#x27;,</span><br><span class="line">                age:null,</span><br><span class="line">                gender:&#x27;female&#x27;,</span><br><span class="line">                hobby:[],</span><br><span class="line">                city:&#x27;beijing&#x27;,</span><br><span class="line">                other:&#x27;&#x27;,</span><br><span class="line">                agree:&#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                demo()&#123;</span><br><span class="line">                    // console.log(this.account);</span><br><span class="line">                    // console.log(this.password);</span><br><span class="line">                    // console.log(this.gender);</span><br><span class="line">                    // console.log(this.hobby);</span><br><span class="line">                    // console.log(this.city);</span><br><span class="line">                    // console.log(this.other);</span><br><span class="line">                    // console.log(this.agree);</span><br><span class="line">                    console.log(JSON.stringify(this._data))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303212027646.png"></p><h3 id="局部过滤器"><a href="#局部过滤器" class="headerlink" title="局部过滤器"></a>局部过滤器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 不传参默认只向管道传入time --&gt;</span><br><span class="line">&lt;h3&gt;现在是:&#123;&#123;time | timeFormater&#125;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 传参的话会向管道传入两个参数：time、&#x27;YYYY年MM月DD日&#x27; --&gt;</span><br><span class="line">&lt;h3&gt;现在是:&#123;&#123;time | timeFormater(&#x27;YYYY_MM_DD hh:mm:ss&#x27;)&#125;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--可以有多个管道--&gt;</span><br><span class="line">&lt;h3&gt;现在是:&#123;&#123;time | timeFormater(&#x27;YYYY_MM_DD hh:mm:ss&#x27;) | mySlice&#125;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">//局部过滤器</span><br><span class="line">filters:&#123;</span><br><span class="line">    // ES6中可以有形参默认值</span><br><span class="line">    timeFormater(originalTime,str=&#x27;YYYY年MM月DD日&#x27;) &#123;</span><br><span class="line">        return dayjs(originalTime).format(str)</span><br><span class="line">    &#125;,</span><br><span class="line">    mySlice(value) &#123;</span><br><span class="line">        return value.slice(0,4)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何证明其为局部？  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root2&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;msg | mySlice&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#root2&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        msg:&quot;hello, I&#x27;m Linzepore!&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303212012332.png"></p><h2 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(&#x27;mySlice&#x27;, function(value)&#123;</span><br><span class="line">    return value.slice(0,4);</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#root2&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        msg:&quot;hello, I&#x27;m Linzepore!&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303212020856.png"><br>也可以用在v-bind属性上，不限于插值语法<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303212024329.png"></p><h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303212033924.png"></p><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303212108681.png"></p><p>安全威胁：容易受到XXS攻击（虽然一般会进行HttpOnly保护）<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303212105269.png"><br><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH/?p=41&share_source=copy_web&vd_source=39c43c193154a4c6141d1cb3c1af6aba&t=1147">【尚硅谷Vuejs从入门到精通P41_尚硅谷Vue技术_v-html指令】 【精准空降到 19:07】</a></p><h2 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303212130924.png"><br>为了避免由于js未加载出来导致页面混乱，vue提供了一个v-cloak属性，该属性会在Vue接管时候删除，可以配合CSS的属性选择器来使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;v-cloak指令&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        [v-cloak] &#123;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h3&gt;&#123;&#123;name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;h3 v-cloak&gt;&#123;&#123;name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;!-- 假如vue.js没出来，h3不会出现 --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;./resources/js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        Vue.config.productionTip = false;</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el: &#x27;#root&#x27;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                name:&#x27;Linzepore&#x27;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303212137750.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;v-once指令&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;../resources/js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2 v-once&gt;初始化的n值：&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;当前的n值是：&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        Vue.config.productionTip = false;</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el: &#x27;#root&#x27;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                n:1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202303212141984.png"></p><h2 id="自定义v-big指令"><a href="#自定义v-big指令" class="headerlink" title="自定义v-big指令"></a>自定义v-big指令</h2><p>big函数何时会被调用？</p><ul><li>1.指令与元素成功绑定时</li><li>2.指令所在模板重新解析时（而非依赖的数据被改变时！）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;自定义指令&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;../resources/js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2&gt;当前的n值是&lt;span v-text=&quot;n&quot;&gt;&lt;/span&gt;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;放大十倍后的n值是&lt;span v-big=&quot;n&quot;&gt;&lt;/span&gt;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        Vue.config.productionTip = false;</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el: &#x27;#root&#x27;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                n:1</span><br><span class="line">            &#125;,</span><br><span class="line">            directives:&#123;</span><br><span class="line">                //big函数何时会被调用？</span><br><span class="line">                //1。指令与元素成功绑定时</span><br><span class="line">                //2.指令所在模板重新解析时（并非依赖的数据被改变时！）</span><br><span class="line">                big:function(element, binding)&#123;</span><br><span class="line">                    // console.dir(element);</span><br><span class="line">                    // console.log(element instanceof HTMLElement);</span><br><span class="line">                    element.innerText = binding.value*10</span><br><span class="line">                    console.log(binding);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue2-23-03-21&quot;&gt;&lt;a href=&quot;#Vue2-23-03-21&quot; class=&quot;headerlink&quot; title=&quot;Vue2 - 23-03-21&quot;&gt;&lt;/a&gt;Vue2 - 23-03-21&lt;/h1&gt;&lt;h2 id=&quot;总结数据监视&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/categories/Learning/Vue2/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/tags/Vue2/"/>
    
  </entry>
  
</feed>
