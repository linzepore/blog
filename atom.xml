<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Linzepore&#39;s Blog</title>
  
  
  <link href="https://blog.zepo.re/atom.xml" rel="self"/>
  
  <link href="https://blog.zepo.re/"/>
  <updated>2024-04-01T07:45:44.866Z</updated>
  <id>https://blog.zepo.re/</id>
  
  <author>
    <name>Linzepore</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>3月27日工作内容</title>
    <link href="https://blog.zepo.re/2024/03/27/3%E6%9C%8827%E6%97%A5%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9.html/"/>
    <id>https://blog.zepo.re/2024/03/27/3%E6%9C%8827%E6%97%A5%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9.html/</id>
    <published>2024-03-27T05:21:22.000Z</published>
    <updated>2024-04-01T07:45:44.866Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3月27日工作内容"><a href="#3月27日工作内容" class="headerlink" title="3月27日工作内容"></a>3月27日工作内容</h1><h2 id="解决数据库插入表情包问题"><a href="#解决数据库插入表情包问题" class="headerlink" title="解决数据库插入表情包问题"></a>解决数据库插入表情包问题</h2><blockquote><p>报错：1366-Incorrectstringvalue:”\xF0\x9F\x92\xA5\xF0(x9F.for column’product text’ at row 1</p></blockquote><p>我负责的一个多商户电商系统台湾平台商家客户反馈在上架的时候出现了一个问题：</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240327133617327.png" alt="image-20240327133617327"></p><p>一般来说这时候看日志会更容易找到问题，但是这次因为时间有点久，去查日志因为时间隔的时间有点久会有些麻烦，所以我选择让客户截一下每一步骤的图：</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240327134237435.png" alt="image-20240327134237435"></p><p>不过这时候客户又触发了一次，然后很快我就在日志上定位到了问题：</p><blockquote><p>1366-Incorrectstringvalue:”\xF0\x9F\x92\xA5\xF0(x9F.for column’product text’ at row 1</p></blockquote><p>结合图中他编辑插入的文本，应该是emoji表情符号的问题。</p><p><code>MySQL</code>中的<code>uftmb4</code>格式是可以存表情符号的，但是只是在建库、建表的时候选择这个编码其实并没有用，Navicat在添加字段的时候会默认选择<code>utf8</code>编码（我用的版本是这样的）</p><p><code>utf8</code>默认每个字符最大长度是3，<code>utfmb4</code>默认每个字符最大长度是4</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240327142458995.png" alt="image-20240327142458995"></p><p>解决方式其实就比较简单：</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240327141754766.png" alt="image-20240327141754766"></p><p>对列的字符集进行修改，改成<code>utf8mb4</code>就可以了</p><h2 id="解决字段长度过长的问题"><a href="#解决字段长度过长的问题" class="headerlink" title="解决字段长度过长的问题"></a>解决字段长度过长的问题</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240327142856110.png" alt="image-20240327142856110"></p><p>解决完上面那个问题之后还是有问题，日志上显示的是长度过长，那么看语句上的表，然后扩充相应字段的长度限制就好了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;3月27日工作内容&quot;&gt;&lt;a href=&quot;#3月27日工作内容&quot; class=&quot;headerlink&quot; title=&quot;3月27日工作内容&quot;&gt;&lt;/a&gt;3月27日工作内容&lt;/h1&gt;&lt;h2 id=&quot;解决数据库插入表情包问题&quot;&gt;&lt;a href=&quot;#解决数据库插入表情包问题&quot;</summary>
      
    
    
    
    <category term="实习记录" scheme="https://blog.zepo.re/categories/%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Working" scheme="https://blog.zepo.re/categories/Working/"/>
    
    <category term="SpringBoot" scheme="https://blog.zepo.re/categories/Working/SpringBoot/"/>
    
    
    <category term="tech" scheme="https://blog.zepo.re/tags/tech/"/>
    
    <category term="实习" scheme="https://blog.zepo.re/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>3月15-19、25日工作内容</title>
    <link href="https://blog.zepo.re/2024/03/19/3%E6%9C%8815-19%E3%80%8125%E6%97%A5%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9.html/"/>
    <id>https://blog.zepo.re/2024/03/19/3%E6%9C%8815-19%E3%80%8125%E6%97%A5%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9.html/</id>
    <published>2024-03-19T03:21:22.000Z</published>
    <updated>2024-03-25T08:51:21.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3月15-19、25日工作内容"><a href="#3月15-19、25日工作内容" class="headerlink" title="3月15-19、25日工作内容"></a>3月15-19、25日工作内容</h1><h2 id="接口对接"><a href="#接口对接" class="headerlink" title="接口对接"></a>接口对接</h2><p>公司有一套客户关系管理系统，通常称为CRM，这套系统衍生出了很多套，今天需要对接另一个系统的导入api。</p><h3 id="请求字段误解"><a href="#请求字段误解" class="headerlink" title="请求字段误解"></a>请求字段误解</h3><p>基本没什么问题，主要是出现接口请求字段的认知型误解：</p><p>客户那边技术没留意到这个备注，习惯性用<code>0/1</code>来区别性别</p><p><img src="C:\Users\Zepore\AppData\Roaming\Typora\typora-user-images\image-20240325145615878.png" alt="image-20240325145615878"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240319163637429.png" alt="image-20240319163637429"></p><h3 id="排重包"><a href="#排重包" class="headerlink" title="排重包"></a>排重包</h3><p><img src="C:\Users\Zepore\AppData\Roaming\Typora\typora-user-images\image-20240325153547216.png" alt="image-20240325153547216"></p><p>排重包，头次听到这个词汇，我只能反问排重包是何物。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240325160022481.png" alt="image-20240325160022481"></p><p>原来要的只是加密手机号文件，但问题是客户的数据动不得，又是只能把他做成功能了</p><p>因为是一个系统衍生出来的多系统，做功能要持着一个兼容性最大，不影响其他系统的原则</p><p>在上次导出手机号的基础上添加一个字段区分是否加密，配合跟上一次传的一样的是否只要手机号的字段，在DAO层查到手机号之后对手机号进行MD5加密，最后再进行输出。</p><h2 id="导入文件的时候进行排重"><a href="#导入文件的时候进行排重" class="headerlink" title="导入文件的时候进行排重"></a>导入文件的时候进行排重</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240325160615137.png" alt="image-20240325160615137"></p><p>出现了用文件导入数据的时候重复导入的问题，因为我查询之后数据有7800条之多，在询问完项目经理之后只能帮客户删了。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240325161029166.png" alt="image-20240325161029166"></p><p>事后经理就让我做一个去重的功能。</p><h3 id="1、从导入的最开始时候就开始做去重"><a href="#1、从导入的最开始时候就开始做去重" class="headerlink" title="1、从导入的最开始时候就开始做去重"></a>1、从导入的最开始时候就开始做去重</h3><p>原本代码中做了两个排重：对文件中重复数据的排除、对文件与系统中重复数据的排除。</p><p>最开始我打算从导入的最开始时候就做与数据库的去重，重复的直接return并计算错误数据，这样虽然听起来耦合度高，但其实这个功能本来就做得耦合度很高的，不差这一句，但到后面发现：</p><p>DAO层其实是又做了查重的，这就导致我传进去的手机号列表报了异常，只能对现有导入排重进行debug</p><h3 id="2、对现有的导入排重功能进行debug"><a href="#2、对现有的导入排重功能进行debug" class="headerlink" title="2、对现有的导入排重功能进行debug"></a>2、对现有的导入排重功能进行debug</h3><p>系统当中其实是由一段代码实现了排重功能的，经过多次debug，发现有一个flag状的变量的状态为<code>false</code>导致不执行排重了，改回<code>true</code>之后我再尝试一次，还是不行，日志显示Mybatis Plus执行的一个原本不应出现的wrapper产生的一个SQL报错，判空逻辑又出了问题，但这次不一样的是，对象不是空的，对象中有ID但对象其他属性为null导致Update整个对象的时候，Set字段是空的，没想出太好的办法，给类加了一个方法，判断关键的属性是否全为null</p><h2 id="Picgo上传失败？"><a href="#Picgo上传失败？" class="headerlink" title="Picgo上传失败？"></a>Picgo上传失败？</h2><p>今天在使用Picgo上传文件的时候一直报错</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240325155200401.png" alt="image-20240325155200401"></p><p>最开始我怀疑是网络环境的问题，但尝试了其他几个节点并且可以正常访问谷歌之后，我认为是Picgo配置除了问题，但奇怪的是，我并没有切换过任何配置，只能尝试查看日志文件，很快找到了关键词</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgs20240325155113.png"></p><p>问题定位在身份验证上面</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgs%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17113530228340.png" alt="企业微信截图_17113530228340"></p><p>于是来到Github寻求答案，发现原来是Github默认设置Assess Token的有效期为一个月，延期之后重新获取Token就可以了</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgs%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17113528756606.png" alt="企业微信截图_17113528756606"></p><h2 id="帮忙解决了一点前端问题"><a href="#帮忙解决了一点前端问题" class="headerlink" title="帮忙解决了一点前端问题"></a>帮忙解决了一点前端问题</h2><p>台湾客户那边提交银行审核，银行说页面上出现了珠宝分类，需要改掉，刚好只有我这个后端有空</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240325163909358.png" alt="image-20240325163909358"></p><p>主要完成了三个：修改图标、修改分类链接、添加底部公司信息，剩一个上传协议归属后端，是在SQL表中修改的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;3月15-19、25日工作内容&quot;&gt;&lt;a href=&quot;#3月15-19、25日工作内容&quot; class=&quot;headerlink&quot; title=&quot;3月15-19、25日工作内容&quot;&gt;&lt;/a&gt;3月15-19、25日工作内容&lt;/h1&gt;&lt;h2 id=&quot;接口对接&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="实习记录" scheme="https://blog.zepo.re/categories/%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Working" scheme="https://blog.zepo.re/categories/Working/"/>
    
    <category term="SpringBoot" scheme="https://blog.zepo.re/categories/Working/SpringBoot/"/>
    
    
    <category term="tech" scheme="https://blog.zepo.re/tags/tech/"/>
    
    <category term="实习" scheme="https://blog.zepo.re/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>3月14日工作内容</title>
    <link href="https://blog.zepo.re/2024/03/14/3%E6%9C%8814%E6%97%A5%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9.html/"/>
    <id>https://blog.zepo.re/2024/03/14/3%E6%9C%8814%E6%97%A5%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9.html/</id>
    <published>2024-03-14T09:29:22.000Z</published>
    <updated>2024-03-14T09:29:10.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3月14日工作内容"><a href="#3月14日工作内容" class="headerlink" title="3月14日工作内容"></a>3月14日工作内容</h1><h2 id="前端判断出错导致编辑时出现误导提醒"><a href="#前端判断出错导致编辑时出现误导提醒" class="headerlink" title="前端判断出错导致编辑时出现误导提醒"></a>前端判断出错导致编辑时出现误导提醒</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240314172149617.png" alt="image-20240314172149617"></p><p>昨天晚上客户提到：</p><p>在公司管理员工列表页面，点击编辑，明明是赵X的账户，想调整一下接数据的数量，然后点确认跳出来的却是该员工是曹X</p><p>检查没有出现请求错误，并且确定返回参数的职级关系无误之后，把问题反馈给前端，就没我事了。</p><p>今天大多时间没什么任务，我一边复习多线程。</p><h2 id="Java复习"><a href="#Java复习" class="headerlink" title="Java复习"></a>Java复习</h2><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>线程挺抽象的，一直很混淆，在这篇文章中弄清楚了一些：</p><p><a href="https://www.yuque.com/gorit/learnjava/java_se_09">1.9 多线程编程 (yuque.com)</a></p><h3 id="同步锁"><a href="#同步锁" class="headerlink" title="同步锁"></a>同步锁</h3><p>看过很多锁的例子，说句实在的，很难把握得住，很多时候看起来很像的代码运行起来结果都不一样，所以我打算记住一两种就够了。</p><p>通过<code>synchronized(lock)</code>的方式来加锁，其实是在锁对象（可以是任意对象最简单的如<code>private byte[] lock = new byte[0];</code>）加入一个标识符，当执行同步括住的代码的时候，标识符不让其他线程使用该锁对象，只有代码块执行结束了才会释放该对象。</p><p>实际在操作的时候，要保证的一点就是各线程中锁对象是同一个。</p><p>而将锁放在实现<code>Runnable</code>接口的类中，通过传入该<code>Runnable</code>类实例化不同的线程，这样子创建出来的线程就是具有锁的功能的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SynchronizedDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] lock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出了一张票，余票：&quot;</span> + --count);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SynchronizedDemo</span> <span class="hljs-variable">synchronizedDemo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronizedDemo</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(synchronizedDemo, <span class="hljs-string">&quot;窗口一&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(synchronizedDemo, <span class="hljs-string">&quot;窗口二&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(synchronizedDemo, <span class="hljs-string">&quot;窗口三&quot;</span>);<br>        thread1.start();<br>        thread2.start();<br>        thread3.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">...<br>窗口二卖出了一张票，余票：20<br>窗口三卖出了一张票，余票：19<br>窗口二卖出了一张票，余票：18<br>窗口一卖出了一张票，余票：17<br>窗口三卖出了一张票，余票：16<br>窗口三卖出了一张票，余票：15<br>窗口一卖出了一张票，余票：14<br>窗口二卖出了一张票，余票：13<br>窗口二卖出了一张票，余票：12<br>窗口一卖出了一张票，余票：11<br>窗口三卖出了一张票，余票：10<br>窗口三卖出了一张票，余票：9<br>窗口一卖出了一张票，余票：8<br>窗口二卖出了一张票，余票：7<br>窗口二卖出了一张票，余票：6<br>窗口一卖出了一张票，余票：5<br>窗口三卖出了一张票，余票：4<br>窗口二卖出了一张票，余票：3<br>窗口三卖出了一张票，余票：2<br>窗口一卖出了一张票，余票：1<br>窗口三卖出了一张票，余票：0<br></code></pre></td></tr></table></figure><p>微小的改动下，这个代码就得出不一样的结果：</p><p>比如这个，就没办法分配给其他线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SynchronizedDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] lock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>            <span class="hljs-keyword">while</span> (count&gt;<span class="hljs-number">0</span>)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出了一张票，余票：&quot;</span> + --count);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SynchronizedDemo</span> <span class="hljs-variable">synchronizedDemo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronizedDemo</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(synchronizedDemo, <span class="hljs-string">&quot;窗口一&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(synchronizedDemo, <span class="hljs-string">&quot;窗口二&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(synchronizedDemo, <span class="hljs-string">&quot;窗口三&quot;</span>);<br>        thread1.start();<br>        thread2.start();<br>        thread3.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">...<br>窗口一卖出了一张票，余票：20<br>窗口一卖出了一张票，余票：19<br>窗口一卖出了一张票，余票：18<br>窗口一卖出了一张票，余票：17<br>窗口一卖出了一张票，余票：16<br>窗口一卖出了一张票，余票：15<br>窗口一卖出了一张票，余票：14<br>窗口一卖出了一张票，余票：13<br>窗口一卖出了一张票，余票：12<br>窗口一卖出了一张票，余票：11<br>窗口一卖出了一张票，余票：10<br>窗口一卖出了一张票，余票：9<br>窗口一卖出了一张票，余票：8<br>窗口一卖出了一张票，余票：7<br>窗口一卖出了一张票，余票：6<br>窗口一卖出了一张票，余票：5<br>窗口一卖出了一张票，余票：4<br>窗口一卖出了一张票，余票：3<br>窗口一卖出了一张票，余票：2<br>窗口一卖出了一张票，余票：1<br>窗口一卖出了一张票，余票：0<br></code></pre></td></tr></table></figure><p>再比如这个，偶尔会出现买多了的情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SynchronizedDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (count&gt;<span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出了一张票，余票：&quot;</span> + count--);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SynchronizedDemo</span> <span class="hljs-variable">synchronizedDemo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronizedDemo</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(synchronizedDemo, <span class="hljs-string">&quot;窗口一&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(synchronizedDemo, <span class="hljs-string">&quot;窗口二&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(synchronizedDemo, <span class="hljs-string">&quot;窗口三&quot;</span>);<br>        thread1.start();<br>        thread2.start();<br>        thread3.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">...<br>窗口一卖出了一张票，余票：20<br>窗口三卖出了一张票，余票：19<br>窗口一卖出了一张票，余票：18<br>窗口二卖出了一张票，余票：17<br>窗口一卖出了一张票，余票：16<br>窗口三卖出了一张票，余票：15<br>窗口二卖出了一张票，余票：14<br>窗口三卖出了一张票，余票：13<br>窗口二卖出了一张票，余票：12<br>窗口一卖出了一张票，余票：11<br>窗口三卖出了一张票，余票：10<br>窗口二卖出了一张票，余票：9<br>窗口一卖出了一张票，余票：8<br>窗口二卖出了一张票，余票：7<br>窗口一卖出了一张票，余票：6<br>窗口三卖出了一张票，余票：5<br>窗口一卖出了一张票，余票：4<br>窗口二卖出了一张票，余票：3<br>窗口三卖出了一张票，余票：2<br>窗口二卖出了一张票，余票：1<br>窗口一卖出了一张票，余票：0<br>窗口三卖出了一张票，余票：-1<br></code></pre></td></tr></table></figure><p>对于这两种异常情况的解释，GPT是这样说的：</p><p>在同步块中使用 <code>while</code> 循环和将 <code>while</code> 循环条件放在同步块之外然后在 <code>while</code> 循环中使用 <code>synchronized</code>，这两种方式的区别在于锁的释放时机和锁的粒度。</p><ol><li><p>**将 <code>while</code> 循环条件放在同步块之外然后在 <code>while</code> 循环中使用 <code>synchronized</code>**：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">javaCopy codesynchronized (lock) &#123;<br>    while (count &gt; 0) &#123;<br>        // 操作 count<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方式下，线程进入同步块后首先获取锁，然后检查 <code>count</code> 的值，如果条件满足则执行相应的操作，否则退出同步块。在这种情况下，锁的粒度比较粗，因为锁的持有范围是在整个 <code>while</code> 循环内。这可能会导致其他线程在等待锁时被阻塞，即使它们只是想读取 <code>count</code> 的值。</p></li><li><p><strong>将 <code>while</code> 循环放在同步块内</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">javaCopy codewhile (true) &#123;<br>    synchronized (lock) &#123;<br>        if (count &gt; 0) &#123;<br>            // 操作 count<br>        &#125; else &#123;<br>            break;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方式下，线程进入 <code>while</code> 循环后首先获取锁，然后检查 <code>count</code> 的值，如果条件满足则执行相应的操作，否则退出 <code>while</code> 循环。在这种情况下，锁的持有范围是在每次迭代中，因此锁的粒度更细。这意味着即使某个线程持有了锁，其他线程仍然可以读取 <code>count</code> 的值，而不需要等待整个 <code>while</code> 循环结束。</p></li></ol><p>在第二种方式中，每次迭代时，线程都会释放锁，这样其他线程就有机会获得锁并进行操作。这有助于减少竞争和提高并发性能，并且能够避免出现负数的情况，因为每个线程在获取锁之后都会检查 <code>count</code> 的值，如果小于等于 0，则会退出循环。</p><p>记法就是<strong>细粒化到同步锁住里面的每一次操作都做一次判断</strong>。</p><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240314152004769.png" alt="image-20240314152004769"></p><ol><li><p>使用 wait() 使方法进入等待状态</p></li><li><p>使用 notify() 唤醒等待的线程</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> singleTest.threadTest;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Zepore</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/3/14 15:07</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Egg</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">hasEgg</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] lock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">pickEgg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">if</span> (hasEgg) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;捡到鸡蛋了&quot;</span>);<br>                    hasEgg = <span class="hljs-literal">false</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;等另一线程丢鸡蛋&quot;</span>);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        lock.wait();<span class="hljs-comment">//必须再同步代码块中写</span><br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;捡鸡蛋线程&quot;</span>);<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">throwEgg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                System.out.println(<span class="hljs-string">&quot;生鸡蛋了&quot;</span>);<br>                hasEgg = <span class="hljs-literal">true</span>;<br>                lock.notify();<br>            &#125;<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;生鸡蛋线程&quot;</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Egg</span> <span class="hljs-variable">egg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Egg</span>();<br>        egg.pickEgg.start();<br>        egg.throwEgg.start();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>wait()</code>和<code>sleep()</code>的区别</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240314152051627.png" alt="image-20240314152051627"></p><p>刚好刷到了两道跟线程通信相关的常见面试题：</p><h3 id="交叉打印的实例"><a href="#交叉打印的实例" class="headerlink" title="交叉打印的实例"></a>交叉打印的实例</h3><p>线程通信可以用于交叉打印：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> singleTest.threadTest;<br><br><span class="hljs-keyword">import</span> cn.hutool.crypto.GlobalBouncyCastleProvider;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Zepore</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/3/14 15:45</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CrossPrint</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] lock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                lock.notify();<br>                <span class="hljs-keyword">if</span> (num &lt; CAPACITY) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;Print[&quot;</span> + ++num + <span class="hljs-string">&quot;]: Thread-&quot;</span> + Thread.currentThread().getName());<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        lock.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                    &#125;<br><br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">CrossPrint</span> <span class="hljs-variable">crossPrint</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CrossPrint</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(crossPrint, <span class="hljs-string">&quot;线程一&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(crossPrint, <span class="hljs-string">&quot;线程二&quot;</span>);<br>        thread1.start();<br>        thread2.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> singleTest.threadTest;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadLocalRandom;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Zepore</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/3/14 15:59</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockQueue</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">private</span> List&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(CAPACITY);<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] lock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">produce</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>            lock.notify();<br>            <span class="hljs-keyword">if</span>(queue.size() &lt; <span class="hljs-number">20</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;队列长度：[&quot;</span>+queue.size()+<span class="hljs-string">&quot;]，新增元素：[&quot;</span>+num+<span class="hljs-string">&quot;]，当前线程：[&quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;]&quot;</span>);<br>                queue.add(queue.size(),num);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;队列已满，[&quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;]线程wait&quot;</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    lock.wait();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">consume</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>            lock.notify();<br>            <span class="hljs-keyword">if</span>(queue.size()&gt;<span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;队列长度：[&quot;</span>+queue.size()+<span class="hljs-string">&quot;]，消费元素：[&quot;</span>+queue.remove(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;]，当前线程：[&quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;]&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;队列为空，[&quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;]线程wait&quot;</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    lock.wait();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BlockQueue</span> <span class="hljs-variable">blockQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockQueue</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                blockQueue.produce(ThreadLocalRandom.current().nextInt());<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;生产者线程&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                blockQueue.consume();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;消费者线程&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;当前队列长度：[&quot;</span> + blockQueue.queue.size() + <span class="hljs-string">&quot;]，当前线程：[&quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;]&quot;</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;监控线程&quot;</span>).start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="异步锁"><a href="#异步锁" class="headerlink" title="异步锁"></a>异步锁</h2><p>文章中没有提到异步锁，我找了其他文章看一看了：</p><p><a href="https://www.cnblogs.com/IT-CPC/p/10898871.html">同步(Synchronous)和异步(Asynchronous) - 小cai一碟</a>这篇文章中解释了同步与异步 的区别：</p><p>同步和异步强调的是消息通信机制 (synchronous communication&#x2F; asynchronous communication)。<strong>所谓同步，就是在发出一个”调用”时，在没有得到结果之前，该“调用”就不返回。但是一旦调用返回，就得到返回值了</strong>。换句话说，就是由“调用者”主动等待这个“调用”的结果。而异步则是相反，”调用”在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，<strong>当一个异步过程调用发出后，调用者不会立刻得到结果。而是在”调用”发出后，”被调用者”通过状态、通知来通知调用者，或通过回调函数处理这个调用</strong></p><p>Java中的Atomic类提供了一组原子操作来实现异步锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> singleTest.threadTest;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Zepore</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/3/14 17:08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AtomicDemo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> count.incrementAndGet();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">decrement</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> count.decrementAndGet();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> count.intValue();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AtomicDemo</span> <span class="hljs-variable">atomicDemo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicDemo</span>();<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>                atomicDemo.increment();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;：结果：【&quot;</span> + atomicDemo.getValue() + <span class="hljs-string">&quot;】&quot;</span>);<br>        &#125;, <span class="hljs-string">&quot;加法线程&quot;</span>);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>                atomicDemo.decrement();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;：结果：【&quot;</span> + atomicDemo.getValue() + <span class="hljs-string">&quot;】&quot;</span>);<br>        &#125;, <span class="hljs-string">&quot;减法线程&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            thread1.join();<br>            thread2.join();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;：结果：【&quot;</span> + atomicDemo.getValue() + <span class="hljs-string">&quot;】&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">减法线程：结果：【0】<br>加法线程：结果：【0】<br>main：结果：【0】<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;3月14日工作内容&quot;&gt;&lt;a href=&quot;#3月14日工作内容&quot; class=&quot;headerlink&quot; title=&quot;3月14日工作内容&quot;&gt;&lt;/a&gt;3月14日工作内容&lt;/h1&gt;&lt;h2 id=&quot;前端判断出错导致编辑时出现误导提醒&quot;&gt;&lt;a href=&quot;#前端判断出错导致</summary>
      
    
    
    
    <category term="实习记录" scheme="https://blog.zepo.re/categories/%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Working" scheme="https://blog.zepo.re/categories/Working/"/>
    
    <category term="SpringBoot" scheme="https://blog.zepo.re/categories/Working/SpringBoot/"/>
    
    
    <category term="tech" scheme="https://blog.zepo.re/tags/tech/"/>
    
    <category term="实习" scheme="https://blog.zepo.re/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>3月12-13日工作内容</title>
    <link href="https://blog.zepo.re/2024/03/13/3%E6%9C%8812-13%E6%97%A5%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9.html/"/>
    <id>https://blog.zepo.re/2024/03/13/3%E6%9C%8812-13%E6%97%A5%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9.html/</id>
    <published>2024-03-13T08:28:22.000Z</published>
    <updated>2024-03-13T08:29:10.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3月12-13日工作内容"><a href="#3月12-13日工作内容" class="headerlink" title="3月12-13日工作内容"></a>3月12-13日工作内容</h1><h2 id="接入Facebook？"><a href="#接入Facebook？" class="headerlink" title="接入Facebook？"></a>接入Facebook？</h2><p>上次Line接入拿不到用户手机号，我问客户要不增加一个绑定手机号的页面，但是却得到这样的答复：</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240313160933847.png" alt="image-20240313160933847"></p><p>作为开发者，确实不好说什么，Line接入也就取消了。</p><p>可能是工作完成得比较快，经理又让我接入Facebook，并表示有现成代码可以参考。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240313161224758.png" alt="image-20240313161224758"></p><p>可能觉得我一个实习生之前的没接入Line的理由是能力问题吧。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240313161549033.png" alt="image-20240313161549033"></p><p>我寻找Facebook文档，第一件想确认的事情就是Facebook接入验证过后能不能拿到手机号，答案是不能的：</p><p><a href="https://developers.facebook.com/docs/graph-api/reference/v2.9/user">https://developers.facebook.com/docs/graph-api/reference/v2.9/user</a></p><p>打开代码之后，我找到登陆的那部分代码，发现之前跨境项目里面的代码其实是能邮箱进行用户判断的，很显然依旧是做不了：</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240313161630900.png" alt="image-20240313161630900"></p><p>OK，再次搁置，不过我提了两个方式，就看客户具体怎么选择了。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240313161908337.png" alt="image-20240313161908337"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240313161939598.png" alt="image-20240313161939598"></p><h2 id="前端选项页参数请求错误导致上下选项索引错误"><a href="#前端选项页参数请求错误导致上下选项索引错误" class="headerlink" title="前端选项页参数请求错误导致上下选项索引错误"></a>前端选项页参数请求错误导致上下选项索引错误</h2><p>客户反馈了很久的问题：</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240313154906107.png" alt="image-20240313154906107"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240313151848897.png" alt="image-20240313151848897"></p><p>我在复现的时候一直复现不出来，原因是客户描述的特别抽象，按照客户的反馈我没办法还原他们描述的异常，所以一直没去解决它。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240313155610566.png" alt="image-20240313155610566"></p><p>无奈之下，只能站在他们的角度折腾一下系统。连续点了近百次“下一个”之后依旧没有出现问题，我看了请求列表，这个上下的逻辑来自于对后端的请求，后端的处理大致是：</p><blockquote><p>除去一些基本的if-else逻辑之外，就是根据参数去数据库查询，获得id列表，然后遍历列表判断是否与传入id一致，一致的话在列表中的索引值加减1就得到了上下值。</p></blockquote><p>这个后端的判断也是做足了，</p><p>比如：上一个的判断中有对索引值初始化的判断<code>if (index&gt;0)</code>，下一个的判断中有对列表数量为空的考虑<code>if (ids.size()&gt;index+1)</code></p><p>那么很可能就是请求参数的问题了。</p><p>我回去查看浏览器后台网络选项，无意中发现点完下一个的人名标签页中，“下一个”的请求和一开始从客户列表中进入的“下一个”请求参数不一致！</p><p>破案了：前端点着点着就会传错参数，导致后端查询到的列表可能是另一个列表，怪不得出现的问题会这么奇怪..</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;3月12-13日工作内容&quot;&gt;&lt;a href=&quot;#3月12-13日工作内容&quot; class=&quot;headerlink&quot; title=&quot;3月12-13日工作内容&quot;&gt;&lt;/a&gt;3月12-13日工作内容&lt;/h1&gt;&lt;h2 id=&quot;接入Facebook？&quot;&gt;&lt;a href=&quot;#接入</summary>
      
    
    
    
    <category term="实习记录" scheme="https://blog.zepo.re/categories/%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Working" scheme="https://blog.zepo.re/categories/Working/"/>
    
    <category term="SpringBoot" scheme="https://blog.zepo.re/categories/Working/SpringBoot/"/>
    
    
    <category term="tech" scheme="https://blog.zepo.re/tags/tech/"/>
    
    <category term="实习" scheme="https://blog.zepo.re/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>3月8、11日工作内容</title>
    <link href="https://blog.zepo.re/2024/03/11/3%E6%9C%888%E3%80%8111%E6%97%A5%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9.html/"/>
    <id>https://blog.zepo.re/2024/03/11/3%E6%9C%888%E3%80%8111%E6%97%A5%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9.html/</id>
    <published>2024-03-11T09:06:22.000Z</published>
    <updated>2024-03-11T09:12:18.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3月8、11日工作内容"><a href="#3月8、11日工作内容" class="headerlink" title="3月8、11日工作内容"></a>3月8、11日工作内容</h1><p>周五，原本一个原本应该愉快的日子被加班和寒潮搞得人很不舒服。</p><h2 id="接口对接"><a href="#接口对接" class="headerlink" title="接口对接"></a>接口对接</h2><p>前面提到前同事走后，连同文档也带走了，我只好自己写一份。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240311094229855.png" alt="image-20240311094229855"></p><p>对接的时候出现了几个问题：</p><ol><li><p>前端请求的时候会拼接<code>/admin</code>，以保证请求的路径是在服务器上</p></li><li><p>我在校对传入参数中却漏掉了比如性别字符串的备注（FEMALE&#x2F;MALE）</p></li><li><p>对方要求加字段</p></li><li><p>最大的问题：传json的时候，需要转义json（转义测试参考：<code>https://lzltool.cn/string-escape</code>）</p></li><li><p>每日接收上限（直接测到上限了🤣）</p></li><li><p>对象明明数据错误但不承认，我把他的json原封不动传了之后确实成功的</p></li><li><p>系统管理员让帮忙排重，结果我把有跟进记录的也清了，好在用的是del_flag的方式而不是真的清了，最后还是帮他恢复了，所以涉及数据的，尽量还是做成功能吧</p></li></ol><h2 id="从接口导入数据，反馈数据不在"><a href="#从接口导入数据，反馈数据不在" class="headerlink" title="从接口导入数据，反馈数据不在"></a>从接口导入数据，反馈数据不在</h2><p>客户从接口中导入数据到系统内，反馈说某一时间的数据没有进系统</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240311155449880.png" alt="image-20240311155449880"></p><p>我在系统中却找得到这个客户，但是收到回复是</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240311155736076.png" alt="image-20240311155736076"></p><p>没办法，只能到数据库去查。先查客户表今天的数据。</p><p>对照时间找到两个叫该名字的数据，看到11：47的数据被分配给了某一员工，倒查员工表，查出是他自己配分给了一位武姓员工。很好奇他为什么老是说没有。</p><h2 id="大量数据导出，前端超时问题"><a href="#大量数据导出，前端超时问题" class="headerlink" title="大量数据导出，前端超时问题"></a>大量数据导出，前端超时问题</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240311153740161.png" alt="image-20240311153740161"></p><p>结果涉及到数据问题，经理让我做成功能让客户自己去导。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240311160339843.png" alt="image-20240311160339843"></p><p>之前我就在系统上看到一个客户导出的按钮，我试一下但是出现了后端没有任何响应的错误。</p><p>这里后端的逻辑是后端导出后存储服务器，然后nginx映射了一个路径在服务器的物理路径上面，这样后端通过返回文件的相对路径就可以了。</p><p>我就先到服务器上找一下这个路径，发现没有这个文件夹，也许第一个问题就是他。新增文件夹之后，重新测试接口，已经可以正常看到生成的文件了，但奇怪的是后端还是没有任何返回。于是我便到本地进行测试，却是正常的。</p><p>后端的问题排查完了，感觉是数据量太大后端返回时间比较久，导致请求超时了。于是我反馈给前端</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240311162349763.png" alt="image-20240311162349763"></p><p>结果不出所料是前端设置了超时的原因。过程中，因为导出的数据量特别大，前端测接口把服务器测崩了(⊙﹏⊙)</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240311163245572.png" alt="image-20240311163245572"></p><p>之后修好所有的bug给经理，经理却还要我只导手机号…</p><p>看了代码我就给接口加了个字段，然后疯狂if在保证其他业务不受影响的情况（因为一个后端多个系统）下完成了这需求。</p><h2 id="spring-boot项目启动报错-Failed-to-load-property-source-from-location-‘classpath-application-yml’"><a href="#spring-boot项目启动报错-Failed-to-load-property-source-from-location-‘classpath-application-yml’" class="headerlink" title="spring boot项目启动报错:Failed to load property source from location ‘classpath:&#x2F;application.yml’"></a>spring boot项目启动报错:Failed to load property source from location ‘classpath:&#x2F;application.yml’</h2><p>yaml文件被我复制多了一行，看到网上有提到一个网站可以用来测试yaml文件：</p><p><a href="https://www.yamllint.com/">https://www.yamllint.com/</a></p><h2 id="SQL语句拼接的问题"><a href="#SQL语句拼接的问题" class="headerlink" title="SQL语句拼接的问题"></a>SQL语句拼接的问题</h2><p>这个系统存在着挺多未判空的字段，在执行SQL语句的时候特别容易出错</p><p>比如：</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240311153039127.png" alt="image-20240311153039127"></p><p>这个问题的原因就是SQL语句的问题，这个主管下面没有员工就会出现这个问题</p><p>再比如：</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240311153320568.png" alt="image-20240311153320568"></p><p>这个也是SQL语句拼接的问题，这个主管不是区长，又是这个区的部长，相当于一个区没有区长，就会出现没有adminId的情况。</p><p>所以养成好习惯，多做判空吧！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;3月8、11日工作内容&quot;&gt;&lt;a href=&quot;#3月8、11日工作内容&quot; class=&quot;headerlink&quot; title=&quot;3月8、11日工作内容&quot;&gt;&lt;/a&gt;3月8、11日工作内容&lt;/h1&gt;&lt;p&gt;周五，原本一个原本应该愉快的日子被加班和寒潮搞得人很不舒服。&lt;/p&gt;</summary>
      
    
    
    
    <category term="实习记录" scheme="https://blog.zepo.re/categories/%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Working" scheme="https://blog.zepo.re/categories/Working/"/>
    
    <category term="SpringBoot" scheme="https://blog.zepo.re/categories/Working/SpringBoot/"/>
    
    
    <category term="tech" scheme="https://blog.zepo.re/tags/tech/"/>
    
    <category term="实习" scheme="https://blog.zepo.re/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>3月7日工作内容</title>
    <link href="https://blog.zepo.re/2024/03/07/3%E6%9C%887%E6%97%A5%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9.html/"/>
    <id>https://blog.zepo.re/2024/03/07/3%E6%9C%887%E6%97%A5%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9.html/</id>
    <published>2024-03-07T01:21:22.000Z</published>
    <updated>2024-03-11T09:05:53.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3月7日工作内容"><a href="#3月7日工作内容" class="headerlink" title="3月7日工作内容"></a>3月7日工作内容</h1><h2 id="Java复习"><a href="#Java复习" class="headerlink" title="Java复习"></a>Java复习</h2><h3 id="新发现：字符输出流及字符缓冲输出流没关闭可能会出现数据未刷新"><a href="#新发现：字符输出流及字符缓冲输出流没关闭可能会出现数据未刷新" class="headerlink" title="新发现：字符输出流及字符缓冲输出流没关闭可能会出现数据未刷新"></a>新发现：字符输出流及字符缓冲输出流没关闭可能会出现数据未刷新</h3><p>输出文件的时候如果没有自行调用<code>bufferedWriter.flush()</code>或者<code>bufferedWriter.close()</code>，可能会出现文件内容没有写入的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String[] str = &#123;<span class="hljs-string">&quot;春眠不觉晓&quot;</span>, <span class="hljs-string">&quot;处处闻啼鸟&quot;</span>, <span class="hljs-string">&quot;夜来风雨声&quot;</span>, <span class="hljs-string">&quot;花落知多少&quot;</span>&#125;;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;data/2.txt&quot;</span>);<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fileWriter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileWriter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file);<br>            bufferedWriter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(fileWriter);<br>            <span class="hljs-keyword">for</span> (String s : str) &#123;<br>                bufferedWriter.write(s);<br>                bufferedWriter.newLine();<br>            &#125;<br>            <span class="hljs-comment">// 刷新进去</span><br>            bufferedWriter.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;写文件的时候出现了异常&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 或者执行关闭，让他自行写入</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                bufferedWriter.close();<br>                fileWriter.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><p><code>ObjectIn(Out)putStream</code>是序列化操作流的类，用来将Java对象持久化存储在计算机。</p><ul><li><p>ObjectOutputStream的Demo，写入对象的过程称为序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;String&gt; strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        strings.add(<span class="hljs-string">&quot;I&#x27;am Linezepore.&quot;</span>);<br>        strings.add(<span class="hljs-string">&quot;I come from China.&quot;</span>);<br>        strings.add(<span class="hljs-string">&quot;I love coding.&quot;</span>);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data/object.txt&quot;</span>);<br>            objectOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fileOutputStream);<br>            objectOutputStream.writeObject(strings);<br>            objectOutputStream.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fileOutputStream.close();<br>                objectOutputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                System.out.println(<span class="hljs-string">&quot;流关闭时候出现异常&quot;</span>);<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>ObjectInputStream的Demo，将持久化的对象读进程序的过程叫反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;data/object.txt&quot;</span>);<br>            objectInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fileInputStream);<br>            ArrayList&lt;String&gt;  strs = (ArrayList&lt;String&gt;) objectInputStream.readObject();<br>            System.out.println(<span class="hljs-string">&quot;strs的第一个元素为：&quot;</span>+strs.get(<span class="hljs-number">0</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;找不到该文件&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;读文件时候出现了异常&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>在对自定义的类对象执行序列化之前需要让该类先实现Serializable接口，否则会出现报错：</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240307095254118.png" alt="image-20240307095254118"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.setAge(<span class="hljs-number">11</span>);<br>        student.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        student.setGender(<span class="hljs-literal">false</span>);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;data/object_out.txt&quot;</span>);<br>            objectOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fileOutputStream);<br>            objectOutputStream.writeObject(student);<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;文件找不到&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;写文件异常&quot;</span>);<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fileOutputStream.close();<br>                objectOutputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240307135548544.png" alt="image-20240307135548544"></p><h2 id="selectOne出现多个数据的问题"><a href="#selectOne出现多个数据的问题" class="headerlink" title="selectOne出现多个数据的问题"></a>selectOne出现多个数据的问题</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240307140032878.png" alt="image-20240307140032878"></p><p>日志显示如下：</p><blockquote><p>nested exception is org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 2</p></blockquote><p>除了这个错误之外，没有其他的信息了，很头大。我的处理方式是捕获异常之后显性地打印出来，这样的好处是可以帮助我们看到是第几行哪一个方法出现的错误：<code>e.printStackTrace();</code></p><p>然后得到很长很长的冗余信息，我只好把关键性报错的信息丢给GPT，得出结论（信息已脱敏）：</p><blockquote><p>堆栈信息中，异常发生在 <code>XXServiceImpl.updateXXStatistics</code> 方法中</p></blockquote><p>之后就是疯狂的看别人的臭长代码时间了，既然问题是出在期望得到一个查询结果的时候却返回了列表，那就到Service的实体类对应的表里看看，果不其然，有两行重复的数据，删掉一行之后，便可以正常分配了。</p><p>问题到这其实就解决了，但细究其实还有一个问题：重复的数据是怎么产生的？</p><p><code>XXServiceImpl.updateXXStatistics</code> 这个方法的逻辑是更新统计信息时候，先根据顾问的id和今天这个日期获取统计对象，如果获取不到再插入新的</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240307151253496.png" alt="image-20240307151253496"></p><p>实在确定不了客户是在哪里分配导致出错的，我就暂且怀疑是判空这里出错了吧：索性加上一句<code>(ObjectUtil.isNotEmpty(todayadminstatics) || todayadminstatics!= null)</code></p><h2 id="写个接口文档"><a href="#写个接口文档" class="headerlink" title="写个接口文档"></a>写个接口文档</h2><p>老员工对接的时候没有客户导入的接口文档保存下来，今天要对接接口问题，这锅只能我背&#x2F;(ㄒoㄒ)&#x2F;~~</p><p>经理让我写一份，我看<a href="https://gitee.com/xiaoym/knife4j">Knife4j</a>文档里面的参数列表却是没有明确的，崩溃！</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240307172841173.png" alt="image-20240307172841173"></p><p>我只好把代码丢给GPT，让他帮我列出参数，之后再一个一个检查。</p><p>上班好累啊。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;3月7日工作内容&quot;&gt;&lt;a href=&quot;#3月7日工作内容&quot; class=&quot;headerlink&quot; title=&quot;3月7日工作内容&quot;&gt;&lt;/a&gt;3月7日工作内容&lt;/h1&gt;&lt;h2 id=&quot;Java复习&quot;&gt;&lt;a href=&quot;#Java复习&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="实习记录" scheme="https://blog.zepo.re/categories/%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Working" scheme="https://blog.zepo.re/categories/Working/"/>
    
    <category term="SpringBoot" scheme="https://blog.zepo.re/categories/Working/SpringBoot/"/>
    
    
    <category term="tech" scheme="https://blog.zepo.re/tags/tech/"/>
    
    <category term="实习" scheme="https://blog.zepo.re/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>3月4~6日工作内容</title>
    <link href="https://blog.zepo.re/2024/03/06/3%E6%9C%884~6%E6%97%A5%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9.html/"/>
    <id>https://blog.zepo.re/2024/03/06/3%E6%9C%884~6%E6%97%A5%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9.html/</id>
    <published>2024-03-06T01:21:22.000Z</published>
    <updated>2024-03-18T08:08:39.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3月4-6日工作内容"><a href="#3月4-6日工作内容" class="headerlink" title="3月4~6日工作内容"></a>3月4~6日工作内容</h1><h2 id="接入Line登录与Vue前端的交互"><a href="#接入Line登录与Vue前端的交互" class="headerlink" title="接入Line登录与Vue前端的交互"></a>接入Line登录与Vue前端的交互</h2><p>上周基本完成Line登录的接入，剩下的只有业务的处理。</p><p>今天在写相关的业务的时候发现，Line和国内微信不太一样直接获取得到的userId就是openId，不需要通过code再次获取，但是要命的一点是Line开发者账号获取到的用户信息里面没有手机号。</p><p>客户说只能一时间没办法认证企业Line，只能下次更新了。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240304155646269.png" alt="image-20240304155646269"></p><p>我就先把代码放着，捋一下后续的思路：</p><blockquote><p>App通过<code>/lineLogin/gotoauthpage</code>请求Line登录地址，服务端获取回调信息，服务端携带用户信息重定向到App页面，App页面获取参数请求登录接口</p></blockquote><p>之所以要这么做，是为了防止出现跨域的问题。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240304161548505.png" alt="image-20240304161548505"></p><p>随之就是一个难点：<strong>在<code>RestController</code>通常是返回Json或者字符串，如果想要重定向到某一个地址，该怎么做</strong>。</p><p>一个方式是通过<code>HttpServletResponse</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240304161202505.png" alt="image-20240304161202505"></p><p>另一个是GPT提到的，通过<code>HttpHeaders</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240304161409729.png" alt="image-20240304161409729"></p><p>这两种方式我测试都是可行的，各取所好就行。</p><h2 id="Java复习"><a href="#Java复习" class="headerlink" title="Java复习"></a>Java复习</h2><p>这段时间没有太多的bug要改，索性复习一下专业课吧。</p><h3 id="文件比较"><a href="#文件比较" class="headerlink" title="文件比较"></a>文件比较</h3><p>在写File的相关操作的时候，发现一个方法<code>compareTo</code>，但是作用的效果不符合预期，主要出现在这三种情况：</p><ol><li><p>file1是通过相对路径创建的，file2是通过<code>file1.getAbsolutePath()</code>创建的：不一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(file.getAbsolutePath());<br>System.out.println(<span class="hljs-string">&quot;比较两个文件：&quot;</span> + file.equals(f2)); <span class="hljs-comment">//FALSE</span><br></code></pre></td></tr></table></figure></li><li><p>file1是通过相对路径创建的，file2是通过<code>file1.getCanonicalPath()</code>创建的：不一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(file.getCanonicalPath());<br>System.out.println(<span class="hljs-string">&quot;比较两个文件：&quot;</span> + file.equals(f2)); <span class="hljs-comment">//FALSE</span><br></code></pre></td></tr></table></figure></li><li><p>file1是通过相对路径的目录+文件名两步创建的，file2是通过<code>file1.getCanonicalPath()</code>创建的：不一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(file.getCanonicalPath());<br>System.out.println(<span class="hljs-string">&quot;比较两个文件：&quot;</span> + file.equals(f2)); <span class="hljs-comment">//FALSE</span><br></code></pre></td></tr></table></figure></li></ol><p>也就是说file1是通过相对路径创建的情况下，file2也需要是通过相对路径创建的，两者<code>compareTo</code>或<code>equals</code>的结果才会使一样。</p><p>所以像这种情况需要比较的其实是绝对路径，即<code>file.getAbsolutePath().equals(f2.getCanonicalPath()</code>或者<code>file.getCanonicalPath().equals(f2.getCanonicalPath()</code>，又或者<code>file.getAbsolutePath().equals(f2.getAbsolutePath()</code></p><p>然后测完还看到一篇类似的文章，印证了我的想法。</p><h3 id="字节流与字符流"><a href="#字节流与字符流" class="headerlink" title="字节流与字符流"></a>字节流与字符流</h3><p>Java IO库有两个支系：</p><ul><li><p>面向字节流的InputStream和OutputStream</p><p>字节小于字符，读写的单位自然就是字节，如果读取的内容是英文的情况下，一个字母自然就是一个字节，如果文本是中文的情况下，那就不是了，直接把读出来的打印结果会是乱码，因为中文不是一个字节一个文字的。</p><ul><li>FileInputStream的例子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;data/2.txt&quot;</span>);<br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>((file));<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; file.length(); i++) &#123;<br>                <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>)(fileInputStream.read());<br>                System.out.print(ch + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>            fileInputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;文件打开的时候发生了异常&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>FileOutputStream的例子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;data/3.txt&quot;</span>);<br>            <span class="hljs-keyword">if</span>(!file.exists()) &#123;<br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">newFile</span> <span class="hljs-operator">=</span> file.createNewFile();<br>                <span class="hljs-keyword">if</span> (newFile) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;文件不存在，创建新文件&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;learning java fileOutputStream&quot;</span>;<br>            <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file);<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            // 等同于直接写入字节</span><br><span class="hljs-comment">            for (int i = 0; i &lt; str.length(); i++) &#123;</span><br><span class="hljs-comment">                char ch = str.charAt(i);</span><br><span class="hljs-comment">                fileOutputStream.write(ch);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            &#125;*/</span><br>            fileOutputStream.write(str.getBytes());<br>            fileOutputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;找不到该文件&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;文件创建的时候出现了错误&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>面向字符的Reader和Writer与缓冲流的结合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            File file = new File(&quot;data/1.txt&quot;);</span><br><span class="hljs-comment">            BufferedReader bufferedReader = new BufferedReader(new FileReader(file));</span><br><span class="hljs-comment">            int ch;</span><br><span class="hljs-comment">            while ((ch = bufferedReader.read()) != -1) &#123;</span><br><span class="hljs-comment">                System.out.print((char) ch);</span><br><span class="hljs-comment">            &#125;*/</span><br>            String str;<br>            <span class="hljs-keyword">while</span> ((str = bufferedReader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                System.out.println(str);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;文件找不到&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;读取文件时发生了异常&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="计算机网络复习"><a href="#计算机网络复习" class="headerlink" title="计算机网络复习"></a>计算机网络复习</h2><h3 id="二进制中的与、或、非、异或的计算方式"><a href="#二进制中的与、或、非、异或的计算方式" class="headerlink" title="二进制中的与、或、非、异或的计算方式"></a>二进制中的与、或、非、异或的计算方式</h3><p>这个博主写的文章讲得特别清楚：<a href="https://blog.csdn.net/weixin_44061521/article/details/119453831">二进制中的与、或、非、异或运算_二进制或运算-CSDN博客</a></p><ul><li>与（&amp;）：两者全真才为真</li><li>或（|）：其一为真便为真</li><li>非（~）：取反，真变假 假变真</li><li>异或（^）：互异才为真</li></ul><h3 id="子网划分的四种主要题型"><a href="#子网划分的四种主要题型" class="headerlink" title="子网划分的四种主要题型"></a>子网划分的四种主要题型</h3><p>这篇文章讲了子网划分的时候出现的四种主要题型：<a href="https://blog.csdn.net/dyyay521/article/details/94381876">计算机网络——子网划分（内含习题讲解）-CSDN博客</a></p><ol><li>知道某主机IP地址和子网掩码，求网络地址和广播地址</li><li>知道某类网络及子网掩码，求可以划分的子网个数及每个子网的子网号</li><li>将某一特定的网络IP，要划分成为指定个数的子网，求每个子网的有效主机地址范围及其对应的子网掩码</li><li>知道网络地址，公司要划几个网，什么部门至少要几个网络</li></ol><h3 id="IP地址的一些概念"><a href="#IP地址的一些概念" class="headerlink" title="IP地址的一些概念"></a>IP地址的一些概念</h3><ol><li><p>主机位及网络位：看子网掩码，子网掩码为“1”的部分就是网络位，为“0”部分就是主机位</p></li><li><p>网络号：IP&amp;子网掩码</p></li><li><p>广播号：IP的网络号的主机位取反</p></li><li><p>主机数：2^(32-子网掩码位数)-2</p></li><li><p>子网划分：</p><p>假设我们要将原来的网络（192.168.1.0）划分为两个子网。为了实现这一点，我们可以将子网掩码位数增加1，变为25位子网掩码。</p><p>新的子网掩码位数&#x3D;24+1&#x3D;25新的子网掩码位数&#x3D;24+1&#x3D;25</p><p>新的主机数&#x3D;2(32−25)−2&#x3D;27−2&#x3D;128−2&#x3D;126新的主机数&#x3D;2(32−25)−2&#x3D;27−2&#x3D;128−2&#x3D;126</p><p>现在，每个子网可以容纳126个主机。更新网络设备的子网掩码，例如，第一个子网的网络号为192.168.1.0，第二个子网的网络号为192.168.1.128。这样，我们成功地将原来的网络划分为两个子网，每个子网有更多的IP地址可用。</p></li></ol><h3 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h3><ul><li>A类：（1.0.0.0<del>126.0.0.0）（默认子网掩码：255.0.0.0）第一个字节为网络号，后三个字节为主机号。该类地址的最前面为“0”，所以地址的网络号的取值位于128</del>191之间，一般用于大型网络</li><li>B类：（128.0.0.0<del>191.255.0.0）（默认子网掩码：255.255.0.0）前两个字节为网络号，后两个字节为主机号。该类地址的最前面为“10”，所以地址的网络号的取值位于128</del>191之间，一般用于中型网络</li><li>C类：（192.0.0.0<del>223.255.255.0）（默认子网掩码：255.255.255.0）前三个字节为网络号，最后一个字节为主机号。该类地址的最前面为“110”，所以地址的网络号的取值位于192</del>223，一般用于小型网络</li><li>D类：多路广播地址，该类地址最前面为“1110”，所以地址的网络号取值为224-239</li><li>E类：保留地址，该类地址的最前面为“1111”，所以地址的网络号取值为240~255</li></ul><p>在IP地址的三种主要类型中，各保留了一段区域作为私有地址：</p><p>A类地址：10.0.0.0~10.255.255.255</p><p>B类地址：172.16.0.0~172.31.255.255</p><p>C类地址：192.168.0.0~192.168.255.255</p><h2 id="一键删除"><a href="#一键删除" class="headerlink" title="一键删除"></a>一键删除</h2><p>今天客户的一个需求，项目经理跟我描述时候是这样的</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240318160817158.png" alt="image-20240318160817158"></p><p>昨晚功能来到客户这边的反馈却是：</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240306083339145.png" alt="image-20240306083339145"><br>所以需求就变成了对现在列出客户进行批量删除，那么就需要看看获取的接口列出的数据有哪些。很这里面的数据到底有哪一些，奇怪的是这个接口请求时候携带的参数中，除了分页并没有特别明确的限制条件，难道是列出全部数据吗？</p><p>带着这个疑问，那我就将数据库列出表里未删除的数据量跟系统现在这个区域的数量进行比较，数量是一致的，接口写完，剩下的就是前端的事情了。</p><p>涉及这种敏感的大批量操作一定要小心再小心，客户操作的时候可以备份一下表，防止他们又反悔了。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240306085047403.png" alt="image-20240306085047403"></p><h2 id="与前端发生的一些问题"><a href="#与前端发生的一些问题" class="headerlink" title="与前端发生的一些问题"></a>与前端发生的一些问题</h2><p>最近发生了一些不愉快的事情，公司新来的所谓干了三年的前端，水得一匹，装个前端环境一直抱怨着抱怨那，不是电脑不行就是网络不行。原本这跟我无关，我只需要做好自己的事情就行，可惨的是我一个后端需要跟他对接。</p><p>一开始我抱着一种热心的成分，也刚好有空，帮他解决各种问题，结果第三天他环境还是没配好，他最后竟然一直背后跟组长说是后端的问题？？？我没跟他交接好。可是在这种情况下，我一个后端怎么可能知道前端要交接什么，真是农夫与蛇。</p><p>那天他说他电脑要连的上我这边测试环境，我帮他在电脑用小皮配置了nginx，结果这煞毕连webpack配置不会改，一直BB说是我的问题，我真的一肚子火！！！但我忍住了，跟那组长要来前端的权限，弄完他搞了两天没搞完的前端环境，改了webpack配置甩给他看是不是后端问题。</p><p>然后来到今天，在做需求的时候，无数据的时候给他传了空数组</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgs%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17096283562179.png" alt="企业微信截图_17096283562179"></p><p>然后他说不行，要这样的</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240306090447984.png" alt="image-20240306090447984"></p><p>我就纳闷了，这两个data不都是空数组吗，结果人家跟我爆了一句我没传<code>__ob__</code>给他，给我整无语了，我是不是还得把原型传给他？</p><p>职场不易，如果后面还有类似情况，我就直接把他的事情反馈出来，我一实习生其实也大不了走人。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;3月4-6日工作内容&quot;&gt;&lt;a href=&quot;#3月4-6日工作内容&quot; class=&quot;headerlink&quot; title=&quot;3月4~6日工作内容&quot;&gt;&lt;/a&gt;3月4~6日工作内容&lt;/h1&gt;&lt;h2 id=&quot;接入Line登录与Vue前端的交互&quot;&gt;&lt;a href=&quot;#接入Li</summary>
      
    
    
    
    <category term="实习记录" scheme="https://blog.zepo.re/categories/%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Working" scheme="https://blog.zepo.re/categories/Working/"/>
    
    <category term="SpringBoot" scheme="https://blog.zepo.re/categories/Working/SpringBoot/"/>
    
    
    <category term="tech" scheme="https://blog.zepo.re/tags/tech/"/>
    
    <category term="实习" scheme="https://blog.zepo.re/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Web应用接入Line登录</title>
    <link href="https://blog.zepo.re/2024/03/01/web%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5Line%E7%99%BB%E5%BD%95.html/"/>
    <id>https://blog.zepo.re/2024/03/01/web%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5Line%E7%99%BB%E5%BD%95.html/</id>
    <published>2024-03-01T10:21:22.000Z</published>
    <updated>2024-03-01T10:22:08.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web应用接入Line登录"><a href="#Web应用接入Line登录" class="headerlink" title="Web应用接入Line登录"></a>Web应用接入Line登录</h1><p>台湾客户要求在原App的基础上接入Line登录，接入第三方登录的需求工作至今是第一次遇到（毕竟现在手上负责的两个项目都是维护阶段），好在除了登录之后业务的处理之外，登录问题顺利解决了。</p><p>接到需求的我第一时间找的是现成的技术分享，但好像比较少，最终我还是选择一点点啃官方的纯英文文档：<a href="https://developers.line.biz/en/docs/line-login/getting-started/%E5%92%8Chttps://developers.line.biz/en/docs/line-login/integrate-line-login/">https://developers.line.biz/en/docs/line-login/getting-started/和https://developers.line.biz/en/docs/line-login/integrate-line-login/</a></p><p>博主身在内地，所以这篇博文，是博主在内地接入Line的文档实践。</p><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>开始之前有些特殊的名字术语解释如下，我就不翻译了，尽可能保持原汁原味：</p><table><thead><tr><th align="left">Requirement</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">LINE account</td><td align="left">An account for the LINE app. You need a LINE account to try out the starter app. To create a LINE account, <a href="https://line.me/">download (opens new window)</a>LINE for iOS or LINE for Android and sign up. For more information about creating a new LINE account, see <a href="https://guide.line.me/ja/signup-and-migration/line-signup.html">Create a new account (opens new window)</a>(only available in Japanese) in the LINE user’s guide.</td></tr><tr><td align="left">Provider</td><td align="left">Provider is a concept that describes the person or organization that provides the application. Create a provider on the <a href="https://developers.line.biz/console/">LINE Developers Console</a>. A LINE user has a different user ID for each provider.</td></tr><tr><td align="left">LINE Login channel</td><td align="left">A channel forms the connection between your app and the LINE Platform. Create a channel within the provider. You need to create a channel for each app. Create a LINE Login channel on the <a href="https://developers.line.biz/console/register/line-login/channel/">LINE Developers Console</a>. <br />Notes:<br />- If you’ve never logged in to the LINE Developers Console, you’ll be asked to register as a developer first.<br />– The steps for creating your LINE Login channel are explained in <a href="https://developers.line.biz/en/docs/line-login/getting-started/#step-1-create-channel">Step 1: Create your LINE Login channel</a>.<br />- When creating a LINE Login channel to use a starter app, makes sure you select <strong>Web app</strong> under <strong>App types</strong>.</td></tr><tr><td align="left">Heroku account</td><td align="left"><a href="https://www.heroku.com/">Heroku (opens new window)</a>is a service that offers hosting for web apps. Deploying the starter app to Heroku means you don’t need your own server.</td></tr><tr><td align="left">Heroku CLI</td><td align="left">The <a href="https://devcenter.heroku.com/articles/heroku-cli">Heroku Command Line Interface (CLI) (opens new window)</a>is necessary for using certain Heroku functions.</td></tr></tbody></table><p>就着我对文档的理解，我小小提一嘴：实际使用的时候Channel是最小单位，openId是用户在Channel唯一标识，在不同Channel当中同一个用户的openId是不同的。</p><h2 id="步骤一：创建Line-Login-Channel"><a href="#步骤一：创建Line-Login-Channel" class="headerlink" title="步骤一：创建Line Login Channel"></a>步骤一：创建Line Login Channel</h2><p><a href="https://developers.line.biz/en/docs/line-developers-console/overview/#channel">Channel</a>是应用程序与 LINE 平台连接的通道，第一步要做的就是在<a href="https://developers.line.biz/console/register/line-login/channel/">控制台</a>为Web Apps创建Channel。</p><ol><li><p>登录<a href="https://developers.line.biz/console/">Line开发者控制台</a></p></li><li><p>选择一个Provider，并选择在<strong>Channels</strong> 选项中选择<strong>LINE Login</strong></p></li><li><p>填入必填的信息，信息的解释如下：</p><table><thead><tr><th align="left">Item</th><th align="left">Required?</th><th align="left">Description</th><th align="left">Location displayed to users</th></tr></thead><tbody><tr><td align="left"><strong>Channel type</strong></td><td align="left">✅</td><td align="left">The channel type. Select LINE Login to create your LINE Login Channel.</td><td align="left">-</td></tr><tr><td align="left"><strong>Provider</strong></td><td align="left">✅</td><td align="left">The channel’s <a href="https://developers.line.biz/en/docs/line-developers-console/overview/#provider">provider</a></td><td align="left">Permission consent screen when launching LINE Login or LIFF App</td></tr><tr><td align="left"><strong>Region to provide the service</strong></td><td align="left">✅</td><td align="left">The region you want to provide your LINE Login service. One of: JapanThailandTaiwanIndonesia*If you want to provide your service in multiple regions, create a channel for each region.</td><td align="left">-</td></tr><tr><td align="left"><strong>Company or owner’s country or region</strong></td><td align="left">✅</td><td align="left">Country or region of the company or owner that manage the channel</td><td align="left">Permission consent screen when launching LINE Login or LIFF App</td></tr><tr><td align="left"><strong>Channel icon</strong></td><td align="left">❌</td><td align="left">The channel’s icon</td><td align="left">Permission consent screen when launching LINE Login or LIFF App</td></tr><tr><td align="left"><strong>Channel name</strong></td><td align="left">✅</td><td align="left">The channel’s name *Channel name can’t contain “LINE” or similar strings.</td><td align="left">Permission consent screen when launching LINE Login or LIFF App</td></tr><tr><td align="left"><strong>Channel description</strong></td><td align="left">✅</td><td align="left">The channel’s description</td><td align="left">Permission consent screen when launching LINE Login or LIFF App</td></tr><tr><td align="left"><strong>App types</strong></td><td align="left">✅</td><td align="left">The type of app you plan to integrate LINE Login with. One of: Web appMobile app*In the example of deploying a starter app, select <strong>Web app</strong>.</td><td align="left">-</td></tr><tr><td align="left"><strong>Email address</strong></td><td align="left">✅</td><td align="left">Email address to receive important updates about the channel</td><td align="left">-</td></tr><tr><td align="left"><strong>Privacy policy URL</strong></td><td align="left">See description</td><td align="left">The URL of the app’s privacy policy. Required if your provider is a <a href="https://developers.line.biz/en/docs/line-developers-console/overview/#certified-provider">certified provider</a>.</td><td align="left">Permission consent screen when launching LINE Login or LIFF App</td></tr><tr><td align="left"><strong>Terms of use URL</strong></td><td align="left">❌</td><td align="left">The URL of the app’s terms of use</td><td align="left">Permission consent screen when launching LINE Login or LIFF App</td></tr><tr><td align="left"><strong>LINE Developers Agreement</strong></td><td align="left">✅</td><td align="left">Read and agree to the <a href="https://terms2.line.me/LINE_Developers_Agreement?lang=en">LINE Developers Agreement (opens new window)</a>.</td><td align="left">-</td></tr><tr><td align="left"><strong>LY Corporation Privacy Policy</strong></td><td align="left">See description</td><td align="left">Required only if you’ve selected Thailand as <strong>Region to provide the service</strong>. Read and acknowledge <a href="https://line.me/th/terms/policy/">LY Corporation Privacy Policy (opens new window)</a>.</td><td align="left">-</td></tr></tbody></table></li></ol><p>这一步的一些注意事项我截取原文放下来</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240301170843885.png" alt="image-20240301170843885"></p><h2 id="步骤二：部署starter应用"><a href="#步骤二：部署starter应用" class="headerlink" title="步骤二：部署starter应用"></a>步骤二：部署starter应用</h2><p>接下来通过配置在第一步创建Channel的时候生成的channel ID和channel secret，就可以部署demo程序了</p><ol><li>git克隆以下任一项目，第二个比较方便</li></ol><ul><li><p>官方的仓库：<a href="https://github.com/line/line-login-starter%EF%BC%8C%E5%8F%AF%E8%83%BD%E4%B8%8D%E8%83%BD%E7%9B%B4%E6%8E%A5%E8%B7%91%E8%B5%B7%E6%9D%A5">https://github.com/line/line-login-starter，可能不能直接跑起来</a></p></li><li><p>我调了之后可以正常跑了，并且也增加了打包成为.zip文件的配置方便部署服务器，只要修改好ymal文件里面的三个关键信息、换上本地代理软件http端口就行：<a href="https://github.com/linzepore/line-login-starter-zepore">https://github.com/linzepore/line-login-starter-zepore</a></p></li></ul><ol start="2"><li>在<code>application.yml</code>中填入第一步创建Channel的时候生成的channel ID和channel secret</li><li>修改<code>com.linecorp.sample.login.infra.http.Client</code>中的http代理端口（V2RayN的是10809）</li></ol><p>关于Java程序设置代理，可以看看这篇文章：<a href="https://www.cnblogs.com/liangzai-cool/p/6291384.html">Java配置代理</a></p><h2 id="步骤三：检查Channel设置，并填入回调地址"><a href="#步骤三：检查Channel设置，并填入回调地址" class="headerlink" title="步骤三：检查Channel设置，并填入回调地址"></a>步骤三：检查Channel设置，并填入回调地址</h2><ol><li>进入第一步创建的Channel</li><li>点击<code>Basic setting</code>选项，<code>App types</code>一行勾上<code>Web app</code></li><li>点击<code>LINE Login</code>选项，填入回调地址（跟<code>application.yml</code>保持一致）</li></ol><p>在demo程序中<code>/auth</code>Controller就是回调用的，同时也要在<code>application.yml</code>中进行配置</p><p>控制台中<code>Basic setting</code>选项的信息解释如下</p><p>The <strong>Basic settings</strong> tab contains basic information about your channel. Here’s the information you’ll find:</p><table><thead><tr><th align="left">Item</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><strong>Channel ID</strong></td><td align="left">Unique identifier for the channel</td></tr><tr><td align="left"><strong>Region to provide the service</strong></td><td align="left">The region you want to provide your LINE Login service. You can only set the region when creating a new channel.</td></tr><tr><td align="left"><strong>Company or owner’s country or region</strong></td><td align="left">Country or region of the company or owner that manage the channel</td></tr><tr><td align="left"><strong>Channel icon</strong></td><td align="left">The channel’s icon</td></tr><tr><td align="left"><strong>Channel name</strong></td><td align="left">The channel’s name</td></tr><tr><td align="left"><strong>Channel description</strong></td><td align="left">The channel’s description</td></tr><tr><td align="left"><strong>Email address</strong></td><td align="left">Email address to receive important updates about the channel</td></tr><tr><td align="left"><strong>Privacy policy URL</strong></td><td align="left">The URL of the app’s privacy policy</td></tr><tr><td align="left"><strong>Terms of use URL</strong></td><td align="left">The URL of the app’s terms of use</td></tr><tr><td align="left"><strong>App types</strong></td><td align="left">The type of app you plan to integrate LINE Login with</td></tr><tr><td align="left"><strong>Permissions</strong></td><td align="left">The type of user data this channel can access</td></tr><tr><td align="left"><strong>Channel secret</strong></td><td align="left">A unique secret key you can use to grant an app access to your channel</td></tr><tr><td align="left"><strong>Assertion Signing Key</strong></td><td align="left">The UUIDs associated with your assertion signing key pair</td></tr><tr><td align="left"><strong>Your user ID</strong></td><td align="left">Your LINE account’s user ID</td></tr><tr><td align="left"><strong>Linked LINE Official Account</strong></td><td align="left">Your LINE Official Account linked to this channel. You can only link a LINE Official Account from the same provider.</td></tr><tr><td align="left"><strong>Localization</strong></td><td align="left">You can add other languages to provide multi-language support for your channel.</td></tr><tr><td align="left"><strong>Email address permission</strong></td><td align="left">Apply for permission to request a user’s email using OpenID Connect.</td></tr><tr><td align="left"><strong>Delete</strong></td><td align="left">Delete this channel.</td></tr></tbody></table><h2 id="步骤四：尝试登录"><a href="#步骤四：尝试登录" class="headerlink" title="步骤四：尝试登录"></a>步骤四：尝试登录</h2><ol><li>浏览器进入应用根地址</li></ol><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240301180927019.png" alt="LINE Login starter app login"></p><ol start="2"><li><p>点击按钮，通过提示完成Line登录</p></li><li><p>尝试对Token进行操作：</p><ol><li>Verify the user access token</li><li>Refresh the user access token</li><li>Revoke the access token (log out)</li></ol></li><li><p>查看控制台拿到的用户信息</p></li></ol><h2 id="步骤五：进一步配置程序"><a href="#步骤五：进一步配置程序" class="headerlink" title="步骤五：进一步配置程序"></a>步骤五：进一步配置程序</h2><p>关于程序的进一步配置，可以通过<a href="https://developers.line.biz/en/docs/line-login/integrate-line-login">文档</a>去了解不同模块的设置和效果，我就不展开了，比如设置不同的Scopes获取不同需要的信息，我把它截取出来</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240301181629746.png" alt="image-20240301181629746"></p><p>OK，写完下班，快乐周末~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Web应用接入Line登录&quot;&gt;&lt;a href=&quot;#Web应用接入Line登录&quot; class=&quot;headerlink&quot; title=&quot;Web应用接入Line登录&quot;&gt;&lt;/a&gt;Web应用接入Line登录&lt;/h1&gt;&lt;p&gt;台湾客户要求在原App的基础上接入Line登录，接入</summary>
      
    
    
    
    <category term="实习记录" scheme="https://blog.zepo.re/categories/%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Working" scheme="https://blog.zepo.re/categories/Working/"/>
    
    <category term="SpringBoot" scheme="https://blog.zepo.re/categories/Working/SpringBoot/"/>
    
    
    <category term="tech" scheme="https://blog.zepo.re/tags/tech/"/>
    
    <category term="实习" scheme="https://blog.zepo.re/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2月27-29日工作内容</title>
    <link href="https://blog.zepo.re/2024/02/29/2%E6%9C%8827-29%E6%97%A5%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9.html/"/>
    <id>https://blog.zepo.re/2024/02/29/2%E6%9C%8827-29%E6%97%A5%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9.html/</id>
    <published>2024-02-29T09:01:22.000Z</published>
    <updated>2024-03-01T07:19:33.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2月27-29日工作内容"><a href="#2月27-29日工作内容" class="headerlink" title="2月27-29日工作内容"></a>2月27-29日工作内容</h1><h2 id="今天（27号）六级放榜"><a href="#今天（27号）六级放榜" class="headerlink" title="今天（27号）六级放榜"></a>今天（27号）六级放榜</h2><p>开始工作了之后感觉学校的事情有一些距离感了，特别是长期的游戏时间，麻木了我的紧张情绪。</p><p>学生时代，很容易因为一点点成绩而满足，但其实学生时代的成就感，到了工作就啥也不是，在工作、在赚钱面前，并没有太大优势。</p><p>一边工作一边复习，希望自己找回状态吧，时间不多了。</p><h2 id="Java兼容PHP版本加密方式"><a href="#Java兼容PHP版本加密方式" class="headerlink" title="Java兼容PHP版本加密方式"></a>Java兼容PHP版本加密方式</h2><p>公司的一个老系统原先使用PHP开发的，后来改用Java开发，接口啥的也倒是按照PHP版本的设计的，目前两套系统数据库是共用的，于是就出现了一个问题：</p><blockquote><p>相同的密码，PHP版本的登录得上，Java的就登陆不上</p></blockquote><p>查看Java服务器后台日志，发现了那个时间的错误：</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240301150301565.png" alt="image-20240301150301565"></p><p>找到对应的行数，发现是解密过程出的错误，Java代码里面采用的是DES加解密方式，奇怪的是我用数据库中的密码尝试进行解密，却出现了跟服务器上面一样的错误。</p><p>经过一翻折腾询问前面的后端开发得知：PHP版本的加解密方式跟Java的不一样，离了个大谱！</p><p>这特喵怎么可能能够共用一套系统的？？</p><p>正所谓前人挖坑，后人填。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240301151502169.png" alt="image-20240301151502169"></p><p>我本身只是一个Java后端，PHP逻辑我不清楚，甚至连放在那个文件都不清楚，询问他PHP的加解密Java能实现吗，给我否定的答案。当我继续追问PHP版本的加密方式是什么的时候直接不理我了。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240301151554124.png" alt="image-20240301151554124"></p><p>寻求前同事帮助无果，出于项目经理的要求，我只能自己在服务器用关键词查找相关的关键词，终于还是找到了。</p><p>具体加密方式不多说，跟位运算相关，很明显Java是能实现的，于是只能写了个来过渡，维持服务正常进行吧，唉~</p><p>好在新系统的接口保持跟PHP的接口一致我才有机会找到PHP加解密的逻辑，打工人真难。</p><h2 id="解决奇葩报错-“java-lang-IllegalStateException-No-subdirectories-found”"><a href="#解决奇葩报错-“java-lang-IllegalStateException-No-subdirectories-found”" class="headerlink" title="解决奇葩报错: “java.lang.IllegalStateException: No subdirectories found”"></a>解决奇葩报错: “java.lang.IllegalStateException: No subdirectories found”</h2><p>将打包后的jar包发布到服务器之后，运行的时候出现了这个错误：</p><blockquote><p>java.lang.IllegalStateException: No subdirectories found for mandatory directory location ‘file:.&#x2F;config&#x2F;*&#x2F;‘.</p></blockquote><p>百思不得其解，GPT给的答案也解决不了，最终居然是在Bing上找到的答案，记录一下：</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240229164417351.png" alt="image-20240229164417351"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2月27-29日工作内容&quot;&gt;&lt;a href=&quot;#2月27-29日工作内容&quot; class=&quot;headerlink&quot; title=&quot;2月27-29日工作内容&quot;&gt;&lt;/a&gt;2月27-29日工作内容&lt;/h1&gt;&lt;h2 id=&quot;今天（27号）六级放榜&quot;&gt;&lt;a href=&quot;#今天</summary>
      
    
    
    
    <category term="实习记录" scheme="https://blog.zepo.re/categories/%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Working" scheme="https://blog.zepo.re/categories/Working/"/>
    
    <category term="SpringBoot" scheme="https://blog.zepo.re/categories/Working/SpringBoot/"/>
    
    
    <category term="tech" scheme="https://blog.zepo.re/tags/tech/"/>
    
    <category term="实习" scheme="https://blog.zepo.re/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2月26日工作内容</title>
    <link href="https://blog.zepo.re/2024/02/27/2%E6%9C%8826%E6%97%A5%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9.html/"/>
    <id>https://blog.zepo.re/2024/02/27/2%E6%9C%8826%E6%97%A5%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9.html/</id>
    <published>2024-02-27T01:22:22.000Z</published>
    <updated>2024-02-27T01:23:15.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2月26日工作内容"><a href="#2月26日工作内容" class="headerlink" title="2月26日工作内容"></a>2月26日工作内容</h1><h2 id="配置代码文档模板"><a href="#配置代码文档模板" class="headerlink" title="配置代码文档模板"></a>配置代码文档模板</h2><ol><li><p>实现创建新类时候自动添加注释：</p><p>设置里面加入以下内容，位置如图：</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">/**<br> * @description: TODO <br> * @author $&#123;USER&#125;<br> * @date $&#123;DATE&#125; $&#123;TIME&#125;<br> * @version 1.0<br> */<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240226133913906.png" alt="image-20240226133913906"></p><ol start="2"><li><p>可以手动在旧代码基础上生成注释，按照顺序添加模板组合</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240226142018905.png"></p><p>在模板组合填充模板信息（上图步骤5），然后编辑模板当中引用的变量（上图步骤6）</p><p>其中，模板信息及相应变量如下：</p><ul><li><p>方法注释(*)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">** <br> * @description: $description$ <br> * @param: $params$ <br> * @return: $returns$ <br> * @author $USER$<br> * @date: $date$ $time$<br> */ <br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240226142716694.png" alt="image-20240226142716694"></p><ul><li><p><code>params</code>: <code>groovyScript(&quot;def result=&#39;&#39;; def params=\&quot;$&#123;_1&#125;\&quot;.replaceAll(&#39;[\\\\[|\\\\]|\\\\s]&#39;, &#39;&#39;).split(&#39;,&#39;).toList(); for(i = 0; i &lt; params.size(); i++) &#123;result+=&#39;&#39; + params[i] + ((i &lt; params.size() - 1) ? &#39;\\n&#39;:&#39;&#39;)&#125;; return result&quot;, methodParameters()) </code></p></li><li><p><code>returns</code>: <code>methodReturn Type()</code></p></li><li><p><code>USER</code>: <code>user()</code></p></li><li><p><code>date</code>: <code>date</code></p></li><li><p><code>time</code>: <code>time()</code></p></li></ul></li><li><p>类注释(**)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">**<br> * @description: TODO<br> * @author $user$<br> * @date $date$ $time$<br> * @version 1.0<br> */<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240226143242256.png" alt="image-20240226143242256"></p><ul><li><p><code>user</code>: <code>user()</code></p></li><li><p><code>date</code>: <code>date</code></p></li><li><p><code>time</code>: <code>time()</code></p></li></ul></li></ul></li></ol><h2 id="解决一个客户提出的空表常见问题"><a href="#解决一个客户提出的空表常见问题" class="headerlink" title="解决一个客户提出的空表常见问题"></a>解决一个客户提出的空表常见问题</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240226171904411.png" alt="image-20240226171904411"></p><p>干这行总会遇到客户提出的奇奇怪怪的需求，这个客户在系统刚初始化的时候表里还没有数据，员工业绩没显示出来，就提出一个需求：业绩排行榜要能看到每个人</p><p>经过多次调试SQL语句，发现问题是出在表中初始的时候是空数据，where语句会导致查询结果直接为空</p><p>我的解决方式：</p><p>针对业绩排行榜没有显示每一个人的问题，放宽了SQL查询条件，原本为空的时候会因为where语句限制而查询不到，现加入 IS NULL，跟左连接、COALESCE一起配合使用，达到查询不到的时候就显示为0的效果，脱敏SQL如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    admin_user_info.admin_id,<br>    admin_user_info.name <span class="hljs-keyword">AS</span> admin_name,<br>    <span class="hljs-built_in">COALESCE</span>(<span class="hljs-built_in">SUM</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> client_under_review.del_flag <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> net_income <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span>), <span class="hljs-number">0</span>) <span class="hljs-keyword">AS</span> total_net_income<br><span class="hljs-keyword">FROM</span> admin_user_info<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> client_under_review <span class="hljs-keyword">ON</span> client_under_review.admin_id <span class="hljs-operator">=</span> admin_user_info.admin_id<br><span class="hljs-keyword">WHERE</span><br>    (client_under_review.del_flag <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">OR</span> client_under_review.del_flag <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>)<br><span class="hljs-keyword">AND</span> admin_user.del_flag <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">AND</span> (client_under_review.xxx_date <span class="hljs-keyword">BETWEEN</span> <span class="hljs-string">&#x27;2024-02-01&#x27;</span> <span class="hljs-keyword">AND</span> <span class="hljs-string">&#x27;2024-02-31&#x27;</span> <span class="hljs-keyword">OR</span> client_under_review.xxx_date <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>)<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> admin_user_info.admin_id, admin_user_info.name, admin_user_info.create_time<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">COALESCE</span>(<span class="hljs-built_in">SUM</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> client_under_review.del_flag <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> client_under_review.net_income <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span>), <span class="hljs-number">0</span>) <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2月26日工作内容&quot;&gt;&lt;a href=&quot;#2月26日工作内容&quot; class=&quot;headerlink&quot; title=&quot;2月26日工作内容&quot;&gt;&lt;/a&gt;2月26日工作内容&lt;/h1&gt;&lt;h2 id=&quot;配置代码文档模板&quot;&gt;&lt;a href=&quot;#配置代码文档模板&quot; class=&quot;</summary>
      
    
    
    
    <category term="实习记录" scheme="https://blog.zepo.re/categories/%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Working" scheme="https://blog.zepo.re/categories/Working/"/>
    
    <category term="SpringBoot" scheme="https://blog.zepo.re/categories/Working/SpringBoot/"/>
    
    
    <category term="tech" scheme="https://blog.zepo.re/tags/tech/"/>
    
    <category term="实习" scheme="https://blog.zepo.re/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2月22-23日工作情况</title>
    <link href="https://blog.zepo.re/2024/02/24/2%E6%9C%8822-23%E6%97%A5%E5%B7%A5%E4%BD%9C%E6%83%85%E5%86%B5.html/"/>
    <id>https://blog.zepo.re/2024/02/24/2%E6%9C%8822-23%E6%97%A5%E5%B7%A5%E4%BD%9C%E6%83%85%E5%86%B5.html/</id>
    <published>2024-02-24T07:01:22.000Z</published>
    <updated>2024-02-27T01:23:15.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2月22-23日工作情况"><a href="#2月22-23日工作情况" class="headerlink" title="2月22-23日工作情况"></a>2月22-23日工作情况</h1><h2 id="读书摘阅"><a href="#读书摘阅" class="headerlink" title="读书摘阅"></a>读书摘阅</h2><p>最近开始读一本书，阿里技术团队出的《Java开发手册（黄山版）》，希望对自己Java开发会有所帮助。</p><p>这本书主要是介绍了阿里内部的Java开发规范，用三个级别来区别：强制、推荐、参考。</p><blockquote><p>6.【强制】Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用 equals。 </p><p>正例：”test”.equals(param); </p><p>反例：param.equals(“test”); </p><p>说明：推荐使用 JDK7 引入的工具类 java.util.Objects#equals(Object a, Object b) </p></blockquote><blockquote><p>8.【强制】任何货币金额，均以最小货币单位且为整型类型进行存储。</p></blockquote><blockquote><p> 9.【强制】浮点数之间的等值判断，基本数据类型不能使用 &#x3D;&#x3D; 进行比较，包装数据类型不能使用 equals 进行判断。 </p><p>说明：浮点数采用“尾数+阶码”的编码方式，类似于科学计数法的“有效数字+指数”的表示方式。二进制无法精确表 示大部分的十进制小数，具体原理参考《码出高效》。 </p><p>反例：</p><p>float a &#x3D; 1.0F - 0.9F; </p><p>float b &#x3D; 0.9F - 0.8F;</p><p> if (a &#x3D;&#x3D; b) { </p><p>​&#x2F;&#x2F; 预期进入此代码块，执行其它业务逻辑 </p><p>​&#x2F;&#x2F; 但事实上 a &#x3D;&#x3D; b 的结果为 false </p><p>}</p><p>Float x &#x3D; Float.valueOf(a); </p><p>Float y &#x3D; Float.valueOf(b); </p><p>if (x.equals(y)) {</p><p>​&#x2F;&#x2F; 预期进入此代码块，执行其它业务逻辑</p><p>​ &#x2F;&#x2F; 但事实上 equals 的结果为 false </p><p>}</p><p>正例：</p><p> (1)指定一个误差范围，两个浮点数的差值在此范围之内，则认为是相等的</p><p>float a &#x3D; 1.0F - 0.9F;</p><p> float b &#x3D; 0.9F - 0.8F;</p><p> float diff &#x3D; 1e-6F;</p><p> if (Math.abs(a - b) &lt; diff) { </p><p>​System.out.println(“true”); </p><p>}</p><p>(2)使用 BigDecimal 来定义值，再进行浮点数的运算操作。 </p><p>BigDecimal a &#x3D; new BigDecimal(“1.0”); </p><p>BigDecimal b &#x3D; new BigDecimal(“0.9”); </p><p>BigDecimal c &#x3D; new BigDecimal(“0.8”); </p><p>BigDecimal x &#x3D; a.subtract(b); </p><p>BigDecimal y &#x3D; b.subtract(c); </p><p>if (x.compareTo(y) &#x3D;&#x3D; 0) { </p><p>​System.out.println(“true”); </p><p>}</p></blockquote><blockquote><p>10.【强制】BigDecimal 的等值比较应使用 compareTo() 方法，而不是 equals() 方法。 </p><p>说明：equals() 方法会比较值和精度（1.0 与 1.00 返回结果为 false），而 compareTo() 则会忽略精度。  </p></blockquote><blockquote><p>14.【强制】定义 DO &#x2F; PO &#x2F; DTO &#x2F; VO 等 POJO 类时，不要设定任何属性默认值。 反例：某业务的 DO 的 createTime 默认值为 new Date()；但是这个属性在数据提取时并没有置入具体值，在更新其 它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p></blockquote><blockquote><p>16.【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</p></blockquote><blockquote><p>1.【强制】日期格式化时，传入 pattern 中表示年份统一使用小写的 y。 </p><p>说明：日期格式化时，yyyy 表示当天所在的年，而大写的 YYYY 代表是 week in which year（JDK7 之后引入的概念）， 意思是当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，返回的 YYYY 就是下一年。 </p><p>正例：表示日期和时间的格式如下所示： new SimpleDateFormat(“yyyy-MM-dd HH:mm:ss”) </p><p>反例：某程序员因使用 YYYY&#x2F;MM&#x2F;dd 进行日期格式化，2017&#x2F;12&#x2F;31 执行结果为 2018&#x2F;12&#x2F;31，造成线上故障。</p></blockquote><blockquote><p>2.【强制】在日期格式中分清楚大写的 M 和小写的 m，大写的 H 和小写的 h 分别指代的意义。 </p><p>说明：日期格式中的这两对字母表意如下： </p><p>1）表示月份是大写的 M </p><p>2）表示分钟则是小写的 m </p><p>3）24 小时制的是大写的 H </p><p>4）12 小时制的则是小写的 h</p></blockquote><blockquote><p>7.【强制】Collections 类返回的对象，如：emptyList() &#x2F; singletonList() 等都是 immutable list，不可 对其进行添加或者删除元素的操作。 </p><p>反例：如果查询无结果，返回 Collections.emptyList() 空集合对象，调用方一旦在返回的集合中进行了添加元素的操 作，就会触发 UnsupportedOperationException 异常。</p></blockquote><h2 id="关于注解"><a href="#关于注解" class="headerlink" title="关于注解"></a>关于注解</h2><p>今天在读到一篇<a href="https://blog.csdn.net/qq_40386113/article/details/122407783">关于幂等校验的文章</a>时候，刚好提到用注解的区分是否进行拦截校验，打通了之前对注解用法的困惑：如果<code>方法/类（在定义时候就已经规定好了）</code>用到了注解，在一些拦截判断的时候就可以根据<code>方法/类</code>有无这个注解执行相应的逻辑了。</p><p>注解的定义：</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240223132132547.png" alt="image-20240223132132547"></p><p>拦截器通过注解尝试获取方法是否为空来看有没有注解：</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240223132240442.png" alt="image-20240223132240442"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2月22-23日工作情况&quot;&gt;&lt;a href=&quot;#2月22-23日工作情况&quot; class=&quot;headerlink&quot; title=&quot;2月22-23日工作情况&quot;&gt;&lt;/a&gt;2月22-23日工作情况&lt;/h1&gt;&lt;h2 id=&quot;读书摘阅&quot;&gt;&lt;a href=&quot;#读书摘阅&quot; cla</summary>
      
    
    
    
    <category term="实习记录" scheme="https://blog.zepo.re/categories/%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Working" scheme="https://blog.zepo.re/categories/Working/"/>
    
    <category term="SpringBoot" scheme="https://blog.zepo.re/categories/Working/SpringBoot/"/>
    
    
    <category term="tech" scheme="https://blog.zepo.re/tags/tech/"/>
    
    <category term="实习" scheme="https://blog.zepo.re/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2月20到21这两天的项目维护</title>
    <link href="https://blog.zepo.re/2024/02/21/2%E6%9C%8820%E5%88%B021%E8%BF%99%E4%B8%A4%E5%A4%A9%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%BB%B4%E6%8A%A4.html/"/>
    <id>https://blog.zepo.re/2024/02/21/2%E6%9C%8820%E5%88%B021%E8%BF%99%E4%B8%A4%E5%A4%A9%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%BB%B4%E6%8A%A4.html/</id>
    <published>2024-02-21T08:01:22.000Z</published>
    <updated>2024-02-27T01:26:50.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2月20到21这两天的项目维护"><a href="#2月20到21这两天的项目维护" class="headerlink" title="2月20到21这两天的项目维护"></a>2月20到21这两天的项目维护</h1><h2 id="关于Git"><a href="#关于Git" class="headerlink" title="关于Git"></a>关于Git</h2><p>公司用的是云服务器搭建的GitLab，我遇到一个困扰挺久的问题，就是推送代码上去的时候经常出现报错：</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240221094907063.png" alt="image-20240221094907063"></p><p>从网上寻找答案得知</p><p>413错误码——http请求实体太大</p><p>这要么是上传时我们这边的git有上传大小的限制，要么就是服务器那边做了限制，尝试修改本地Git上传大小限制无果之后原因就是后者了，而且GitLab大概率使用的是nginx搭建的，出于与搭建者并不熟悉的关系，只能不使用http方式上传，改用ssh。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">原因分析：上传文件太大，超过了最大限制<br>解决方法：nginx传输限制：（nginx.conf）<br>　　　　　　 client_max_body_size 400M;<br>　　　　　git传输限制：<br>　　　　　　　git config --global http.postBuffer 524288000<br>　　　　　　　git config --global https.postBuffer 524288000<br></code></pre></td></tr></table></figure><p>关于SSH配置，<a href="https://blog.csdn.net/u012045045/article/details/107484759">网上教程</a>很多，无非就是生成Token，然后绑定到GitLab。</p><h2 id="关于日志的打印"><a href="#关于日志的打印" class="headerlink" title="关于日志的打印"></a>关于日志的打印</h2><p>mybatis日志的打印一般会放在<code>appplication.yml</code>文件里面，而打印级别一般没放在一起，而是放在<code>-dev</code> &#x2F; <code>-prod</code>文件（具体看<code>application.xml</code>的<code>$&#123;spring.profiles.active&#125;</code>）里面的logging项里面</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240221104604135.png" alt="image-20240221104604135"></p><h2 id="关于打包"><a href="#关于打包" class="headerlink" title="关于打包"></a>关于打包</h2><p>公司的项目不同于我在学校接触到的小项目，代码通过maven打包之后生成的是一个zip文件，里面包含了配置文件和依赖包，可以直接一键部署到服务器上，特别高效。</p><p>完整的pom文件build配置脱敏如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 设置编译版本 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 清单文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>XXXApplication<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 打包时 MANIFEST.MF文件不记录的时间戳版本 父工程开发版本需要加,不然依赖的父工程jar引用不了--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">useUniqueVersions</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">useUniqueVersions</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">classpathPrefix</span>&gt;</span>lib/<span class="hljs-tag">&lt;/<span class="hljs-name">classpathPrefix</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 给清单文件添加键值对(配置文件外置) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">manifestEntries</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Class-Path</span>&gt;</span>config/<span class="hljs-tag">&lt;/<span class="hljs-name">Class-Path</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">manifestEntries</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">classesDirectory</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">classesDirectory</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 拷贝依赖的jar包到lib目录 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>copy<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>copy-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span><br>$&#123;project.build.directory&#125;/lib<br><span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 解决资源文件的编码问题 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 过滤后缀文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nonFilteredFileExtensions</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nonFilteredFileExtension</span>&gt;</span>xlsx<span class="hljs-tag">&lt;/<span class="hljs-name">nonFilteredFileExtension</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nonFilteredFileExtension</span>&gt;</span>xls<span class="hljs-tag">&lt;/<span class="hljs-name">nonFilteredFileExtension</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nonFilteredFileExtension</span>&gt;</span>p12<span class="hljs-tag">&lt;/<span class="hljs-name">nonFilteredFileExtension</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nonFilteredFileExtensions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 打包source文件为zip文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">descriptors</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">descriptor</span>&gt;</span>src/main/assembly/assembly.xml<span class="hljs-tag">&lt;/<span class="hljs-name">descriptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">descriptors</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>make-assembly<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>single<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="关于数据库出现0000-0000…日期错误"><a href="#关于数据库出现0000-0000…日期错误" class="headerlink" title="关于数据库出现0000-0000…日期错误"></a>关于数据库出现0000-0000…日期错误</h2><blockquote><p>报错：MySQL:[Err] 1292 - Incorrect datetime value: ‘0000-00-00 00:00:00‘ for column ‘CREATE_TIME‘</p></blockquote><p>在做数据迁移的时候出现了上面这个问题，应该不同的MySQL对日期初始值的设置不一样导致的，为了兼容这个问题，要把全局的sql_mode默认的<strong>NO_ZERO_DATE、NO_ZERO_IN_DATE</strong>去掉，参考<a href="https://blog.csdn.net/qq_45525041/article/details/117412202">博文</a></p><p>然后还要记得降级新部署的MySQL版本到5.7及以下</p><p>同时如果是Java项目，使用到jdbc时要在数据库url加上<code>&amp;zeroDateTimeBehavior=CONVERT_TO_NULL</code></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240222085849300.png" alt="image-20240222085849300"></p><h2 id="结合-Redis-对文件判重的一个实现"><a href="#结合-Redis-对文件判重的一个实现" class="headerlink" title="结合 Redis 对文件判重的一个实现"></a>结合 Redis 对文件判重的一个实现</h2><blockquote><p>2024.02.23：今天学习到一个专业术语来描述这个效果：<strong>幂等</strong></p></blockquote><p>前面对导入文件进行了优化，项目管理就提了一个问题：</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/workplace-blog-posts-images@main/imgsimage-20240221134121901.png" alt="image-20240221134121901"></p><p>整个系统上传文件都限制在2M以内，调了接口就算离开页面，只要上传结束并不会对导入的数据造成影响，后端会一直处理直到数据全部导入。因此，应该规避的就是用户重复上传。结合自身能力，我选择利用Redis来实现这一简单的功能。</p><p>我的思路是获取收到的文件的哈希值，判断该哈希是否存在于缓存中，如果是新哈希，就将其存储到Reids，缓存时间设置为6分钟，代码实现如下：</p><p>Redis业务层主要有三个功能：判断哈希值是否已经存在、添加文件哈希进缓存、设置缓存时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileHashServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FileHashService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILE_HASH_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;file_hashes&quot;</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFileHashExists</span><span class="hljs-params">(String hash)</span> &#123;<br>        <span class="hljs-keyword">return</span> Boolean.TRUE.equals(redisTemplate.opsForSet().isMember(FILE_HASH_KEY, hash));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFileHash</span><span class="hljs-params">(String hash)</span> &#123;<br>        redisTemplate.opsForSet().add(FILE_HASH_KEY, hash);<br>    &#125;<br><br>    <span class="hljs-comment">// 设置文件哈希过期时间 (e.g., 24 hours)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFileHashExpiration</span><span class="hljs-params">(String hash, <span class="hljs-type">long</span> timeout, TimeUnit unit)</span> &#123;<br>        redisTemplate.expire(FILE_HASH_KEY, timeout, unit);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>控制层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取文件哈希，判断是否重复上传</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sha256Hex</span> <span class="hljs-operator">=</span> DigestUtil.sha256Hex(file.getInputStream());<br><span class="hljs-keyword">if</span>(!fileHashService.isFileHashExists(sha256Hex)) &#123;<br>    fileHashService.addFileHash(sha256Hex);<br>    fileHashService.setFileHashExpiration(sha256Hex, <span class="hljs-number">6</span>, TimeUnit.MINUTES);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;请勿重复上传&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2月20到21这两天的项目维护&quot;&gt;&lt;a href=&quot;#2月20到21这两天的项目维护&quot; class=&quot;headerlink&quot; title=&quot;2月20到21这两天的项目维护&quot;&gt;&lt;/a&gt;2月20到21这两天的项目维护&lt;/h1&gt;&lt;h2 id=&quot;关于Git&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="实习记录" scheme="https://blog.zepo.re/categories/%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Working" scheme="https://blog.zepo.re/categories/Working/"/>
    
    <category term="SpringBoot" scheme="https://blog.zepo.re/categories/Working/SpringBoot/"/>
    
    
    <category term="tech" scheme="https://blog.zepo.re/tags/tech/"/>
    
    <category term="实习" scheme="https://blog.zepo.re/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot项目导入大量Excel数据的解决方案</title>
    <link href="https://blog.zepo.re/2024/02/19/Spring%20Boot%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html/"/>
    <id>https://blog.zepo.re/2024/02/19/Spring%20Boot%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html/</id>
    <published>2024-02-19T13:01:22.000Z</published>
    <updated>2024-02-27T01:26:32.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot项目导入大量Excel数据的解决方案"><a href="#Spring-Boot项目导入大量Excel数据的解决方案" class="headerlink" title="Spring Boot项目导入大量Excel数据的解决方案"></a>Spring Boot项目导入大量Excel数据的解决方案</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>工作的时候出现一个比较特别的需求：一次性导入16万行有着17个字段的Excel表格，原本我维护的代码使用ExcelUtil实现的，但是客户使用的时候反馈：一次性导入1万条数据会直接卡住，并且数据一直增加。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202402192057630.png" alt="image-20240219205724525"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202402192058915.png" alt="image-20240219205805853"></p><p>后来查看日志、自己在Windows上操作一遍，寻找相关关键词，很可能是发生了内存溢出。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202402192102061.png" alt="image-20240219210229928"></p><p>最后也在<a href="https://hutoolkit.com/zh/docs/poi/%E6%B5%81%E6%96%B9%E5%BC%8F%E8%AF%BB%E5%8F%96excel2003-excel03saxreader">ExcelUtil的官方文档</a>中得到了进一步证实:</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202402192107091.png" alt="image-20240219210705904"></p><h2 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h2><h3 id="流方式读取？"><a href="#流方式读取？" class="headerlink" title="流方式读取？"></a>流方式读取？</h3><p>一开始想着用最小的改动来完成这个变态需求，后来在写的时候才发现ExcelUtil的流方式虽然能够支持大量数据的读取但是也相应地有个致命缺点：封装性比较差！很难和Web业务结合，所以我果断选择跑路。</p><h3 id="EasyExcel！"><a href="#EasyExcel！" class="headerlink" title="EasyExcel！"></a>EasyExcel！</h3><p>在网上寻找大量数据导入Excel的方法中，发现了一个神奇宝贝：<a href="https://easyexcel.opensource.alibaba.com/">EasyExcel</a>！</p><h4 id="什么是Easy-Excel？"><a href="#什么是Easy-Excel？" class="headerlink" title="什么是Easy Excel？"></a>什么是Easy Excel？</h4><blockquote><p>EasyExcel是一个基于Java的、快速、简洁、解决大文件内存溢出的Excel处理工具。<br>他能让你在不用考虑性能、内存的等因素的情况下，快速完成Excel的读、写等功能。</p></blockquote><h4 id="不懂？"><a href="#不懂？" class="headerlink" title="不懂？"></a>不懂？</h4><blockquote><p>Java解析、生成Excel比较有名的框架有Apache poi、jxl。但他们都存在一个严重的问题就是非常的耗内存，poi有一套SAX模式的API可以一定程度的解决一些内存溢出的问题，但POI还是有一些缺陷，比如07版Excel解压缩以及解压后存储都是在内存中完成的，内存消耗依然很大。<br>easyexcel重写了poi对07版Excel的解析，一个3M的excel用POI sax解析依然需要<strong>100M</strong>左右内存，改用easyexcel可以降低到<strong>几M</strong>，并且<strong>再大的excel也不会出现内存溢出</strong>；03版依赖POI的sax模式，在上层做了模型转换的封装，让使用者更加简单方便</p></blockquote><h4 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h4><p>说句实话，看官方文档的例子我苦恼了很久</p><p>导入的逻辑都是在Listener中实现的，关于导入的结果应该怎么体现呢，这让我挺困惑的，搜网一圈之后发现一篇类似的issue：</p><blockquote><p><a href="https://github.com/alibaba/easyexcel/issues/817">导入的代码业务逻辑都在Listener中实现的，如果想返回成功多少失败多少条，应该怎么返回？</a></p></blockquote><ol><li>自行在构造器传入一些变量来满足业务</li><li>自行插入些成员变量来获得导入情况</li></ol><p>根据这个思路，我写了这个Listener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AnalysisEventListener</span>&lt;ImportParam&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  每隔100条存储数据库，然后清理list，方便内存回收</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BATCH_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> List&lt;Temp&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">// 记录成功条数</span><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> successCount;<br>    <span class="hljs-comment">// 记录错误信息</span><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; errorCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> XXXService xxxService;<br>    <span class="hljs-keyword">private</span> HttpServletRequest request; <span class="hljs-comment">// 根据自己业务需求传</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DataListener</span><span class="hljs-params">(XXXService xxxService, HttpServletRequest request)</span> &#123;<br>        <span class="hljs-built_in">this</span>.xxxService = xxxService;<br>        <span class="hljs-built_in">this</span>.request = request;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(ImportParam tempValue, AnalysisContext context )</span> &#123;<br>        <span class="hljs-comment">// TODO</span><br>        <span class="hljs-comment">// 导入数据字段检验</span><br>        <span class="hljs-keyword">if</span> (tempValue.getName() == <span class="hljs-literal">null</span> || Tools.isEmpty(tempValue.getName().toString()) || Tools.isEmpty(tempValue.getName().toString())) &#123;<br>            errorCount.add(<span class="hljs-string">&quot;导入数据必填项为空&quot;</span>);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        ...<br>        <br>        <span class="hljs-comment">// TODO</span><br>        <span class="hljs-comment">// 这里模拟ImportParam二次封装成多个不同对象的过程，Service可能操作多个表</span><br>tempValue...&gt;add<br>        log.info(<span class="hljs-string">&quot;准备导入&#123;&#125;的数据：data = &#123;&#125;&quot;</span>,add.getDataA().getName(), add.getDataA());<br>        list.add(add);<br><br>        <span class="hljs-keyword">if</span> (list.size() &gt;= BATCH_COUNT) &#123;<br>            saveData(request, 其他参数);<br>            list.clear();<br>            <span class="hljs-built_in">this</span>.successCount+=<span class="hljs-number">100</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext context)</span> &#123;<br>        <span class="hljs-comment">// TODO</span><br>        <span class="hljs-comment">// 对剩下不足100的数据进行处理</span><br>        ...<br>        saveData(phoneArray, list, adminId, request);<br>        <span class="hljs-comment">// 记录成功导入的数量</span><br>        <span class="hljs-built_in">this</span>.successCount += list.size();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveData</span><span class="hljs-params">(HttpServletRequest request, 其他参数)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Map&lt;String, String&gt; result = xxxService.daoforeachlist(其他参数, request);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>控制层的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;Excel导入&quot;)</span><br>   <span class="hljs-meta">@PostMapping(value = &quot;/import&quot;)</span><br>   <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">api_import_client</span><span class="hljs-params">(MultipartFile file, HttpServletRequest request)</span><span class="hljs-keyword">throws</span> XXXBusinessException,Exception&#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-keyword">if</span> (EmptyUtils.isEmpty(file)) &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;请传入文件&quot;</span>);<br>           &#125;<br>           <br>           init(request);<br>           <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> file.getInputStream();<br>           <br>           <span class="hljs-comment">// 构建监听器实例，传入EasyExcel、文件输入流导入数据</span><br>           <span class="hljs-type">DataListener</span> <span class="hljs-variable">dataListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataListener</span>(clientService, operatorAdminId, adminId, request);<br>           EasyExcel.read(inputStream, ImportParam.class, dataListener).sheet().doRead();<br>           <br>           <span class="hljs-comment">// 通过监听器实例获取状态</span><br>           List&lt;String&gt; errorCount = dataListener.getErrorCount();<br>           <span class="hljs-type">int</span> <span class="hljs-variable">successCount</span> <span class="hljs-operator">=</span> dataListener.getSuccessCount();<br>           <br>           <span class="hljs-comment">// 返回导入结果</span><br>           <span class="hljs-keyword">if</span> (errorCount.isEmpty()) &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;&gt;(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;成功操作了&quot;</span>+successCount+<span class="hljs-string">&quot;条记录&quot;</span>);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               log.error(<span class="hljs-string">&quot;出错记录：\n&quot;</span> + errorCount.toString());<br>               <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;成功操作了&quot;</span>+successCount+<span class="hljs-string">&quot;条记录，&quot;</span>+errorCount.size()+<span class="hljs-string">&quot;条记录出错&quot;</span>);<br>           &#125;<br>           <br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           e.printStackTrace(); <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;系统出错，操作失败&quot;</span>);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="EasyExcel-怎么做到“再大的excel也不会出现内存溢出”的呢？"><a href="#EasyExcel-怎么做到“再大的excel也不会出现内存溢出”的呢？" class="headerlink" title="EasyExcel 怎么做到“再大的excel也不会出现内存溢出”的呢？"></a>EasyExcel 怎么做到“再大的excel也不会出现内存溢出”的呢？</h2><p>我的理解是：</p><p>EasyExcel 的设计挺巧妙的，把Listener设计成自己执行，也可以自行在构造器传入一些变量来满足业务，最重要的是可以自定义BATCH_COUNT，通过每次循环中判断列表数据是否超过了BATCH_COUNT来控制list不会过大，list不会过大，一点一点存，自然不会有内存溢出的问题了，“再大的excel也就不会出现内存溢出”~只是相当于也许会多花点时间（实际上EasyExcel比ExcelUtil快）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Boot项目导入大量Excel数据的解决方案&quot;&gt;&lt;a href=&quot;#Spring-Boot项目导入大量Excel数据的解决方案&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot项目导入大量Excel数据的解决方案&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="实习记录" scheme="https://blog.zepo.re/categories/%E5%AE%9E%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Working" scheme="https://blog.zepo.re/categories/Working/"/>
    
    <category term="SpringBoot" scheme="https://blog.zepo.re/categories/Working/SpringBoot/"/>
    
    
    <category term="tech" scheme="https://blog.zepo.re/tags/tech/"/>
    
    <category term="实习" scheme="https://blog.zepo.re/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Nginx问题解决清单</title>
    <link href="https://blog.zepo.re/2023/08/31/nginx-issuse.html/"/>
    <id>https://blog.zepo.re/2023/08/31/nginx-issuse.html/</id>
    <published>2023-08-31T03:18:22.000Z</published>
    <updated>2023-08-31T03:17:47.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx问题解决清单"><a href="#nginx问题解决清单" class="headerlink" title="nginx问题解决清单"></a>nginx问题解决清单</h1><h2 id="静态资源无法读取（403）"><a href="#静态资源无法读取（403）" class="headerlink" title="静态资源无法读取（403）"></a>静态资源无法读取（403）</h2><ul><li><p>原因：静态资源位于家目录</p></li><li><p>解决方式：在<code>nginx.conf</code>文件中指定用户进行读取（参考【<a href="https://blog.csdn.net/InkBamboo920/article/details/124241030">随笔小杂记(五)——nginx访问静态资源报错403_nginx访问静态资源403_没有顶会的咸鱼的博客-CSDN博客</a>】）</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202308302137265.png" alt="image-20230830213709961"></p></li></ul><h2 id="无法直接用配置文件启动nginx"><a href="#无法直接用配置文件启动nginx" class="headerlink" title="无法直接用配置文件启动nginx"></a>无法直接用配置文件启动nginx</h2><ul><li><p>原因：没有关闭nginx</p></li><li><p>解决方式：先关闭nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZbp17ujkfvkf0nkixzt05Z sbin]# nginx -s stop<br>[root@iZbp17ujkfvkf0nkixzt05Z sbin]# nginx -c /usr/local/nginx/conf/nginx.conf<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nginx问题解决清单&quot;&gt;&lt;a href=&quot;#nginx问题解决清单&quot; class=&quot;headerlink&quot; title=&quot;nginx问题解决清单&quot;&gt;&lt;/a&gt;nginx问题解决清单&lt;/h1&gt;&lt;h2 id=&quot;静态资源无法读取（403）&quot;&gt;&lt;a href=&quot;#静态资源</summary>
      
    
    
    
    <category term="Debug" scheme="https://blog.zepo.re/categories/Debug/"/>
    
    <category term="Nginx" scheme="https://blog.zepo.re/categories/Debug/Nginx/"/>
    
    
    <category term="tech" scheme="https://blog.zepo.re/tags/tech/"/>
    
    <category term="nginx" scheme="https://blog.zepo.re/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>推荐一部纪录片《Dream Maker》（造梦者）</title>
    <link href="https://blog.zepo.re/2023/07/28/%E6%8E%A8%E8%8D%90%E4%B8%80%E9%83%A8%E7%BA%AA%E5%BD%95%E7%89%87%E3%80%8ADream%20Maker%E3%80%8B%EF%BC%88%E9%80%A0%E6%A2%A6%E8%80%85%EF%BC%89.html/"/>
    <id>https://blog.zepo.re/2023/07/28/%E6%8E%A8%E8%8D%90%E4%B8%80%E9%83%A8%E7%BA%AA%E5%BD%95%E7%89%87%E3%80%8ADream%20Maker%E3%80%8B%EF%BC%88%E9%80%A0%E6%A2%A6%E8%80%85%EF%BC%89.html/</id>
    <published>2023-07-28T04:41:22.000Z</published>
    <updated>2023-07-28T10:54:00.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="推荐一部纪录片《Dream-Maker》（造梦者）"><a href="#推荐一部纪录片《Dream-Maker》（造梦者）" class="headerlink" title="推荐一部纪录片《Dream Maker》（造梦者）"></a>推荐一部纪录片《Dream Maker》（造梦者）</h1><iframe style="width:100%" frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1857630559&auto=1&height=66"></iframe><p>虽然还没开始工作，但是深处互联网寒冬，相信工作不会顺利，看完阿里的经历实在给人鼓舞</p><p>我们高中期间也尝试过小型的创业，疫情打破了原来的节奏。在很长一段时间里，开始怀疑自己的未来是普普通通的程序员，还是更平凡的失业者，对未来充满无力感。但是时代就是这样的，哪个时代都有迷茫的时期，找到自己觉得可以努力的方向，不要停下脚步就行了。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307281229438.png" alt="image-20230728122930383"></p><iframe style="width:100%;height:600px" src="//player.bilibili.com/player.html?aid=230944746&bvid=BV1c8411Q7bH&cid=1197305760&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>SARS、世贸、互联网、移动互联网、云计算，阿里就如传奇，一直在打破传统限制，银行看不起的5元交易费也促使支付宝的诞生，从纪录片中我看到：那些年，阿里是创业型的、充满活力的。</p><p>“小二”、“亲”、花名，这些都是格局的创新，有洞见的内驱。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307281153879.png" alt="image-20230728115316498"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307281212222.png" alt="image-20230728121256907"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307281227272.png" alt="image-20230728122703811"></p><p>很有味道，历史也可以因为梦想而添上一笔。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307281228177.png" alt="image-20230728122816133"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;推荐一部纪录片《Dream-Maker》（造梦者）&quot;&gt;&lt;a href=&quot;#推荐一部纪录片《Dream-Maker》（造梦者）&quot; class=&quot;headerlink&quot; title=&quot;推荐一部纪录片《Dream Maker》（造梦者）&quot;&gt;&lt;/a&gt;推荐一部纪录片《Dre</summary>
      
    
    
    
    <category term="Life" scheme="https://blog.zepo.re/categories/Life/"/>
    
    <category term="Movie" scheme="https://blog.zepo.re/categories/Life/Movie/"/>
    
    
    <category term="life" scheme="https://blog.zepo.re/tags/life/"/>
    
    <category term="movie" scheme="https://blog.zepo.re/tags/movie/"/>
    
  </entry>
  
  <entry>
    <title>厦门好玩吗</title>
    <link href="https://blog.zepo.re/2023/07/26/%E5%8E%A6%E9%97%A8%E5%A5%BD%E7%8E%A9%E5%90%97.html/"/>
    <id>https://blog.zepo.re/2023/07/26/%E5%8E%A6%E9%97%A8%E5%A5%BD%E7%8E%A9%E5%90%97.html/</id>
    <published>2023-07-25T17:51:22.000Z</published>
    <updated>2023-07-28T02:01:36.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="厦门好玩吗"><a href="#厦门好玩吗" class="headerlink" title="厦门好玩吗"></a>厦门好玩吗</h1><p>前不久去了趟厦门，感受颇深。</p><p>有大海的魅力，有人情的韵味，我们选择跟团去，体验感极佳。</p><p>每趟起床都是早上五六点，健康作息反倒不疲惫。</p><p>旅行社肯定要赚钱，节约成本，剩下的其实就看导游人品了，但是有一点可以肯定：低价团肯定是不好的。</p><p>跟团的有几个高中学生，一路很活跃，随处拍照，溢出的可爱气息让我有总自己融不入的感觉（我才20岁欸&#x2F;(ㄒoㄒ)&#x2F;~~）；导游阿姨身上的正能量让我感受到什么是”干一行爱一行“</p><p>从不善于表达，也自然没有交集的名分，他们是真正旅途上的过客。</p><p>传一些照片吧，以后有时间再细细更新~</p><h2 id="厦门北"><a href="#厦门北" class="headerlink" title="厦门北"></a>厦门北</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270126632.jpg" alt="4344819f1e9dde49230ff3d9dfc850d"></p><h2 id="陈嘉庚先生和他的故居"><a href="#陈嘉庚先生和他的故居" class="headerlink" title="陈嘉庚先生和他的故居"></a>陈嘉庚先生和他的故居</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270126110.jpg" alt="dd23f4cc26403b0be7a91e57b2a4d3d"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270126170.jpg" alt="41aefd7fead9e8f22ae1ea0164c4cb8"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270127738.jpg" alt="dad862c4f04091cd7bef08b7f678211"></p><h2 id="老院子"><a href="#老院子" class="headerlink" title="老院子"></a>老院子</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270127493.jpg" alt="be5d8b51ddc40090aefa7225bf44ca6"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270127363.jpg" alt="6e8aa3ac9eab4a89dcddc4e0a915f95"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270127311.jpg" alt="234d7c5a38b5f8b283230b4fc1382fa"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270128406.jpg" alt="c18749d96e7dfa9addf80311894f20e"></p><h2 id="《闽南传奇》"><a href="#《闽南传奇》" class="headerlink" title="《闽南传奇》"></a>《闽南传奇》</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270128358.jpg" alt="c06d25d44d44322f26fb2c1fba8b8c9"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270128838.jpg" alt="76cd08994aeb3d1eb59f924a28f0626"></p><h2 id="沙蚕冻"><a href="#沙蚕冻" class="headerlink" title="沙蚕冻"></a>沙蚕冻</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270129390.jpg" alt="433430ba5cb76632612f69eeb955e64"></p><h2 id="中山路"><a href="#中山路" class="headerlink" title="中山路"></a>中山路</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270129434.jpg" alt="ea1b371d03cb70d3068f4755dfdce63"></p><h2 id="夜游厦门"><a href="#夜游厦门" class="headerlink" title="夜游厦门"></a>夜游厦门</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270130833.jpg" alt="9e8008f9acaf9525ea6f9708493b7a8"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270130810.jpg" alt="737235e0e1c45a8b36cf241d3305094"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307271411921.jpg" alt="181ad45681800ae7a7469dc40319cb0"></p><h2 id="鼓浪屿"><a href="#鼓浪屿" class="headerlink" title="鼓浪屿"></a>鼓浪屿</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270134059.jpg" alt="38a94415d05aa21aaaf7c4604770365"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270130086.jpg" alt="46bdbd5bc229c38e758a7ca3414491a"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270130744.jpg" alt="d18dd63bbe13ebb3ea46160753da51f"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270131731.jpg" alt="d96a2243de7a7e959b1f50f1d8b84a1"></p><h2 id="郑成功纪念馆"><a href="#郑成功纪念馆" class="headerlink" title="郑成功纪念馆"></a>郑成功纪念馆</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270132511.jpg" alt="e7875a212ecdbc0da3ed8ffb923c4aa"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270132110.jpg" alt="3ffa08f1144f378e526c0b36fc830d1"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270132276.jpg" alt="a44323d8111e69972c51268ad9e706e"></p><h2 id="鼓浪屿全景"><a href="#鼓浪屿全景" class="headerlink" title="鼓浪屿全景"></a>鼓浪屿全景</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270132949.jpg" alt="9a14027c28934d89f554fd3a52f5f76"></p><h2 id="郑成功雕像"><a href="#郑成功雕像" class="headerlink" title="郑成功雕像"></a>郑成功雕像</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270133607.jpg" alt="000fd87df62ae12786b602d523196bc"></p><h2 id="拼音之父"><a href="#拼音之父" class="headerlink" title="拼音之父"></a>拼音之父</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270131747.jpg" alt="6cd8e74be1eae3ecc93e84ee16b679f"></p><h2 id="大使馆旧址"><a href="#大使馆旧址" class="headerlink" title="大使馆旧址"></a>大使馆旧址</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270133462.jpg" alt="9070ba257fe04ca04f70977c78b8dee"></p><h2 id="最美转角与周杰伦MV地点"><a href="#最美转角与周杰伦MV地点" class="headerlink" title="最美转角与周杰伦MV地点"></a>最美转角与周杰伦MV地点</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270134834.jpg" alt="93667759ecbb8409ba82ad046af2299"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270134489.jpg" alt="8de7804c996f166f4c93379ac701088"></p><h2 id="阳光栈道"><a href="#阳光栈道" class="headerlink" title="阳光栈道"></a>阳光栈道</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270135864.jpg" alt="e8a94a24ead6ec49215c46e0e821d40"></p><h2 id="一国两制沙滩"><a href="#一国两制沙滩" class="headerlink" title="一国两制沙滩"></a>一国两制沙滩</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270135724.jpg" alt="aea6d24cf7b83a49c4edc376267847d"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270135585.jpg" alt="a9af852249bb3c73e5454ff4ac0031a"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270135364.jpg" alt="1d2695787470ce043a6e21f2c028c96"></p><h2 id="园林植物园"><a href="#园林植物园" class="headerlink" title="园林植物园"></a>园林植物园</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270136812.jpg" alt="15411457e1aa5b2e1a20fb0ab243dfc"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270136436.jpg" alt="2b5c0e1650000121c99ba1ddd9c2a37"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270136903.jpg" alt="67e3869610b3b76ffcc251d4173b4b7"></p><h2 id="南普陀寺"><a href="#南普陀寺" class="headerlink" title="南普陀寺"></a>南普陀寺</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270137072.jpg" alt="ced24918614e416184bc0e28edfd4a5"></p><h2 id="其他漂亮的地方"><a href="#其他漂亮的地方" class="headerlink" title="其他漂亮的地方"></a>其他漂亮的地方</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270138477.jpg" alt="7b8fd332a87be2d94b8d98dcc7b8c42"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307270138684.jpg" alt="9cbf1e77836d08261d4b014414fcf7e"></p><p>这城市的精彩、旅行的乐趣，让我收获了高中以来丢失的孩时向往，人还是要有所明确的追求才行呀！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;厦门好玩吗&quot;&gt;&lt;a href=&quot;#厦门好玩吗&quot; class=&quot;headerlink&quot; title=&quot;厦门好玩吗&quot;&gt;&lt;/a&gt;厦门好玩吗&lt;/h1&gt;&lt;p&gt;前不久去了趟厦门，感受颇深。&lt;/p&gt;
&lt;p&gt;有大海的魅力，有人情的韵味，我们选择跟团去，体验感极佳。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="Life" scheme="https://blog.zepo.re/categories/Life/"/>
    
    <category term="XiaMen" scheme="https://blog.zepo.re/categories/Life/XiaMen/"/>
    
    
    <category term="life" scheme="https://blog.zepo.re/tags/life/"/>
    
    <category term="XiaMen" scheme="https://blog.zepo.re/tags/XiaMen/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记</title>
    <link href="https://blog.zepo.re/2023/07/20/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html/"/>
    <id>https://blog.zepo.re/2023/07/20/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html/</id>
    <published>2023-07-20T03:01:22.000Z</published>
    <updated>2023-08-11T04:42:44.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring学习笔记"><a href="#Spring学习笔记" class="headerlink" title="Spring学习笔记"></a>Spring学习笔记</h1><p><strong>源代码托管在<a href="https://github.com/linzepore/blog/releases/download/Code/Linzepore_Spring_coming.zip">GitHub</a>上</strong></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring 是一个轻量级的控制反转（IOC）和面向切面（AOP）的框架</p><ul><li>开源的、免费的</li><li>轻量级的、非入侵式的</li><li>控制反转、面向切面编程</li><li>支持事务处理</li></ul><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307162135524.gif"></p><p><strong>核心容器（Spring Core）</strong></p><p>　　核心容器提供Spring框架的基本功能。Spring以bean的方式组织和管理Java应用中的各个组件及其关系。Spring使用BeanFactory来产生和管理Bean，它是工厂模式的实现。BeanFactory使用控制反转(IoC)模式将应用的配置和依赖性规范与实际的应用程序代码分开。</p><p><strong>应用上下文（Spring Context）</strong></p><p>　　Spring上下文是一个配置文件，向Spring框架提供上下文信息。Spring上下文包括企业服务，如JNDI、EJB、电子邮件、国际化、校验和调度功能。</p><p><strong>Spring面向切面编程（Spring AOP）</strong></p><p>　　通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring框架中。所以，可以很容易地使 Spring框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。</p><p><strong>JDBC和DAO模块（Spring DAO）</strong></p><p>　　JDBC、DAO的抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理，和不同数据库供应商所抛出的错误信息。异常层次结构简化了错误处理，并且极大的降低了需要编写的代码数量，比如打开和关闭链接。</p><p><strong>对象实体映射（Spring ORM）</strong></p><p>　　Spring框架插入了若干个ORM框架，从而提供了ORM对象的关系工具，其中包括了Hibernate、JDO和 IBatis SQL Map等，所有这些都遵从Spring的通用事物和DAO异常层次结构。</p><p><strong>Web模块（Spring Web）</strong></p><p>　　Web上下文模块建立在应用程序上下文模块之上，为基于web的应用程序提供了上下文。所以Spring框架支持与Struts集成，web模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</p><p><strong>MVC模块（Spring Web MVC）</strong></p><p>　　MVC框架是一个全功能的构建Web应用程序的MVC实现。通过策略接口，MVC框架变成为高度可配置的。MVC容纳了大量视图技术，其中包括JSP、POI等，模型来有JavaBean来构成，存放于m当中，而视图是一个街口，负责实现模型，控制器表示逻辑代码，由c的事情。Spring框架的功能可以用在任何J2EE服务器当中，大多数功能也适用于不受管理的环境。Spring的核心要点就是支持不绑定到特定J2EE服务的可重用业务和数据的访问的对象，毫无疑问这样的对象可以在不同的J2EE环境，独立应用程序和测试环境之间重用。</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>现代化的Java开发，就是基于Spring开发~</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307162150900.png" alt="image-20230716215037783"></p><ul><li>Spring Boot<ul><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速开发单个微服务</li><li>约定大于配置</li></ul></li><li>Spring Cloud<ul><li>基于SpringBoot实现</li></ul></li></ul><p>弊端：配置繁琐，“配置地狱”</p><h2 id="IOC理论推导"><a href="#IOC理论推导" class="headerlink" title="IOC理论推导"></a>IOC理论推导</h2><p>共同的部分：Dao+多个DaoImpl，Service+多个ServiceImpl</p><p>原本的方式：Service靠程序创建实例（主动性在程序员身上）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span> &#123;<br>        userDao.getUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>成本高，每一次都需要手动修改源代码</li><li>需求不能做到动态变化</li></ul><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307170108100.png"></p><p>IOC的方式：Service靠set注入，由用户来创建实例（主动性在用户身上）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> UserDao userDao;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>    <span class="hljs-built_in">this</span>.userDao = userDao;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307170118669.png" alt="image-20230717011854644"></p><h2 id="IOC的本质"><a href="#IOC的本质" class="headerlink" title="IOC的本质"></a>IOC的本质</h2><p>总结来说就是依赖对象的生成方式反转，主动权来到用户手上</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307170124258.png" alt="image-20230717012459111"></p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307170126898.png" alt="image-20230717012602841"></p><p>DI（依赖注入）只是IOC（控制反转）的一种实现方式</p><p>Spring中实例来自于配置或者注解</p><h2 id="HelloSpring"><a href="#HelloSpring" class="headerlink" title="HelloSpring"></a>HelloSpring</h2><p>使用Spring容器创建管理输出实例，具体步骤：</p><ul><li>保证原型的属性具有getter、setter</li><li>编写配置文件或者注解（配置文件的写法：<a href="https://docs.spring.io/spring-framework/reference/core/beans/basics.html">Container Overview :: Spring Framework</a>）</li><li>使用ClassPathXmlApplicationContext获取Java实例（其他的Bean有其相应的获取方法，比如注解对应的AnnotationConfigApplicationContext，文件对应的Filexxx）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"># Hello类<br><span class="hljs-keyword">package</span> re.zepo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">private</span> String str;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStr</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-built_in">this</span>.str = str;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;str=&#x27;&quot;</span> + str + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"># beans.xml<br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.Hello&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;str&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"># Test类<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">myTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>        System.out.println(context.getBean(<span class="hljs-string">&quot;hello&quot;</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="IOC创建对象的方式"><a href="#IOC创建对象的方式" class="headerlink" title="IOC创建对象的方式"></a>IOC创建对象的方式</h2><p>1、 通过无参构造的方式</p><p>2、 通过有参构造的方式</p><p>​1、 通过index</p><p>​2、 通过类型，但是有相同的时候不适用</p><p>​3、 通过参数名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;user&quot;</span> class=<span class="hljs-string">&quot;re.zepo.pojo.User&quot;</span>&gt;<br>        &lt;constructor-arg index=<span class="hljs-string">&quot;0&quot;</span> value=<span class="hljs-string">&quot;LINZEPORE&quot;</span>/&gt;<br>    &lt;/bean&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;user2&quot;</span> class=<span class="hljs-string">&quot;re.zepo.pojo.User&quot;</span>&gt;<br>        &lt;constructor-arg name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;LINZEPORE&quot;</span>/&gt;<br>    &lt;/bean&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;userT&quot;</span> class=<span class="hljs-string">&quot;re.zepo.pojo.UserT&quot;</span>&gt;<br>        &lt;constructor-arg type=<span class="hljs-string">&quot;java.lang.String&quot;</span> value=<span class="hljs-string">&quot;LINZEPORE-TEST&quot;</span>/&gt;<br>    &lt;/bean&gt;<br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure><h2 id="IOC何时创建对象"><a href="#IOC何时创建对象" class="headerlink" title="IOC何时创建对象"></a>IOC何时创建对象</h2><p>在导入配置文件的时候就已经创建了对象，何以见得呢</p><p>可以从配置文件中配置了但是没有get出来的UserT对象得出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">#Test测试类<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">zeporeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) context.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>    &#125;<br>&#125;<br><br># 输出结果<br>创建了User实例~~<br>User二号生成了实例<br></code></pre></td></tr></table></figure><blockquote><p>另外：多个getBean也得到的同一个对象</p></blockquote><h2 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h2><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>alias起别名其实很简单，name-&gt;alias</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;user1&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h3><p>bean的id就是bean实例的唯一标识，class为bean对应的原型类（包名+类型），<strong>name也是别名且可以同时取多个别名</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.UserT&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user2 u2,ut1;ut&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;LINZEPORE2&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>用于团队，可以导入多个配置文件，使用的时候可以使用导入的app就行</p><p><code>applicationContext.xml+beans1.xml+beans2.xml+beans3.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;beans1.xml&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h2><p>首先理解依赖注入，依赖指的是配置好容器创建对象时候的必要参数（如有参构造等），注入指的就是容器创建对象的时候将<strong>这些必要的参数</strong>赋予实例。可以参考[官方的解释](<a href="https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-collaborators.html">Dependency Injection :: Spring Framework</a>)：</p><blockquote><p>Dependency injection (DI) is a process whereby objects define their dependencies (that is, the other objects with which they work) only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method. <strong>The container then injects those dependencies when it creates the bean</strong>.</p></blockquote><p>通过Student类进行一系列简单、Bean、复杂类型（所有的类型包括：bean | ref | idref | list | set | map | props | value | null）的注入方式进行演示</p><h3 id="setter注入"><a href="#setter注入" class="headerlink" title="setter注入"></a>setter注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.Name&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;林泽坡尔&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;EN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Linzepore&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.Address&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addr&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addr&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;广轻工&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;zipcode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;111111&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.Student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;addr&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;books&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>《CSS新世界》<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>《Java从入门到精通》<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>唱歌<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>跳舞<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>写代码<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;games&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>原神<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>崩坏<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>农药<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cards&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ID&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;111111111111111111&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;BANK&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;12121212121212&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;school&quot;</span>&gt;</span>GDIP<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;sid&quot;</span>&gt;</span>232323232<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wife&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="idref是什么？"><a href="#idref是什么？" class="headerlink" title="idref是什么？"></a>idref是什么？</h3><p>一开始我以为是把对象引用的形式作为参数传入，后面一直报错：<code>Property of &#39;re.zepo.pojo.Address&#39; type cannot be injected by &#39;String&#39;</code>，我就纳闷了，我格式也没写错呀。。。原来人家传的是Bean的id，是bean的id名称不是bean对象实例！！！！我猜测应该是可以在Bean出现别名的时候寻找真实Bean的id吧</p><h3 id="拓展注入"><a href="#拓展注入" class="headerlink" title="拓展注入"></a>拓展注入</h3><p>引入p命名空间(<a href="https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-properties-detailed.html#beans-p-namespace">Dependencies and Configuration in Detail :: Spring Framework</a>)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.User&quot;</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;Linzepore&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引入c命名空间（<a href="https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-properties-detailed.html#beans-c-namespace">Dependencies and Configuration in Detail :: Spring Framework</a>）:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:c</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/c&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.User&quot;</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">&quot;Linzepore&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h2><table><thead><tr><th>Scope</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-singleton">singleton</a></td><td>(Default) Scopes a single bean definition to a single object instance for each Spring IoC container.</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-prototype">prototype</a></td><td>Scopes a single bean definition to any number of object instances.</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-request">request</a></td><td>Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-session">session</a></td><td>Scopes a single bean definition to the lifecycle of an HTTP <code>Session</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-application">application</a></td><td>Scopes a single bean definition to the lifecycle of a <code>ServletContext</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/reference/web/websocket/stomp/scope.html">websocket</a></td><td>Scopes a single bean definition to the lifecycle of a <code>WebSocket</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr></tbody></table><p>单例模式（默认）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.something.DefaultAccountService&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- the following is equivalent, though redundant (singleton scope is the default) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.something.DefaultAccountService&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>原型模式，每次getBean都是新对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.something.DefaultAccountService&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h2><ul><li>自动装配是Spring满足bean依赖的一种方式</li><li>Spring会在上下文自动寻找并自动给bean装配属性</li></ul><p>在Spring有三种装配方式：</p><ol><li>在xml中显示配置【前面的例子】</li><li>java中显式配置【后面会提】</li><li>隐式配置中的自动装配【此处演示】</li></ol><p>隐式配置有两种方式，一种是通过名字，通过匹配参数名字与beanId，需要保证beanId唯一；另一种通过类型，需要保证需要注入的属性类型对应的bean唯一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.Cat&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.Dog&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.People&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;LINZEPORE&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.Cat&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.Dog&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;re.zepo.pojo.People&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;LINZEPORE&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="使用注解实现自动装配"><a href="#使用注解实现自动装配" class="headerlink" title="使用注解实现自动装配"></a>使用注解实现自动装配</h2><p>注解在JAVA1.5，Spring2.5就开始支持了</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul><li>配置文件需要加入注解约束</li></ul><p>​<code>http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</code>、<code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code></p><ul><li>配置文件需要加入注解支持</li></ul><p>​<code>&lt;context:annotation-config/&gt;</code></p><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>参考文章【<a href="https://zhuanlan.zhihu.com/p/610653086">Spring注解装配：@Autowired和@Resource使用及原理详解 - 知乎 (zhihu.com)</a>】、文档【<a href="https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/autowired.html">Using @Autowired :: Spring Framework</a>】</p><ul><li>直接在属性上使用，需要已经在xml中存在该类型的bean</li><li>在setter、constructor方法上使用，因为通过反射实现setter可以省略了</li><li>可以@Autowired(required&#x3D;false)来允许属性为空</li><li>当有多个类型的bean的时候<ul><li>如果有配合@Qualifier使用，会按照这个名字指定byName</li><li>如果没有，则按照变量名进行匹配，<code>查找name为xxx的bean</code></li></ul></li></ul><p>弹幕提示：<strong>Autowire优先按类型，找不到就报错，找到多个则按名字，Qualifier则是在有多个类型的情况下按名字</strong></p><h3 id="Nullable"><a href="#Nullable" class="headerlink" title="@Nullable"></a>@Nullable</h3><p>表示字段可以为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCat</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Cat cat)</span> &#123;<br>    <span class="hljs-built_in">this</span>.cat = cat;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><p>jdk11之后需要手动配置依赖导包，@Resource默认按byName自动注入，也提供按照byType 注入</p><p>当需要指定名字的时候，可以<code>@Resource(name=&quot;bc&quot;)</code></p><h2 id="使用注解进行开发"><a href="#使用注解进行开发" class="headerlink" title="使用注解进行开发"></a>使用注解进行开发</h2><h3 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h3><p>在spring4以后要使用注解开发，要检查aop是否导入</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307211431408.png" alt="image-20230721143120296"></p><p>前面注解需要增加注解的支持可以换成指定包下的组件扫描（这个包下的注解支持自然就开启了）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 原来<br><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br># 换成<br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;re.zepo&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="bean-1"><a href="#bean-1" class="headerlink" title="bean"></a>bean</h3><ul><li><p>@Component，放在类上，说明该类受Spring管理，容器也会创建Bean，相当于<code>&lt;bean /&gt;</code></p></li><li><p>类名的小写会默认视为bean的id</p></li></ul><h3 id="属性如何注入"><a href="#属性如何注入" class="headerlink" title="属性如何注入"></a>属性如何注入</h3><p>@Value，相当于<code>&lt;property&gt;</code>或者<code>constructor-arg</code></p><h3 id="衍生的注解"><a href="#衍生的注解" class="headerlink" title="衍生的注解"></a>衍生的注解</h3><p>@Component有几个衍生注解，比如web开发中分层架构中对应的三个：</p><ol><li>dao：@Repository</li><li>service：@Service</li><li>controller：@Controller</li></ol><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><p>@Autowired，查找现有bean进行注入</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>回忆在配置文件中是配置在bean字段中的，所以同样的@Scope要配在@Component附近，表示该bean受spring管理，然后注明存在的地方</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs xml">package re.zepo.pojo;<br><br>import org.springframework.beans.factory.annotation.Value;<br>import org.springframework.context.annotation.Scope;<br>import org.springframework.stereotype.Component;<br><br>@Scope(&quot;prototype&quot;)<br>@Component<br>public class User &#123;<br>    @Value(&quot;Linzepore&quot;)<br>    public String name;<br>    public int age;<br><br>    public String getName() &#123;<br>        return name;<br>    &#125;<br><br>    public void setName(String name) &#123;<br>        this.name = name;<br>    &#125;<br><br>    public int getAge() &#123;<br>        return age;<br>    &#125;<br><br>    @Value(&quot;20&quot;)<br>    public void setAge(int age) &#123;<br>        this.age = age;<br>    &#125;<br><br>    @Override<br>    public String toString() &#123;<br>        return &quot;User&#123;&quot; +<br>                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +<br>                &quot;, age=&quot; + age +<br>                &#x27;&#125;&#x27;;<br>    &#125;<br>&#125;<br><br># 测试<br>@Test<br>public void test01() &#123;<br>    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;ApplicationContext.xml&quot;);<br>     User user1 = (User) context.getBean(&quot;user&quot;);<br>    User user2 = (User) context.getBean(&quot;user&quot;);<br>    System.out.println(user1);<br>    System.out.println(user2);<br>    System.out.println(user1 == user2);<br>&#125;<br># 输出<br>User&#123;name=&#x27;Linzepore&#x27;, age=20&#125;<br>User&#123;name=&#x27;Linzepore&#x27;, age=20&#125;<br>false<br></code></pre></td></tr></table></figure><p>xml比较万能，使用所有场合，为何方便</p><p>注解 不是自己类使用不了，维护复杂</p><p>xml与注解一起的最佳实践</p><ul><li>xml用来管理bean</li><li>注解只负责完成属性的注入</li></ul><h2 id="JavaConfig"><a href="#JavaConfig" class="headerlink" title="JavaConfig"></a>JavaConfig</h2><p>完全使用注解的方式使用spring，全权交给Java来做</p><ul><li><p>@Configuration相当于<code>&lt;beans /&gt;</code>，在<code>&lt;beans /&gt;</code>中可以有bean，这里的bean来自于注解下方方法的返回，相当于<code>&lt;bean /&gt;</code></p></li><li><p>使用配置类进行spring的配置的时候，要搭配<code>AnnotationConfigApplicationContext</code>进行获取上下文对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(ZeporeConfig.class);<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br></code></pre></td></tr></table></figure></li><li><p>【全注解】<code>@ComponentScan + @Component</code> 等价于 <code>@Configuration + @Bean</code>（【注解加xml】<code>&lt;context:component-scan base-package=&quot;xxx&quot;/&gt; + @Component </code> 等价于 <code>&lt;beans&gt;&lt;bean/&gt;&lt;/beans&gt;</code>）</p></li><li><p>@Import注解用于导入其他的配置类</p></li></ul><h3 id="Bean跟-Component的区别"><a href="#Bean跟-Component的区别" class="headerlink" title="@Bean跟@Component的区别"></a>@Bean跟@Component的区别</h3><p>参考文章：<a href="https://juejin.cn/post/7054353299528482823">Spring @bean 和 @component 注解有什么区别？ - 掘金 (juejin.cn)</a></p><ol><li>作用对象不同：<code>@Component</code> 注解作用于类，而 <code>@Bean</code> 注解作用于方法</li><li><code>@Component</code> 通常是通过路径扫描来自动侦测以及自动<strong>装配到 Spring 容器</strong>中(我们可以使用 <code>@ComponentScan</code> 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中)。<br><code>@Bean</code> 注解通常是我们在标有该注解的方法中定义产生这个 bean，<code>@Bean</code> 告诉了 Spring 这是某个类的<strong>实例，当我们需要用它的时候还给我</strong>。</li><li><code>@Bean</code> 注解比 <code>@Component</code> 注解的自定义性更强，而且很多地方我们只能通过 <code>@Bean</code> 注解来注册 bean。<br><strong>比如当我们引用第三方库中的类需要装配到 Spring 容器时，只能通过 <code>@Bean</code> 来实现。</strong>（最重要的一点！）</li></ol><h3 id="Primary-Bean"><a href="#Primary-Bean" class="headerlink" title="@Primary+@Bean"></a>@Primary+@Bean</h3><p>@Primary用在有多个同类型Bean的时候，赋予@Atuwired的优先权</p><h3 id="Configuration-Bean"><a href="#Configuration-Bean" class="headerlink" title="@Configuration + @Bean"></a>@Configuration + @Bean</h3><p>@Configuration等价于<code>&lt;beans/&gt;</code>，@Bean等价于<code>&lt;bean/&gt;</code></p><p><a href="https://docs.spring.io/spring-framework/reference/core/beans/java/bean-annotation.html">Using the @Bean Annotation :: Spring Framework</a>；</p><h3 id="ComponentScan-Component"><a href="#ComponentScan-Component" class="headerlink" title="@ComponentScan + @Component"></a>@ComponentScan + @Component</h3><p>@ComponentScan等价于<code>&lt;context:component-scan base-package=&quot;xxx&quot;/&gt;</code>，@Component就依然是@Component</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>先浅浅这样理解吧，在官网看到逆天的操作，但仔细思考了很久，我就觉得是因为**@Configuration本身就是@Component、@Bean和@Component近乎同样处于低层**的缘故，但考虑到太绕，不继续深究，按照前面的理解就行，后面回来考古吧（链接：<a href="https://docs.spring.io/spring-framework/reference/core/beans/classpath-scanning.html#beans-factorybeans-annotations">Classpath Scanning and Managed Components :: Spring Framework</a>），附上一篇拓展的官方Java配置注解开发文档【<a href="https://docs.spring.io/spring-framework/reference/core/beans/java/composing-configuration-classes.html">Composing Java-based Configurations :: Spring Framework</a>】</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>代理类的要求：需要能做租客的功能，在租客功能的基础上增强，相当于套了一层，而真实业务以组合的形式由代理来决定调用（实现原业务类的实现接口 + 组合上原业务）</p><p>我的理解代理就是<strong>要能跟真实角色能做一样的内容（实现），同时对真实角色的方法做增强（组合）</strong></p><h3 id="房子租赁接口"><a href="#房子租赁接口" class="headerlink" title="房子租赁接口"></a>房子租赁接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">pulic <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Rent</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="房东实体"><a href="#房东实体" class="headerlink" title="房东实体"></a>房东实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Landlord</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rent</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//房东其他事务</span><br>        sout(<span class="hljs-string">&quot;房东租出房子&quot;</span>);<br>        <span class="hljs-comment">//房东其他事务</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="开发商实体"><a href="#开发商实体" class="headerlink" title="开发商实体"></a>开发商实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Devoloper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rent</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//开发商其他事务</span><br>        sout(<span class="hljs-string">&quot;开发商租出房子&quot;</span>);<br>        <span class="hljs-comment">//开发商其他事务</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中介"><a href="#中介" class="headerlink" title="中介"></a>中介</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rent</span> &#123;<br>    <span class="hljs-keyword">private</span> Rent host;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHost</span><span class="hljs-params">(Rent host)</span> &#123;<br>        <span class="hljs-built_in">this</span>.host = host;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//代理其他事务</span><br>        host.rent();<br>        <span class="hljs-comment">//代理其他事务</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试样例"><a href="#测试样例" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Rent</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Landlord</span>();<br>    <span class="hljs-type">Proxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>();<br>    proxy.setsetHost(host);<br>    proxy.rent();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="强制代理"><a href="#强制代理" class="headerlink" title="强制代理"></a>强制代理</h2><p>强制代理中，可以从要实现的结果倒推类的写法，我们需要实现一种结果：客户找房东必须通过中介，没有的话会有提示。也就说明<strong>房东类中需要判断调用者是否为中介</strong>。</p><h3 id="房子租赁接口-1"><a href="#房子租赁接口-1" class="headerlink" title="房子租赁接口"></a>房子租赁接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">iRent</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> Rent <span class="hljs-title function_">rentHouse</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="房东类"><a href="#房东类" class="headerlink" title="房东类"></a>房东类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Landlord <span class="hljs-keyword">implements</span> <span class="hljs-title class_">iRent</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">iRent</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Proxy</span> <span class="hljs-variable">proxy_</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>();<br>        proxy_.setProxy(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-built_in">this</span>.proxy = proxy_;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.proxy;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Rent <span class="hljs-title function_">rentHouse</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(isProxy()) &#123;<br>            sout(<span class="hljs-string">&quot;房东出租了房子&quot;</span>)；<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            sout(<span class="hljs-string">&quot;请找中介吧&quot;</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isProxy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> proxy != <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中介类"><a href="#中介类" class="headerlink" title="中介类"></a>中介类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">iRent</span> &#123;<br>    priavte iRent host;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHost</span><span class="hljs-params">(iRent host)</span> &#123;<br>        <span class="hljs-built_in">this</span>.host = host;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;;<br>    <span class="hljs-keyword">public</span> Rent <span class="hljs-title function_">rentHouse</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//代理其他事务</span><br>        host.rentHouse();<br>        <span class="hljs-comment">//代理其他事务</span><br>    &#125;;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="客户租房测试"><a href="#客户租房测试" class="headerlink" title="客户租房测试"></a>客户租房测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    psvm&#123;<br>        <span class="hljs-type">iRent</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Landlord</span>();<br>        host.rentHouse();<br>        <br>        <span class="hljs-type">iRent</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> host.getProxy();<br>        proxy.rentHouse();<br>    &#125;<br>&#125;<br><br>请找中介<br>中介推销<br>房东出租了房子<br>中介签合同<br></code></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ul><li>动态代理的代理是动态生成的，不是直接写好的</li><li>动态代理分两大类：基于接口的动态代理、基于类的动态代理<ul><li>基于接口——jdk动态代理</li><li>基于类——cglib</li><li>java字节码实现</li></ul></li></ul><p>动态代理主要通过<code>Proxy.newProxyInstance</code>实现，而其需要的三个参数分别是<code>ClassLoader loader</code> 、<code>Class&lt;?&gt;[] interfaces</code>、<code>InvocationHandler h</code>，代表了<strong>类加载器（<code>InvocationHandler</code>对象&#x2F;被代理对象 的 classLoader）</strong>、<strong>被代理对象的实现接口（<code>new Class[]&#123;被代理对象的接口1.class, 被代理对象的接口1.class&#125;</code> &#x2F; <code>被代理对象.getClass().getInterfaces()</code>）</strong>、<strong>自己重写的InvocationHandler实例</strong></p><p>在使用代理模式时，需要谨慎选择类加载器，以确保代理类和被代理类能够正确加载并且能够相互访问，要保证代理对象和被代理对象在同一个类加载器中加载，<strong>ClassLoader可以是<code>InvocationHandler</code>对象的，也可以是被代理对象的</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307240244234.png" alt="image-20230724024400176"></p><p>在实践中，可以<strong>将创建代理的过程一并写进InvocationHandler中，提供一个方法直接返回一个代理</strong>，这样在用户测试类中简洁很多，并且代理利用率高；也可以<strong>单纯重写InvocationHandler的invoke方法</strong>，这样做有助于加深理解</p><p>演示两种方式：</p><p><strong>房屋租赁类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">iRent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rentHouse</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>房东类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">landlord</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">iRent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rentHouse</span><span class="hljs-params">()</span> &#123;<br>        sout(<span class="hljs-string">&quot;房东租出了房子&quot;</span>)<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="直接返回代理"><a href="#直接返回代理" class="headerlink" title="直接返回代理"></a>直接返回代理</h3><p><strong>ProxyInvocationHandler类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> iRent host;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHost</span><span class="hljs-params">(iRent host)</span> &#123;<br>        <span class="hljs-built_in">this</span>.host = host;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span> <span class="hljs-params">(...)</span> &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(host, args);<br>    &#125;<br>    <span class="hljs-keyword">public</span> Proxy <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-built_in">this</span>.getClass().getClassLoader(), <span class="hljs-built_in">this</span>.host.getClass().getInterfaces(), <span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>用户测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    main&#123;<br>        <span class="hljs-type">iRent</span> <span class="hljs-variable">landlord</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Landlord</span>();<br>        <span class="hljs-type">ProxyInvocationHandler</span> <span class="hljs-variable">proxyInvocationHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>();<br>        proxyInvocationHandler.setHost(landlord);<br>        <span class="hljs-type">iRent</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (iRent)proxyInvocationHandler.getProxy();<br>        proxy.rentHouse();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="仅做好invoke的重写"><a href="#仅做好invoke的重写" class="headerlink" title="仅做好invoke的重写"></a>仅做好invoke的重写</h3><p><strong>ProxyInvocationHandler类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> proxyInvocationHandler <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> iRent host;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRent</span><span class="hljs-params">(iRent host)</span> &#123;<br>        <span class="hljs-built_in">this</span>.host = host;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(...)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;代理前&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(host, args);<br>        System.out.println(<span class="hljs-string">&quot;代理后&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用户测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    main&#123;<br>        <span class="hljs-type">iRent</span> <span class="hljs-variable">landlord</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Landlord</span>();<br>        <span class="hljs-type">ProxyHandler</span> <span class="hljs-variable">proxyHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyHandler</span>();<br>        proxyHandler.setObj(landlord);<br>        <br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> landlord.getClass().getClassLoader();<br>        <span class="hljs-type">iRent</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (iRent) Proxy.newProxyInstance(classLoader, landlord.getClass().getInterfaces(), proxyHandler);<br>        proxy.rentHouse();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代理优缺点"><a href="#代理优缺点" class="headerlink" title="代理优缺点"></a>代理优缺点</h2><p>代理模式的介绍：<a href="https://zhuanlan.zhihu.com/p/72644638">设计模式（四）——搞懂什么是代理模式 - 知乎 (zhihu.com)</a></p><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ol><li>可以是真实角色的操作更加纯粹！不同关注公共业务</li><li>实现业务的分工，代理角色处理琐事</li><li>公共业务发生拓展的时候方便集中管理</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>静态代理一个真实角色就会产生一个代理角色；</li><li>代码量翻倍</li><li>开发效率降低</li></ol><h2 id="AOP实现"><a href="#AOP实现" class="headerlink" title="AOP实现"></a>AOP实现</h2><p>AOP中的名词</p><ul><li>切面（Aspect）：一个关注点的模块化。以注解@Aspect的形式放在类上方，声明一个切面。<strong>自定义的增强类，也就是动态代理中的代理对象</strong></li><li>连接点（Joinpoint）：在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候都可以是连接点。<strong>被代理类所有的方法</strong></li><li>切点（Pointcut）：其实就是筛选出的连接点，匹配连接点的断言，一个类中的所有方法都是连接点，但又不全需要，会筛选出某些作为连接点做为切点。如果说通知定义了切面的动作或者执行时机的话，切点则定义了执行的地点。切入点表达式如何和连接点匹配是AOP的核心：Spring缺省使用AspectJ切入点语法。<strong>被代理类接受了增强之后的方法，加了增强</strong></li><li>通知（Advice）：通知增强，需要完成的工作叫做通知，就是你写的业务逻辑中需要比如事务、日志等先定义好，然后需要的地方再去用。 主要包括5个注解：Before，After，AfterReturning，AfterThrowing，Around。 @Before：在切点方法之前执行。 @After：在切点方法之后执行 @AfterReturning：切点方法返回后执行 @AfterThrowing：切点方法抛异常执行 @Around：属于环绕增强，能控制切点执行前，执行后，用这个注解后，程序抛异常，会影响@AfterThrowing这个注解<strong>自定义的增强类中的方法，也就是横向的增强</strong></li></ul><p>其中重要的名词有：切面（Aspect），切点（Pointcut）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">个人理解：<br>- 横切关注点：一种增强行为的类的集合 Logs（Log1+Log2+...）<br>- 切面：这种行为中特定的类 Log1<br>- 通知：特定类中的增强方法<br>- 切入点：被代理的类（接受增强的类）的方法<br>- 连接点：被代理类的所有方法，数量大于等于切入点<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202307282343888.png" alt="image-20230728234305275"></p><h3 id="实现方式一：通过实现通知接口方式"><a href="#实现方式一：通过实现通知接口方式" class="headerlink" title="实现方式一：通过实现通知接口方式"></a>实现方式一：通过实现通知接口方式</h3><p><strong>【配置 <u>实现式</u>切入点+增强方式（前后通知在接口实现的时候就已经确定）】</strong></p><h4 id="注意：在拿bean的时候需要用接口"><a href="#注意：在拿bean的时候需要用接口" class="headerlink" title="注意：在拿bean的时候需要用接口"></a>注意：在拿bean的时候需要用接口</h4><ol><li>引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>实现环绕类</li></ol><p>​在Spring中的AOP有6种增强方式，分别是：</p><ul><li><p>前置增强 (org.springframework.aop.MethodBeforeAdvice) 表示在目标方法执行前来实施增强 </p></li><li><p>后置增强（org.springframework.aop.AfterAdvice）表示在目标方法执行后返回前来实施增强，这个没能用上</p><ul><li><pre><code># 会报这个错误Exception in thread &quot;main&quot; org.springframework.aop.framework.adapter.UnknownAdviceTypeException: Advice object [log.LogAfter@5ba3f27a] is neither a supported subinterface of [org.aopalliance.aop.Advice] nor an [org.springframework.aop.Advisor]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>- 环绕增强 (org.aopalliance.intercept.MethodInterceptor) 表示在目标方法执行前后同时实施增强 <br><br>- 最终增强 (org.springframework.aop.AfterReturningAdvice) 表示在目标方法执行并返回后来实施增强 <br><br>- 异常抛出增强 (org.springframework.aop.ThrowsAdvice) 表示在目标方法抛出异常后来实施增强 <br><br>- 引介增强 (org.springframework.aop.introductioninterceptor) 表示在目标类中添加一些新的方法和属性<br><br>3. 注册aop命名空间<br><br>- `xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;`<br><br>- `xsi:schemaLocation=&quot;http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;`<br><br>4. 配置 切入点+增强方式<br><br>​关于pointcut的表达式写法：[spring aop中pointcut表达式完整版 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/63001123)<br><br>```xml<br>&lt;aop:config&gt;<br>    &lt;aop:pointcut id=&quot;pt&quot; expression=&quot;execution(* 类名.*(..))&quot; /&gt;<br>&lt;!-- pointcut-ref --&gt;    <br>    &lt;aop:advisor advice-ref=&quot;&quot; pointcut-ref=&quot;pt&quot; /&gt;<br>&lt;!-- 非pointcut-ref --&gt;    <br>    &lt;aop:advisor advice-ref=&quot;&quot; pointcut=&quot;execution(* 类名.*(..))&quot;/&gt;<br>    <br>&lt;/aop:config&gt;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h3 id="实现方式二：在配置文件引入自定义切面"><a href="#实现方式二：在配置文件引入自定义切面" class="headerlink" title="实现方式二：在配置文件引入自定义切面"></a>实现方式二：在配置文件引入自定义切面</h3><p><strong>【切面+增强方法（前后通知在配置文件中的切面进行配置）】</strong></p><h4 id="注意：在拿bean的时候需要用接口-1"><a href="#注意：在拿bean的时候需要用接口-1" class="headerlink" title="注意：在拿bean的时候需要用接口"></a>注意：在拿bean的时候需要用接口</h4><p><strong>缺点是拿不到被代理的参数</strong></p><ol><li>引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>自定义切面类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> log;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogMany</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;======调用前======&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;======调用后======&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>配置切面以及增强通知</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;us1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;service.UserServiceImpl&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;log-many&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;log.LogMany&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;log-many&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userServicePT&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* service.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;userServicePT&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(* service.UserServiceImpl.*(..))&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="实现方式三：注解引入自定义切面"><a href="#实现方式三：注解引入自定义切面" class="headerlink" title="实现方式三：注解引入自定义切面"></a>实现方式三：注解引入自定义切面</h3><p><strong>【注解实现+由spring接管bean+开启切面通知支持】</strong></p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意：&lt;aop:aspectj-autoproxy&gt;"></a>注意：<code>&lt;aop:aspectj-autoproxy&gt;</code></h4><p>在<code>&lt;aop:aspectj-autoproxy&gt;</code>的<code> proxy-target-class</code>属性：JDK(默认 proxy-target-class&#x3D;”false”) cglib (proxy-target-class&#x3D;”true”)</p><p>区别是jdk只能代理接口实现类，而cglib可以代理没有实现接口的类</p><ol><li>引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>注解实现自定义切面类</li></ol><p><strong>※ 环绕的注解使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> log;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.After;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<br><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogConfig</span> &#123;<br>    <span class="hljs-meta">@Before(&quot;execution(* service.UserServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;注解实现方法执行前通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;execution(* service.UserServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;注解实现方法执行后通知&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Around(&quot;execution(* service.UserServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;注解、环绕实现方法执行前通知&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            joinPoint.proceed();<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;注解、环绕实现方法执行后通知&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>注册bean并开启注解支持</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  注册受代理实例  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;us1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;service.UserServiceImpl&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--  加入切面类，注册实例，此时上面受代理的实例都会经过代理了  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;log-config&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;log.LogConfig&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!--  开启注解支持  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> /&gt;</span> <span class="hljs-comment">&lt;!--JDK(默认 proxy-target-class=&quot;false&quot;) cglib (proxy-target-class=&quot;true&quot;)--&gt;</span><br></code></pre></td></tr></table></figure><p>一份参考输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">@Aspect<br>public class AnnoLogger &#123;<br>    @Before(&quot;execution(* service.ShopServiceImpl.*(..))&quot;)<br>    public void before() &#123;<br>        System.out.println(&quot;注解引入自定义切面，在方式执行前通知&quot;);<br>    &#125;<br><br>    @After(&quot;execution(* service.ShopServiceImpl.*(..))&quot;)<br>    public void after() &#123;<br>        System.out.println(&quot;注解引入自定义切面，在方法执行后通知&quot;);<br>    &#125;<br><br>    @Around(&quot;execution(* service.ShopServiceImpl.*(..))&quot;)<br>    public void around(ProceedingJoinPoint proceedingJoinPoint) &#123;<br>        System.out.println(&quot;注解引入自定义切面类，环绕中在方法的前通知&quot;);<br>        try &#123;<br>            Object proceed = proceedingJoinPoint.proceed();<br>            System.out.println(&quot;proceed: &quot; + proceed);<br>            System.out.println(&quot;proceedingJoinPoint&quot; + proceedingJoinPoint);<br>            System.out.println(&quot;proceedingJoinPoint.getSignature&quot; + proceedingJoinPoint.getSignature());<br>        &#125; catch (Throwable e) &#123;<br>            throw new RuntimeException(e);<br>        &#125;<br>        System.out.println(&quot;注解实现自定义切面类，环绕中在方法的后面通知&quot;);<br>    &#125;<br>&#125;<br>&gt;&gt;&gt;<br>注解引入自定义切面类，环绕中在方法的前通知<br>注解引入自定义切面，在方式执行前通知<br>买入<br>注解引入自定义切面，在方法执行后通知<br>proceed: null<br>proceedingJoinPointexecution(void service.ShopService.buy())<br>proceedingJoinPoint.getSignaturevoid service.ShopService.buy()<br>注解实现自定义切面类，环绕中在方法的后面通知<br></code></pre></td></tr></table></figure><h3 id="AOP常见问题"><a href="#AOP常见问题" class="headerlink" title="AOP常见问题"></a>AOP常见问题</h3><h4 id="切入点实例无法构建"><a href="#切入点实例无法构建" class="headerlink" title="切入点实例无法构建"></a>切入点实例无法构建</h4><ul><li><p>报错：Exception in thread “main” org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘shopper’ defined in class path resource [ApplicationXMLContext.xml]: BeanPostProcessor before instantiation of bean failed</p></li><li><p>解决：这个一般来说是因为代理类的依赖没有引入</p></li></ul><h4 id="getBean的时候类型错误"><a href="#getBean的时候类型错误" class="headerlink" title="getBean的时候类型错误"></a>getBean的时候类型错误</h4><ul><li>报错：Exception in thread “main” org.springframework.beans.factory.BeanNotOfRequiredTypeException: Bean named ‘us1’ is expected to be of type ‘service.UserServiceImpl’ but was actually of type ‘jdk.proxy2.$Proxy3’</li><li>解决：这个是因为一般默认地使用jdk中的代理方式；如果使用注解开发可以选择代理的方式</li></ul><h4 id="未知的通知"><a href="#未知的通知" class="headerlink" title="未知的通知"></a>未知的通知</h4><ul><li>报错：Exception in thread “main” org.springframework.aop.framework.adapter.UnknownAdviceTypeException: Advice object [log.LogAfter@5ba3f27a] is neither a supported subinterface of [org.aopalliance.aop.Advice] nor an [org.springframework.aop.Advisor]</li><li>解决：像<code>AfterAdvice</code>这样的接口，没有可重写的，就表明不能用于直接在配置文件中声明通知，常见的第一种方式（实现接口的方式）可用的接口有：<code>MethodBeforeAdvice</code>、<code>AfterReturningAdvice</code>、<code>ThrowsAdvice</code>、<code>MethodInterceptor</code></li></ul><h2 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h2><h3 id="回顾MyBatis"><a href="#回顾MyBatis" class="headerlink" title="回顾MyBatis"></a>回顾MyBatis</h3><ol><li>配置依赖：mybatis、junit、jdbc、spring-mvc、spring-aop、mybatis-spring</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>配置实体类&#x2F;DAO</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&#x27;&quot;</span> + id + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>Mapper接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">selectByName</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>Mapper xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--要跟方法名保持一致--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByName&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from spring_user where username = &#x27;suzume&#x27;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="5"><li>配置数据库环境相关文件，记得加上mapper</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--以包取别名，默认别名是小写类类名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;po&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/spring_study?useSSL=false&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;pwofmysql&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapper&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;mapper class=&quot;mapper.UserMapper&quot;/&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="6"><li>加入xml文件扫描支持</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--     如果加了上面的之后连配置文件都找不到了，就配置下面的       --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="7"><li>测试类中的步骤</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource)) &#123;<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-type">TeacherMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TeacherMapper.class);<br>        System.out.println(mapper.queryAllTeachers());<br>        sqlSession.close();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="常见出错"><a href="#常见出错" class="headerlink" title="常见出错"></a>常见出错</h4><p>找不到xml文件</p><ul><li>报错：Invalid bound statement (not found): mapper.UserMapper.selectByName</li><li>解决：pom.xml中加入以下内容</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>没有注册mapper</p><ul><li>报错：Exception in thread “main” org.apache.ibatis.binding.BindingException: Type interface mapper.UserMapper is not known to the MapperRegistry.</li><li>解决：在<strong>mybatis配置文件</strong>中注册mapper</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--方法一--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapper&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--方法二--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mapper.UserMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>驱动找不到</p><ul><li>报错：Loading class <code>com.mysql.jdbc.Driver</code>. This is deprecated. The new driver class is <code>com.mysql.cj.jdbc.Driver</code>. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</li><li>解决：<strong>mybatis配置文件</strong>中修改一下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="整合mybatis方法一"><a href="#整合mybatis方法一" class="headerlink" title="整合mybatis方法一"></a>整合mybatis方法一</h3><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202308102302285.png" alt="image-20230810230242164"></p><p>原理上是改装test类，把<strong>数据源和SqlSessionFactory</strong>改到spring配置文件中，把sqlSession的操作改到接口实现类中</p><ol><li>引入依赖spring-jdbc（而不是单纯的jdbc）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在spring配置文件中配置mybatis的DataSource，也就是原本mybatis配置文件中的那部分</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/spring_study?useSSL=false&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;pwofmysql&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>配置SqlSessionFactory（绑定数据源和mybatis位置等在mybatis配置文件的信息）</p><pre><code>- 数据源：`dataSource `&lt;-- `&lt;environments/&gt;`- mybatis位置：`configLocation` &lt;-- `Resources.getResourceAsStream()`中的位置参数- mapper位置：`mapperLocations` &lt;-- `&lt;mappers/&gt;`- 别名配置：`typeAliasesPackage` &lt;-- `&lt;typeAliases/&gt;`</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mapper/*.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeAliasesPackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;po&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置SqlSessionTemplate（等同于SqlSession）</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="5"><li>检查xml文件是否并且已经接受扫描，实现Mapper接口，记得使用组合形式方便注入SqlSession</li></ol><p>​xml规定了sql怎么写（对应的id），而Impl规定了何时执行sql</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserMapperImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserMapper</span>&#123;<br>    <span class="hljs-keyword">private</span> SqlSessionTemplate sqlSessionTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSqlSessionTemplate</span><span class="hljs-params">(SqlSessionTemplate sqlSessionTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sqlSessionTemplate = sqlSessionTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">selectByName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sqlSessionTemplate.getMapper(UserMapper.class).selectByName();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="6"><li>测试类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-dao.xml&quot;</span>);<br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;userMapper&quot;</span>, UserMapper.class);<br>System.out.println(userMapper.selectByName());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="整合mybatis方法二"><a href="#整合mybatis方法二" class="headerlink" title="整合mybatis方法二"></a>整合mybatis方法二</h3><p><img src="https://cdn.jsdelivr.net/gh/linzepore/pc1_imgs@main/img/202308102303457.png" alt="image-20230810230338416"></p><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Course</span> &#123;<br>    <span class="hljs-keyword">private</span> String t_id;<br>    <span class="hljs-keyword">private</span> String course_name;<br>    <span class="hljs-keyword">private</span> Integer c_id;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Course&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;t_id=&#x27;&quot;</span> + t_id + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, course_name=&#x27;&quot;</span> + course_name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, c_id=&quot;</span> + c_id +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getT_id</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> t_id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setT_id</span><span class="hljs-params">(String t_id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.t_id = t_id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCourse_name</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> course_name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCourse_name</span><span class="hljs-params">(String course_name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.course_name = course_name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getC_id</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> c_id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setC_id</span><span class="hljs-params">(Integer c_id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.c_id = c_id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CourseMapper</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Course&gt; <span class="hljs-title function_">queryAllCourses</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写Mapper对应sql语句的xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;mapper.CourseMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryAllCourses&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Course&quot;</span>&gt;</span><br>        select * from spring_course<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>实现Mapper接口的同时继承SqlSessionDaoSupport</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CourseMapperImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SqlSessionDaoSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CourseMapper</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Course&gt; <span class="hljs-title function_">queryAllCourses</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getSqlSession().getMapper(CourseMapper.class).queryAllCourses();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写mybatis以及spring-dao配置文件，数据源、SqlSessionFactory</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"># mybatis 配置文件<br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--以包取别名，默认别名是小写类类名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"># spring-dao 配置文件<br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;pwofmysql&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/spring_study?useSSL=false&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mapper/*.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;courseMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mapper.CourseMapperImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>pom文件加上扫描xml路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--     如果加了上面的之后连配置文件都找不到了，就配置下面的       --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-dao.xml&quot;</span>);<br>    <span class="hljs-type">CourseMapper</span> <span class="hljs-variable">courseMapper</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;courseMapper&quot;</span>, CourseMapper.class);<br>    System.out.println(courseMapper.queryAllCourses());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="Spring声明式事务"><a href="#Spring声明式事务" class="headerlink" title="Spring声明式事务"></a>Spring声明式事务</h2><h3 id="回顾事务"><a href="#回顾事务" class="headerlink" title="回顾事务"></a>回顾事务</h3><p>为什么需要事务？</p><ul><li>原子性、一致性、持久性、隔离性</li><li>要么都完成，要么都不完成</li></ul><h3 id="声明式事务结合AOP实现"><a href="#声明式事务结合AOP实现" class="headerlink" title="声明式事务结合AOP实现"></a>声明式事务结合AOP实现</h3><p>整合mybatis的基础上</p><ol><li><p>创建事务bean，传入数据源bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置事务通知</p><p>关于事务的传播，可以参考 <a href="https://blog.csdn.net/u011305680/article/details/79206408">7种事务的传播机制_青鱼入云的博客-CSDN博客</a>：</p><ul><li>REQUIRED（默认）：支持使用当前事务，如果当前事务不存在，创建一个新事务。</li><li>SUPPORTS：支持使用当前事务，如果当前事务不存在，则不使用事务。</li><li>MANDATORY：中文翻译为强制，支持使用当前事务，如果当前事务不存在，则抛出Exception。</li><li>REQUIRES_NEW：创建一个新事务，如果当前事务存在，把当前事务挂起。</li><li>NOT_SUPPORTED：无事务执行，如果当前事务存在，把当前事务挂起。</li><li>NEVER：无事务执行，如果当前有事务则抛出Exception。</li><li>NESTED：嵌套事务，如果当前事务存在，那么在嵌套的事务中执行。如果当前事务不存在，则表现跟REQUIRED一样。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;modifyUser&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;queryUser&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置切面以及切入点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(* mapper.*.*(..))&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试前，制造错误delete语句与制造前对比</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;ApplicationContext.xml&quot;</span>);<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;userMapper&quot;</span>, UserMapper.class);<br>    System.out.println(userMapper.queryUser());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring学习笔记&quot;&gt;&lt;a href=&quot;#Spring学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Spring学习笔记&quot;&gt;&lt;/a&gt;Spring学习笔记&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;源代码托管在&lt;a href=&quot;https://github.</summary>
      
    
    
    
    <category term="SSM" scheme="https://blog.zepo.re/categories/SSM/"/>
    
    <category term="Spring" scheme="https://blog.zepo.re/categories/SSM/Spring/"/>
    
    
    <category term="tech" scheme="https://blog.zepo.re/tags/tech/"/>
    
    <category term="SSM" scheme="https://blog.zepo.re/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>查漏补缺 - 23-04-11</title>
    <link href="https://blog.zepo.re/2023/04/11/2023-04-11.html/"/>
    <id>https://blog.zepo.re/2023/04/11/2023-04-11.html/</id>
    <published>2023-04-11T10:43:50.000Z</published>
    <updated>2023-04-11T10:55:20.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查漏补缺-23-04-11"><a href="#查漏补缺-23-04-11" class="headerlink" title="查漏补缺 - 23-04-11"></a>查漏补缺 - 23-04-11</h1><h2 id="solidity-struct的赋值"><a href="#solidity-struct的赋值" class="headerlink" title="solidity - struct的赋值"></a>solidity - struct的赋值</h2><p>在<code>mapping(uint256 =&gt; ProductData) private _product;</code>中，  </p><p>知道所有值的时候</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_product[traceNumber] = ProductData(&#123;xxx:xxx,...&#125;)</span><br></pre></td></tr></table></figure><p>只知道一部分值的时候</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_product[traceNumber].tracenumber = xxx;</span><br><span class="line">_product[traceNumber].product.XXX = xxx;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;查漏补缺-23-04-11&quot;&gt;&lt;a href=&quot;#查漏补缺-23-04-11&quot; class=&quot;headerlink&quot; title=&quot;查漏补缺 - 23-04-11&quot;&gt;&lt;/a&gt;查漏补缺 - 23-04-11&lt;/h1&gt;&lt;h2 id=&quot;solidity-struct的赋</summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/categories/Learning/Vue2/"/>
    
    <category term="solidity" scheme="https://blog.zepo.re/categories/Learning/solidity/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="solidity" scheme="https://blog.zepo.re/tags/solidity/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="Vue2" scheme="https://blog.zepo.re/tags/Vue2/"/>
    
  </entry>
  
  <entry>
    <title>uCharts - 23-04-09</title>
    <link href="https://blog.zepo.re/2023/04/09/2023-04-09.html/"/>
    <id>https://blog.zepo.re/2023/04/09/2023-04-09.html/</id>
    <published>2023-04-09T12:49:50.000Z</published>
    <updated>2023-04-10T01:42:39.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="uniapp-23-04-09"><a href="#uniapp-23-04-09" class="headerlink" title="uniapp - 23-04-09"></a>uniapp - 23-04-09</h1><h2 id="uCharts与eCharts"><a href="#uCharts与eCharts" class="headerlink" title="uCharts与eCharts"></a>uCharts与eCharts</h2><p>为什么会做这个？eCharts不香吗</p><blockquote><p>呃呃，eCharts因为涉及大量dom操作，微信小程序上会报错，uCharts对小程序兼容性较好</p></blockquote><h2 id="食用方式"><a href="#食用方式" class="headerlink" title="食用方式"></a>食用方式</h2><p>先看看官方的例子，后面再以一个菜鸟的角度分解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;canvas canvas-id=&quot;column&quot; id=&quot;column&quot; class=&quot;charts&quot; @touchend=&quot;tap&quot;/&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import uCharts from &#x27;../../../js/uCharts-master/uni-app/uCharts-原生/u-charts.min.js&#x27;</span><br><span class="line"></span><br><span class="line">var uChartsInstance = &#123;&#125;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      cWidth: 750,</span><br><span class="line">      cHeight: 500</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  onReady() &#123;</span><br><span class="line">    //这里的 750 对应 css .charts 的 width</span><br><span class="line">    this.cWidth = uni.upx2px(750);</span><br><span class="line">    //这里的 500 对应 css .charts 的 height</span><br><span class="line">    this.cHeight = uni.upx2px(500);</span><br><span class="line">    this.getServerData();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getServerData() &#123;</span><br><span class="line">      //模拟从服务器获取数据时的延时</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        //模拟服务器返回数据，如果数据格式和标准格式不同，需自行按下面的格式拼接</span><br><span class="line">        let res = &#123;</span><br><span class="line">            categories: [&quot;2016&quot;,&quot;2017&quot;,&quot;2018&quot;,&quot;2019&quot;,&quot;2020&quot;,&quot;2021&quot;],</span><br><span class="line">            series: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: &quot;目标值&quot;,</span><br><span class="line">                data: [35,36,31,33,13,34]</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: &quot;完成量&quot;,</span><br><span class="line">                data: [18,27,21,24,6,28]</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;;</span><br><span class="line">        this.drawCharts(&#x27;column&#x27;, res);</span><br><span class="line">      &#125;, 500);</span><br><span class="line">    &#125;,</span><br><span class="line">    drawCharts(id,data)&#123;</span><br><span class="line">      const ctx = uni.createCanvasContext(id, this);</span><br><span class="line">      uChartsInstance[id] = new uCharts(&#123;</span><br><span class="line">        type: &quot;column&quot;,</span><br><span class="line">        context: ctx,</span><br><span class="line">        width: this.cWidth,</span><br><span class="line">        height: this.cHeight,</span><br><span class="line">        categories: data.categories,</span><br><span class="line">        series: data.series,</span><br><span class="line">        animation: true,</span><br><span class="line">        background: &quot;#FFFFFF&quot;,</span><br><span class="line">        padding: [15,15,0,5],</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          disableGrid: true</span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;</span><br><span class="line">          data: [&#123;min: 0&#125;]</span><br><span class="line">        &#125;,</span><br><span class="line">        extra: &#123;</span><br><span class="line">          column: &#123;</span><br><span class="line">            type: &quot;group&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    tap(e)&#123;</span><br><span class="line">      uChartsInstance[e.target.id].touchLegend(e);</span><br><span class="line">      uChartsInstance[e.target.id].showToolTip(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .charts&#123;</span><br><span class="line">    width: 750rpx;</span><br><span class="line">    height: 500rpx;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>涉及到的方法有：<code>getServerData()</code>模拟从服务器获取数据的时间延时，同时会调用<code>drawChart(canvasID)</code>，<code>drawChart(canvasID)</code>的逻辑是先创建canvas画布实例（canvasId+this），在创建uCharts实例，uCharts实例引用至canvasId索引的uCharts对象，<br>创建实例的配置里面给定表格类型type、绑定画布实例context、width、height、categories <strong>（同一series不同category间的颜色一样）</strong>、series <strong>（同一categorie不同series间的颜色不同）</strong>、extra&gt;column&gt;type:”group”（实测在多个series的时候不能缺少）<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304092104682.png"></p><h2 id="关于样式的必要性"><a href="#关于样式的必要性" class="headerlink" title="关于样式的必要性"></a>关于样式的必要性</h2><p>首先，vc的data中宽高有必要吗？<br>答案是：不写不影响效果的呈现但是写了就有了Vue的数据代理（响应式的数据）<br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304092157973.png"><br><code>uni.upx2px</code>的作用？<br>答案是：将rpx单位值转换成px，参考<a href="https://uniapp.dcloud.net.cn/api/ui/font.html#upx2px">uni.upx2px()</a><br>最后最后，style也不能缺需要赋予同等宽高（方便记忆，也许不一定要一样）</p><h2 id="关于categories与series"><a href="#关于categories与series" class="headerlink" title="关于categories与series"></a>关于categories与series</h2><p>categories <strong>（同一series不同category间的颜色一样）</strong>，series <strong>（同一categorie不同series间的颜色不同）</strong><br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304092119612.png"><br><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304092121913.png">  </p><h2 id="去掉图例以及扩大间距"><a href="#去掉图例以及扩大间距" class="headerlink" title="去掉图例以及扩大间距"></a>去掉图例以及扩大间距</h2><p><a href="https://www.ucharts.cn/v2/#/document/index">图例配置 opts.legend</a>、<a href="https://www.ucharts.cn/v2/#/document/index">扩展配置&gt;柱状图</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//图例</span><br><span class="line">legend:&#123;</span><br><span class="line">show:false</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">extra:&#123;</span><br><span class="line">column:&#123;</span><br><span class="line">type:&#x27;group&#x27;,</span><br><span class="line">//多属性间距</span><br><span class="line">seriesGap:20,</span><br><span class="line">//柱的宽度</span><br><span class="line">width:140</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下溢出的处理"><a href="#下溢出的处理" class="headerlink" title="下溢出的处理"></a>下溢出的处理</h2><blockquote><p>手动加上y轴的值：<a href="https://www.ucharts.cn/v2/#/document/index">多Y轴配置 opts.yAxis.data[i]</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yAxis:&#123;</span><br><span class="line">data:[</span><br><span class="line">&#123;min:0,max:90&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304092153906.png"></p><h2 id="附上样题的柱状图复现代码"><a href="#附上样题的柱状图复现代码" class="headerlink" title="附上样题的柱状图复现代码"></a>附上样题的柱状图复现代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;canvas class=&quot;uctest&quot; id=&quot;uctest&quot; canvas-id=&quot;uctest&quot; @touchend=&quot;tap&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import uCharts from &#x27;../../../js/uCharts-master/uni-app/uCharts-原生/u-charts&#x27;</span><br><span class="line">var uChartsInstances = &#123;&#125;</span><br><span class="line">export default &#123;</span><br><span class="line">onReady() &#123;</span><br><span class="line">this.cWidth = uni.upx2px(750)</span><br><span class="line">this.cHeight = uni.upx2px(500)</span><br><span class="line">this.getServerData()</span><br><span class="line">&#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">chartData:&#123;&#125;,</span><br><span class="line">cWidth:750,</span><br><span class="line">cHeight:500</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">getServerData() &#123;</span><br><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">let res = &#123;</span><br><span class="line">categories:[&#x27;&#x27;],//不写就不会显示</span><br><span class="line">series:[</span><br><span class="line">&#123;</span><br><span class="line">name:&#x27;第一种&#x27;,</span><br><span class="line">data:[82]</span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line">name:&#x27;第二种&#x27;,</span><br><span class="line">data:[63]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">this.chartData = JSON.parse(JSON.stringify(res))</span><br><span class="line">this.drawChart(&#x27;uctest&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">,300)</span><br><span class="line">&#125;,</span><br><span class="line">drawChart(id,data) &#123;</span><br><span class="line">const canvasInstance = uni.createCanvasContext(id,this)</span><br><span class="line">uChartsInstances[id] = new uCharts(&#123;</span><br><span class="line">type:&#x27;column&#x27;,</span><br><span class="line">context:canvasInstance,</span><br><span class="line">width:this.cWidth,</span><br><span class="line">height:this.cHeight,</span><br><span class="line">categories:this.chartData.categories,</span><br><span class="line">series:this.chartData.series,</span><br><span class="line">animation:true,</span><br><span class="line">padding:[15,15,0,5],</span><br><span class="line">legend:&#123;</span><br><span class="line">show:false</span><br><span class="line">&#125;,</span><br><span class="line">yAxis:&#123;</span><br><span class="line">data:[</span><br><span class="line">&#123;min:0,max:90&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">extra:&#123;</span><br><span class="line">column:&#123;</span><br><span class="line">type:&#x27;group&#x27;,</span><br><span class="line">seriesGap:20,</span><br><span class="line">width:140</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">tap(e)&#123;</span><br><span class="line">console.log(uChartsInstances[e.target.id]);</span><br><span class="line">uChartsInstances[e.target.id].touchLegend(e)</span><br><span class="line">uChartsInstances[e.target.id].showToolTip(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.uctest&#123;</span><br><span class="line">width: 750rpx;</span><br><span class="line">height: 500rpx;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="以上，uCharts新手的原生方式探索之路"><a href="#以上，uCharts新手的原生方式探索之路" class="headerlink" title="以上，uCharts新手的原生方式探索之路"></a>以上，uCharts新手的原生方式探索之路</h2><p>昨天其实已经试过uCharts的组件方式跟eCharts的原生方式，感觉uCharts的组件方式特别适合小程序，而eCharts的原生方式比uCharts的原生方式更友好一些</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;uniapp-23-04-09&quot;&gt;&lt;a href=&quot;#uniapp-23-04-09&quot; class=&quot;headerlink&quot; title=&quot;uniapp - 23-04-09&quot;&gt;&lt;/a&gt;uniapp - 23-04-09&lt;/h1&gt;&lt;h2 id=&quot;uCharts与e</summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="uCharts" scheme="https://blog.zepo.re/categories/Learning/uCharts/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="uCharts" scheme="https://blog.zepo.re/tags/uCharts/"/>
    
  </entry>
  
  <entry>
    <title>网课文档 | uni-app的基本使用</title>
    <link href="https://blog.zepo.re/2023/04/05/uniapp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html/"/>
    <id>https://blog.zepo.re/2023/04/05/uniapp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html/</id>
    <published>2023-04-05T03:39:23.000Z</published>
    <updated>2023-04-05T04:17:49.370Z</updated>
    
    <content type="html"><![CDATA[<h4 id="uni-app的基本使用"><a href="#uni-app的基本使用" class="headerlink" title="uni-app的基本使用"></a>uni-app的基本使用</h4><p>课程介绍：</p><p>基础部分：</p><ul><li>环境搭建</li><li>页面外观配置</li><li>数据绑定</li><li>uni-app的生命周期</li><li>组件的使用</li><li>uni-app中样式学习</li><li>在uni-app中使用字体图标和开启scss</li><li>条件注释跨端兼容</li><li>uni中的事件</li><li>导航跳转</li><li>组件创建和通讯，及组件的生命周期</li><li>uni-app中使用uni-ui库</li></ul><p>项目：黑马商城项目</p><h5 id="uni-app介绍-官方网页"><a href="#uni-app介绍-官方网页" class="headerlink" title="uni-app介绍 官方网页"></a>uni-app介绍 <a href="https://uniapp.dcloud.io/resource">官方网页</a></h5><p><code>uni-app</code> 是一个使用 <a href="https://vuejs.org/">Vue.js</a> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信&#x2F;支付宝&#x2F;百度&#x2F;头条&#x2F;QQ&#x2F;钉钉）等多个平台。</p><p>即使不跨端，<code>uni-app</code>同时也是更好的小程序开发框架。</p><p>具有vue和微信小程序的开发经验，可快速上手uni-app</p><p>为什么要去学习uni-app？</p><p>相对开发者来说，减少了学习成本，因为只学会uni-app之后，即可开发出iOS、Android、H5、以及各种小程序的应用，不需要再去学习开发其他应用的框架，相对公司而言，也大大减少了开发成本。</p><h5 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h5><p>安装编辑器HbuilderX  <a href="https://www.dcloud.io/hbuilderx.html">下载地址</a></p><p>HBuilderX是通用的前端开发工具，但为<code>uni-app</code>做了特别强化。</p><p>下载App开发版，可开箱即用</p><p>安装微信开发者工具 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">下载地址</a></p><h5 id="利用HbuilderX初始化项目"><a href="#利用HbuilderX初始化项目" class="headerlink" title="利用HbuilderX初始化项目"></a>利用HbuilderX初始化项目</h5><ul><li><p>点击HbuilderX菜单栏文件&gt;项目&gt;新建</p></li><li><p>选择uni-app,填写项目名称，项目创建的目录</p><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304051217455.png"></p></li></ul><h5 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h5><p>在菜单栏中点击运行，运行到浏览器，选择浏览器即可运行</p><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具，即可在微信开发者工具里面体验uni-app</p><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到手机或模拟器 -&gt; 选择调式的手机</p><p><strong>注意：</strong></p><ul><li>如果是第一次使用，需要先配置小程序ide的相关路径，才能运行成功</li><li>微信开发者工具在设置中安全设置，服务端口开启</li></ul><h5 id="介绍项目目录和文件作用"><a href="#介绍项目目录和文件作用" class="headerlink" title="介绍项目目录和文件作用"></a>介绍项目目录和文件作用</h5><p><code>pages.json</code> 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等</p><p><code>manifest.json</code> 文件是应用的配置文件，用于指定应用的名称、图标、权限等。</p><p><code>App.vue</code>是我们的跟组件，所有页面都是在<code>App.vue</code>下进行切换的，是页面入口文件，可以调用应用的生命周期函数。</p><p><code>main.js</code>是我们的项目入口文件，主要作用是初始化<code>vue</code>实例并使用需要的插件。</p><p><code>uni.scss</code>文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，<code>uni.scss</code>文件里预置了一批scss变量预置。</p><figure class="highlight plaintext"><figcaption><span>就是打包目录，在这里有各个平台的打包文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```pages``` 所有的页面存放目录</span><br><span class="line"></span><br><span class="line">```static``` 静态资源目录，例如图片等</span><br><span class="line"></span><br><span class="line">```components``` 组件存放目录</span><br><span class="line"></span><br><span class="line">为了实现多端兼容，综合考虑编译速度、运行性能等因素，`uni-app` 约定了如下开发规范：</span><br><span class="line"></span><br><span class="line">- 页面文件遵循 [Vue 单文件组件 (SFC) 规范](https://vue-loader.vuejs.org/zh/spec.html)</span><br><span class="line">- 组件标签靠近小程序规范，详见[uni-app 组件规范](https://uniapp.dcloud.io/component/README)</span><br><span class="line">- 接口能力（JS API）靠近微信小程序规范，但需将前缀 `wx` 替换为 `uni`，详见[uni-app接口规范](https://uniapp.dcloud.io/api/README)</span><br><span class="line">- 数据绑定及事件处理同 `Vue.js` 规范，同时补充了App及页面的生命周期</span><br><span class="line">- 为兼容多端运行，建议使用flex布局进行开发</span><br><span class="line"></span><br><span class="line">#### 全局配置和页面配置</span><br><span class="line"></span><br><span class="line">##### 通过globalStyle进行全局配置</span><br><span class="line"></span><br><span class="line">用于设置应用的状态栏、导航条、标题、窗口背景色等。[详细文档](https://uniapp.dcloud.io/collocation/pages?id=globalstyle)</span><br><span class="line"></span><br><span class="line">| 属性                           | 类型       | 默认值     | 描述                                       |</span><br><span class="line">| ---------------------------- | -------- | ------- | ---------------------------------------- |</span><br><span class="line">| navigationBarBackgroundColor | HexColor | #F7F7F7 | 导航栏背景颜色（同状态栏背景色）                         |</span><br><span class="line">| navigationBarTextStyle       | String   | white   | 导航栏标题颜色及状态栏前景颜色，仅支持 black/white          |</span><br><span class="line">| navigationBarTitleText       | String   |         | 导航栏标题文字内容                                |</span><br><span class="line">| backgroundColor              | HexColor | #ffffff | 窗口的背景色                                   |</span><br><span class="line">| backgroundTextStyle          | String   | dark    | 下拉 loading 的样式，仅支持 dark / light          |</span><br><span class="line">| enablePullDownRefresh        | Boolean  | false   | 是否开启下拉刷新，详见[页面生命周期](https://uniapp.dcloud.io/use?id=%e9%a1%b5%e9%9d%a2%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f)。 |</span><br><span class="line">| onReachBottomDistance        | Number   | 50      | 页面上拉触底事件触发时距页面底部距离，单位只支持px，详见[页面生命周期](https://uniapp.dcloud.io/use?id=%e9%a1%b5%e9%9d%a2%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f) |</span><br><span class="line"></span><br><span class="line">##### 创建新的message页面</span><br><span class="line"></span><br><span class="line">右键pages新建message目录，在message目录下右键新建.vue文件,并选择基本模板</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是信息页面</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="通过pages来配置页面"><a href="#通过pages来配置页面" class="headerlink" title="通过pages来配置页面"></a>通过pages来配置页面</h5><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>String</td><td></td><td>配置页面路径</td></tr><tr><td>style</td><td>Object</td><td></td><td>配置页面窗口表现，配置项参考 <a href="https://uniapp.dcloud.io/collocation/pages?id=style">pageStyle</a></td></tr></tbody></table><p>pages数组数组中第一项表示应用启动页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;pages&quot;: [ </span><br><span class="line">&#123;</span><br><span class="line">&quot;path&quot;:&quot;pages/message/message&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;path&quot;: &quot;pages/index/index&quot;,</span><br><span class="line">&quot;style&quot;: &#123;</span><br><span class="line">&quot;navigationBarTitleText&quot;: &quot;uni-app&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>通过style修改页面的标题和导航栏背景色，并且设置h5下拉刷新的特有样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;pages&quot;</span>: [ <span class="comment">//pages数组中第一项表示应用启动页，参考：https://uniapp.dcloud.io/collocation/pages</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;path&quot;</span>:<span class="string">&quot;pages/message/message&quot;</span>,</span><br><span class="line"><span class="string">&quot;style&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;navigationBarBackgroundColor&quot;</span>: <span class="string">&quot;#007AFF&quot;</span>,</span><br><span class="line"><span class="string">&quot;navigationBarTextStyle&quot;</span>: <span class="string">&quot;white&quot;</span>,</span><br><span class="line"><span class="string">&quot;enablePullDownRefresh&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;disableScroll&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;h5&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;pullToRefresh&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;color&quot;</span>: <span class="string">&quot;#007AFF&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="配置tabbar"><a href="#配置tabbar" class="headerlink" title="配置tabbar"></a>配置tabbar</h5><p>如果应用是一个多 tab 应用，可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页。</p><p><strong>Tips</strong></p><ul><li>当设置 position 为 top 时，将不会显示 icon</li><li>tabBar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。</li></ul><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th><th>平台差异说明</th></tr></thead><tbody><tr><td>color</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字默认颜色</td><td></td></tr><tr><td>selectedColor</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字选中时的颜色</td><td></td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>是</td><td></td><td>tab 的背景色</td><td></td></tr><tr><td>borderStyle</td><td>String</td><td>否</td><td>black</td><td>tabbar 上边框的颜色，仅支持 black&#x2F;white</td><td>App 2.3.4+ 支持其他颜色值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td></td><td>tab 的列表，详见 list 属性说明，最少2个、最多5个 tab</td><td></td></tr><tr><td>position</td><td>String</td><td>否</td><td>bottom</td><td>可选值 bottom、top</td><td>top 值仅微信小程序支持</td></tr></tbody></table><p>其中 list 接收一个数组，数组中的每个项都是一个对象，其属性值如下：</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>pagePath</td><td>String</td><td>是</td><td>页面路径，必须在 pages 中先定义</td></tr><tr><td>text</td><td>String</td><td>是</td><td>tab 上按钮文字，在 5+APP 和 H5 平台为非必填。例如中间可放一个没有文字的+号图标</td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td>图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效，不支持网络图片，不支持字体图标</td></tr><tr><td>selectedIconPath</td><td>String</td><td>否</td><td>选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效</td></tr></tbody></table><p>案例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;tabBar&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;list&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;text&quot;</span>: <span class="string">&quot;首页&quot;</span>,</span><br><span class="line"><span class="string">&quot;pagePath&quot;</span>:<span class="string">&quot;pages/index/index&quot;</span>,</span><br><span class="line"><span class="string">&quot;iconPath&quot;</span>:<span class="string">&quot;static/tabs/home.png&quot;</span>,</span><br><span class="line"><span class="string">&quot;selectedIconPath&quot;</span>:<span class="string">&quot;static/tabs/home-active.png&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;text&quot;</span>: <span class="string">&quot;信息&quot;</span>,</span><br><span class="line"><span class="string">&quot;pagePath&quot;</span>:<span class="string">&quot;pages/message/message&quot;</span>,</span><br><span class="line"><span class="string">&quot;iconPath&quot;</span>:<span class="string">&quot;static/tabs/message.png&quot;</span>,</span><br><span class="line"><span class="string">&quot;selectedIconPath&quot;</span>:<span class="string">&quot;static/tabs/message-active.png&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;text&quot;</span>: <span class="string">&quot;我们&quot;</span>,</span><br><span class="line"><span class="string">&quot;pagePath&quot;</span>:<span class="string">&quot;pages/contact/contact&quot;</span>,</span><br><span class="line"><span class="string">&quot;iconPath&quot;</span>:<span class="string">&quot;static/tabs/contact.png&quot;</span>,</span><br><span class="line"><span class="string">&quot;selectedIconPath&quot;</span>:<span class="string">&quot;static/tabs/contact-active.png&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="condition启动模式配置"><a href="#condition启动模式配置" class="headerlink" title="condition启动模式配置"></a>condition启动模式配置</h5><p>启动模式配置，仅开发期间生效，用于模拟直达页面的场景，如：小程序转发后，用户点击所打开的页面。</p><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>current</td><td>Number</td><td>是</td><td>当前激活的模式，list节点的索引值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td>启动模式列表</td></tr></tbody></table><p><strong>list说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>String</td><td>是</td><td>启动模式名称</td></tr><tr><td>path</td><td>String</td><td>是</td><td>启动页面路径</td></tr><tr><td>query</td><td>String</td><td>否</td><td>启动参数，可在页面的 <a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">onLoad</a> 函数里获得</td></tr></tbody></table><h4 id="组件的基本使用"><a href="#组件的基本使用" class="headerlink" title="组件的基本使用"></a>组件的基本使用</h4><p>uni-app提供了丰富的基础组件给开发者，开发者可以像搭积木一样，组合各种组件拼接称自己的应用</p><p>uni-app中的组件，就像 <code>HTML</code> 中的 <code>div</code> 、<code>p</code>、<code>span</code> 等标签的作用一样，用于搭建页面的基础结构</p><h5 id="text文本组件的用法"><a href="#text文本组件的用法" class="headerlink" title="text文本组件的用法"></a>text文本组件的用法</h5><h6 id="001-text-组件的属性"><a href="#001-text-组件的属性" class="headerlink" title="001 - text 组件的属性"></a>001 - text 组件的属性</h6><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">默认值</th><th align="center">必填</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">selectable</td><td align="center">boolean</td><td align="center">false</td><td align="center">否</td><td align="center">文本是否可选</td></tr><tr><td align="center">space</td><td align="center">string</td><td align="center">.</td><td align="center">否</td><td align="center">显示连续空格，可选参数：<code>ensp</code>、<code>emsp</code>、<code>nbsp</code></td></tr><tr><td align="center">decode</td><td align="center">boolean</td><td align="center">false</td><td align="center">否</td><td align="center">是否解码</td></tr></tbody></table><ul><li><code>text</code> 组件相当于行内标签、在同一行显示</li><li>除了文本节点以外的其他节点都无法长按选中</li></ul><h6 id="002-代码案例"><a href="#002-代码案例" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 长按文本是否可选 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">selectable</span>=<span class="string">&#x27;true&#x27;</span>&gt;</span>来了老弟<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 显示连续空格的方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">space</span>=<span class="string">&#x27;ensp&#x27;</span>&gt;</span>来了  老弟<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">space</span>=<span class="string">&#x27;emsp&#x27;</span>&gt;</span>来了  老弟<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">space</span>=<span class="string">&#x27;nbsp&#x27;</span>&gt;</span>来了  老弟<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>skyblue<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 是否解码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">decode</span>=<span class="string">&#x27;true&#x27;</span>&gt;</span><span class="symbol">&amp;nbsp;</span> <span class="symbol">&amp;lt;</span> <span class="symbol">&amp;gt;</span> <span class="symbol">&amp;amp;</span> <span class="symbol">&amp;apos;</span> <span class="symbol">&amp;ensp;</span> <span class="symbol">&amp;emsp;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="view视图容器组件的用法"><a href="#view视图容器组件的用法" class="headerlink" title="view视图容器组件的用法"></a>view视图容器组件的用法</h5><blockquote><p>View 视图容器， 类似于 HTML 中的 div</p></blockquote><h6 id="001-组件的属性"><a href="#001-组件的属性" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h6><p><img src="https://cdn.jsdelivr.net/gh/linzepore/blog_imgs@main/img/202304051217922.png"></p><h6 id="002-代码案例-1"><a href="#002-代码案例-1" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;box2_active&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;box1&#x27;</span> <span class="attr">hover-class</span>=<span class="string">&#x27;active&#x27;</span> <span class="attr">hover-stop-propagation</span> <span class="attr">:hover-start-time</span>=<span class="string">&quot;2000&quot;</span> <span class="attr">:hover-stay-time</span>=<span class="string">&#x27;2000&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="button按钮组件的用法"><a href="#button按钮组件的用法" class="headerlink" title="button按钮组件的用法"></a>button按钮组件的用法</h5><h6 id="001-组件的属性-1"><a href="#001-组件的属性-1" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h6><table><thead><tr><th align="center">属性名</th><th align="center">类型</th><th align="center">默认值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">size</td><td align="center">String</td><td align="center">default</td><td align="center">按钮的大小</td></tr><tr><td align="center">type</td><td align="center">String</td><td align="center">default</td><td align="center">按钮的样式类型</td></tr><tr><td align="center">plain</td><td align="center">Boolean</td><td align="center">false</td><td align="center">按钮是否镂空，背景色透明</td></tr><tr><td align="center">disabled</td><td align="center">Boolean</td><td align="center">false</td><td align="center">是否按钮</td></tr><tr><td align="center">loading</td><td align="center">Boolean</td><td align="center">false</td><td align="center">名称是否带 loading t图标</td></tr></tbody></table><ul><li><code>button</code> 组件默认独占一行，设置 <code>size</code> 为 <code>mini</code> 时可以在一行显示多个</li></ul><h6 id="002-案例代码"><a href="#002-案例代码" class="headerlink" title="002 - 案例代码"></a>002 - 案例代码</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&#x27;mini&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;primary&#x27;</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&#x27;mini&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;default&#x27;</span> <span class="attr">disabled</span>=<span class="string">&#x27;true&#x27;</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&#x27;mini&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;warn&#x27;</span> <span class="attr">loading</span>=<span class="string">&#x27;true&#x27;</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="image组件的使用"><a href="#image组件的使用" class="headerlink" title="image组件的使用"></a>image组件的使用</h5><h6 id="image"><a href="#image" class="headerlink" title="image"></a><a href="https://uniapp.dcloud.io/component/image?id=image">image</a></h6><p>图片。</p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>平台差异说明</th></tr></thead><tbody><tr><td>src</td><td>String</td><td></td><td>图片资源地址</td><td></td></tr><tr><td>mode</td><td>String</td><td>‘scaleToFill’</td><td>图片裁剪、缩放的模式</td><td></td></tr></tbody></table><p><strong>Tips</strong></p><ul><li><code>&lt;image&gt;</code> 组件默认宽度 300px、高度 225px；</li><li><code>src</code> 仅支持相对路径、绝对路径，支持 base64 码；</li><li>页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 <code>image&#123;will-change: transform&#125;</code> ,可优化此问题。</li></ul><h4 id="uni-app中的样式"><a href="#uni-app中的样式" class="headerlink" title="uni-app中的样式"></a>uni-app中的样式</h4><ul><li><p>rpx 即响应式px，一种根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，750rpx恰好为屏幕宽度。屏幕变宽，rpx 实际显示效果会等比放大。</p></li><li><p>使用<code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径，用<code>;</code>表示语句结束</p></li><li><p>支持基本常用的选择器class、id、element等</p></li><li><p>在 <code>uni-app</code> 中不能使用 <code>*</code> 选择器。</p></li><li><p><code>page</code> 相当于 <code>body</code> 节点</p></li><li><p>定义在 App.vue 中的样式为全局样式，作用于每一个页面。在 pages 目录下 的 vue 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 App.vue 中相同的选择器。</p></li><li><p><code>uni-app</code> 支持使用字体图标，使用方式与普通 <code>web</code> 项目相同，需要注意以下几点：</p><ul><li><p>字体文件小于 40kb，<code>uni-app</code> 会自动将其转化为 base64 格式；</p></li><li><p>字体文件大于等于 40kb， 需开发者自己转换，否则使用将不生效；</p></li><li><p>字体文件的引用路径推荐使用以 ~@ 开头的绝对路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    font-family: test1-icon;</span><br><span class="line">    src: url(&#x27;~@/static/iconfont.ttf&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>如何使用scss或者less</p></li></ul><h4 id="uni-app中的数据绑定"><a href="#uni-app中的数据绑定" class="headerlink" title="uni-app中的数据绑定"></a>uni-app中的数据绑定</h4><p>在页面中需要定义数据，和我们之前的vue一摸一样，直接在data中定义数据即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;hello-uni&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="插值表达式的使用"><a href="#插值表达式的使用" class="headerlink" title="插值表达式的使用"></a>插值表达式的使用</h5><ul><li><p>利用插值表达式渲染基本数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在插值表达式中使用三元运算</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; flag ? &#x27;我是真的&#x27;:&#x27;我是假的&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>基本运算</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;1+1&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="v-bind动态绑定属性"><a href="#v-bind动态绑定属性" class="headerlink" title="v-bind动态绑定属性"></a>v-bind动态绑定属性</h5><p>在data中定义了一张图片，我们希望把这张图片渲染到页面上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">img</span>: <span class="string">&#x27;http://destiny001.gitee.io/image/monkey_02.jpg&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用v-bind进行渲染</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;img&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还可以缩写成:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">:src</span>=<span class="string">&quot;img&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-for的使用"><a href="#v-for的使用" class="headerlink" title="v-for的使用"></a>v-for的使用</h5><p>data中定以一个数组，最终将数组渲染到页面上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">arr</span>: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;刘能&#x27;</span>, <span class="attr">age</span>: <span class="number">29</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;赵四&#x27;</span>, <span class="attr">age</span>: <span class="number">39</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;宋小宝&#x27;</span>, <span class="attr">age</span>: <span class="number">49</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;小沈阳&#x27;</span>, <span class="attr">age</span>: <span class="number">59</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用v-for进行循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view v-<span class="keyword">for</span>=<span class="string">&quot;(item,i) in arr&quot;</span> :key=<span class="string">&quot;i&quot;</span>&gt;名字：&#123;&#123;item.<span class="property">name</span>&#125;&#125;---年龄：&#123;&#123;item.<span class="property">age</span>&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure><h4 id="uni中的事件"><a href="#uni中的事件" class="headerlink" title="uni中的事件"></a>uni中的事件</h4><h5 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h5><p>在uni中事件绑定和vue中是一样的，通过v-on进行事件的绑定，也可以简写为@</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;tapHandle&quot;</span>&gt;</span>点我啊<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>事件函数定义在methods中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  tapHandle () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;真的点我了&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h5><ul><li><p>默认如果没有传递参数，事件函数第一个形参为事件对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// template</span><br><span class="line">&lt;button @click=&quot;tapHandle&quot;&gt;点我啊&lt;/button&gt;</span><br><span class="line">// script</span><br><span class="line">methods: &#123;</span><br><span class="line">  tapHandle (e) &#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果给事件函数传递参数了，则对应的事件函数形参接收的则是传递过来的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// template</span><br><span class="line">&lt;button @click=&quot;tapHandle(1)&quot;&gt;点我啊&lt;/button&gt;</span><br><span class="line">// script</span><br><span class="line">methods: &#123;</span><br><span class="line">  tapHandle (num) &#123;</span><br><span class="line">    console.log(num)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果获取事件对象也想传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// template</span><br><span class="line">&lt;button @click=&quot;tapHandle(1,$event)&quot;&gt;点我啊&lt;/button&gt;</span><br><span class="line">// script</span><br><span class="line">methods: &#123;</span><br><span class="line">  tapHandle (num,e) &#123;</span><br><span class="line">    console.log(num,e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="uni的生命周期"><a href="#uni的生命周期" class="headerlink" title="uni的生命周期"></a>uni的生命周期</h4><h5 id="应用的生命周期"><a href="#应用的生命周期" class="headerlink" title="应用的生命周期"></a>应用的生命周期</h5><p>生命周期的概念：一个对象从创建、运行、销毁的整个过程被成为生命周期。</p><p>生命周期函数：在生命周期中每个阶段会伴随着每一个函数的触发，这些函数被称为生命周期函数</p><p><code>uni-app</code> 支持如下应用生命周期函数：</p><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>onLaunch</td><td>当<code>uni-app</code> 初始化完成时触发（全局只触发一次）</td></tr><tr><td>onShow</td><td>当 <code>uni-app</code> 启动，或从后台进入前台显示</td></tr><tr><td>onHide</td><td>当 <code>uni-app</code> 从前台进入后台</td></tr><tr><td>onError</td><td>当 <code>uni-app</code> 报错时触发</td></tr></tbody></table><h5 id="页面的生命周期"><a href="#页面的生命周期" class="headerlink" title="页面的生命周期"></a>页面的生命周期</h5><p><code>uni-app</code> 支持如下页面生命周期函数：</p><table><thead><tr><th>函数名</th><th>说明</th><th>平台差异说明</th><th>最低版本</th></tr></thead><tbody><tr><td>onLoad</td><td>监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参），参考<a href="https://uniapp.dcloud.io/api/router?id=navigateto">示例</a></td><td></td><td></td></tr><tr><td>onShow</td><td>监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td><td></td><td></td></tr><tr><td>onReady</td><td>监听页面初次渲染完成。</td><td></td><td></td></tr><tr><td>onHide</td><td>监听页面隐藏</td><td></td><td></td></tr><tr><td>onUnload</td><td>监听页面卸载</td><td></td><td></td></tr></tbody></table><h4 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h4><h5 id="开启下拉刷新"><a href="#开启下拉刷新" class="headerlink" title="开启下拉刷新"></a>开启下拉刷新</h5><p>在uni-app中有两种方式开启下拉刷新</p><ul><li>需要在 <code>pages.json</code> 里，找到的当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></li><li>通过调用uni.startPullDownRefresh方法来开启下拉刷新</li></ul><h6 id="通过配置文件开启"><a href="#通过配置文件开启" class="headerlink" title="通过配置文件开启"></a>通过配置文件开启</h6><p>创建list页面进行演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">杭州学科</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;item&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">data () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">arr</span>: [<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;ui&#x27;</span>,<span class="string">&#x27;大数据&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过pages.json文件中找到当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;path&quot;</span>:<span class="string">&quot;pages/list/list&quot;</span>,</span><br><span class="line">    <span class="string">&quot;style&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;enablePullDownRefresh&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="通过API开启"><a href="#通过API开启" class="headerlink" title="通过API开启"></a>通过API开启</h6><p><a href="https://uniapp.dcloud.io/api/ui/pulldown">api文档</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uni.startPullDownRefresh()</span><br></pre></td></tr></table></figure><h5 id="监听下拉刷新"><a href="#监听下拉刷新" class="headerlink" title="监听下拉刷新"></a>监听下拉刷新</h5><p>通过onPullDownRefresh可以监听到下拉刷新的动作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">arr</span>: [<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;ui&#x27;</span>,<span class="string">&#x27;大数据&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    startPull () &#123;</span><br><span class="line">      uni.<span class="title function_">startPullDownRefresh</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  onPullDownRefresh () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发下拉刷新了&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="关闭下拉刷新"><a href="#关闭下拉刷新" class="headerlink" title="关闭下拉刷新"></a>关闭下拉刷新</h5><p>uni.stopPullDownRefresh()</p><p>停止当前页面下拉刷新。</p><p>案例演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;startPull&quot;</span>&gt;</span>开启下拉刷新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">杭州学科</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;item&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">data () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">arr</span>: [<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;ui&#x27;</span>,<span class="string">&#x27;大数据&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">startPull () &#123;</span></span><br><span class="line"><span class="language-javascript">uni.<span class="title function_">startPullDownRefresh</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">onPullDownRefresh () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">arr</span> = []</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">arr</span> = [<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;ui&#x27;</span>,<span class="string">&#x27;大数据&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">uni.<span class="title function_">stopPullDownRefresh</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="上拉加载"><a href="#上拉加载" class="headerlink" title="上拉加载"></a>上拉加载</h4><p>通过在pages.json文件中找到当前页面的pages节点下style中配置onReachBottomDistance可以设置距离底部开启加载的距离，默认为50px</p><p>通过onReachBottom监听到触底的行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;startPull&quot;</span>&gt;</span>开启下拉刷新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">杭州学科</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;&#123;item&#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">data () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">arr</span>: [<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;ui&#x27;</span>,<span class="string">&#x27;大数据&#x27;</span>,<span class="string">&#x27;前端&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;ui&#x27;</span>,<span class="string">&#x27;大数据&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">onReachBottom () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触底了&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">view&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h4><p>在uni中可以调用uni.request方法进行请求网络请求</p><p>需要注意的是：在小程序中网络相关的 API 在使用前需要配置域名白名单。</p><p><strong>发送get请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendGet&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">sendGet () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">uni.<span class="title function_">request</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">url</span>: <span class="string">&#x27;http://localhost:8082/api/getlunbo&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">success</span>(<span class="params">res</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>发送post请求</strong></p><h4 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h4><h5 id="uni-setStorage"><a href="#uni-setStorage" class="headerlink" title="uni.setStorage"></a><strong>uni.setStorage</strong></h5><p><a href="https://uniapp.dcloud.io/api/storage/storage?id=setstorage">官方文档</a></p><p>将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口。</p><p>代码演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;setStor&quot;</span>&gt;</span>存储数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">setStor () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">uni.<span class="title function_">setStorage</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="attr">key</span>: <span class="string">&#x27;id&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="attr">data</span>: <span class="number">100</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> success () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;存储成功&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="uni-setStorageSync"><a href="#uni-setStorageSync" class="headerlink" title="uni.setStorageSync"></a>uni.setStorageSync</h5><p>将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口。</p><p>代码演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;setStor&quot;</span>&gt;</span>存储数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">setStor () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">uni.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;id&#x27;</span>,<span class="number">100</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="uni-getStorage"><a href="#uni-getStorage" class="headerlink" title="uni.getStorage"></a>uni.getStorage</h5><p>从本地缓存中异步获取指定 key 对应的内容。</p><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getStorage&quot;</span>&gt;</span>获取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">data () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">id</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">getStorage () &#123;</span></span><br><span class="line"><span class="language-javascript">uni.<span class="title function_">getStorage</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">key</span>: <span class="string">&#x27;id&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">success</span>:  <span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">id</span> = res.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="uni-getStorageSync"><a href="#uni-getStorageSync" class="headerlink" title="uni.getStorageSync"></a>uni.getStorageSync</h5><p>从本地缓存中同步获取指定 key 对应的内容。</p><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getStorage&quot;</span>&gt;</span>获取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">getStorage () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> id = uni.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;id&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(id)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="uni-removeStorage"><a href="#uni-removeStorage" class="headerlink" title="uni.removeStorage"></a>uni.removeStorage</h5><p>从本地缓存中异步移除指定 key。</p><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;removeStorage&quot;</span>&gt;</span>删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">removeStorage () &#123;</span></span><br><span class="line"><span class="language-javascript">uni.<span class="title function_">removeStorage</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">key</span>: <span class="string">&#x27;id&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="uni-removeStorageSync"><a href="#uni-removeStorageSync" class="headerlink" title="uni.removeStorageSync"></a>uni.removeStorageSync</h5><p>从本地缓存中同步移除指定 key。</p><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;removeStorage&quot;</span>&gt;</span>删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">removeStorage () &#123;</span></span><br><span class="line"><span class="language-javascript">uni.<span class="title function_">removeStorageSync</span>(<span class="string">&#x27;id&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="上传图片、预览图片"><a href="#上传图片、预览图片" class="headerlink" title="上传图片、预览图片"></a>上传图片、预览图片</h4><h5 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h5><p>uni.chooseImage方法从本地相册选择图片或使用相机拍照。</p><p>案例代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;chooseImg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>上传图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">v-for</span>=<span class="string">&quot;item in imgArr&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">data () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">imgArr</span>: []</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">chooseImg () &#123;</span></span><br><span class="line"><span class="language-javascript">uni.<span class="title function_">chooseImage</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">count</span>: <span class="number">9</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">success</span>: <span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">imgArr</span> = res.<span class="property">tempFilePaths</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="预览图片"><a href="#预览图片" class="headerlink" title="预览图片"></a>预览图片</h5><p>结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">v-for</span>=<span class="string">&quot;item in imgArr&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;item&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;previewImg(item)&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>预览图片的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">previewImg (current) &#123;</span><br><span class="line">  uni.<span class="title function_">previewImage</span>(&#123;</span><br><span class="line">    <span class="attr">urls</span>: <span class="variable language_">this</span>.<span class="property">imgArr</span>,</span><br><span class="line">    current</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="条件注释实现跨段兼容"><a href="#条件注释实现跨段兼容" class="headerlink" title="条件注释实现跨段兼容"></a>条件注释实现跨段兼容</h4><p>条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。</p><p><strong>写法：</strong>以 #ifdef 加平台标识 开头，以 #endif 结尾。</p><p>平台标识</p><table><thead><tr><th>值</th><th>平台</th><th>参考文档</th></tr></thead><tbody><tr><td>APP-PLUS</td><td>5+App</td><td><a href="http://www.html5plus.org/doc/">HTML5+ 规范</a></td></tr><tr><td>H5</td><td>H5</td><td></td></tr><tr><td>MP-WEIXIN</td><td>微信小程序</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/api/">微信小程序</a></td></tr><tr><td>MP-ALIPAY</td><td>支付宝小程序</td><td><a href="https://docs.alipay.com/mini/developer/getting-started">支付宝小程序</a></td></tr><tr><td>MP-BAIDU</td><td>百度小程序</td><td><a href="https://smartprogram.baidu.com/docs/develop/tutorial/codedir/">百度小程序</a></td></tr><tr><td>MP-TOUTIAO</td><td>头条小程序</td><td><a href="https://developer.toutiao.com/dev/cn/mini-app/develop/framework/basic-reference/introduction">头条小程序</a></td></tr><tr><td>MP-QQ</td><td>QQ小程序</td><td>（目前仅cli版支持）</td></tr><tr><td>MP</td><td>微信小程序&#x2F;支付宝小程序&#x2F;百度小程序&#x2F;头条小程序&#x2F;QQ小程序</td><td></td></tr></tbody></table><h5 id="组件的条件注释"><a href="#组件的条件注释" class="headerlink" title="组件的条件注释"></a>组件的条件注释</h5><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- #ifdef H5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  h5页面会显示</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #ifdef MP-WEIXIN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  微信小程序会显示</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #ifdef APP-PLUS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  app会显示</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #endif --&gt;</span></span><br></pre></td></tr></table></figure><h5 id="api的条件注释"><a href="#api的条件注释" class="headerlink" title="api的条件注释"></a>api的条件注释</h5><p>代码演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">onLoad () &#123;</span><br><span class="line">  <span class="comment">//#ifdef MP-WEIXIN</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;微信小程序&#x27;</span>)</span><br><span class="line">  <span class="comment">//#endif</span></span><br><span class="line">  <span class="comment">//#ifdef H5</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;h5页面&#x27;</span>)</span><br><span class="line">  <span class="comment">//#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>样式的条件注释</p><p>代码演示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* #ifdef H5 */</span></span><br><span class="line">view&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* #endif */</span></span><br><span class="line"><span class="comment">/* #ifdef MP-WEIXIN */</span></span><br><span class="line">view&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* #endif */</span></span><br></pre></td></tr></table></figure><h4 id="uni中的导航跳转"><a href="#uni中的导航跳转" class="headerlink" title="uni中的导航跳转"></a>uni中的导航跳转</h4><h5 id="利用navigator进行跳转"><a href="#利用navigator进行跳转" class="headerlink" title="利用navigator进行跳转"></a>利用navigator进行跳转</h5><p>navigator详细文档：<a href="https://uniapp.dcloud.io/component/navigator">文档地址</a></p><p>跳转到普通页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/about/about&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;navigator-hover&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;default&quot;</span>&gt;</span>跳转到关于页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure><p>跳转到tabbar页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/message/message&quot;</span> <span class="attr">open-type</span>=<span class="string">&quot;switchTab&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;default&quot;</span>&gt;</span>跳转到message页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="利用编程式导航进行跳转"><a href="#利用编程式导航进行跳转" class="headerlink" title="利用编程式导航进行跳转"></a>利用编程式导航进行跳转</h5><p><a href="%5Buni.navigateTo%5D(https://uniapp.dcloud.io/api/router?id=navigateto)">导航跳转文档</a></p><p><strong>利用navigateTo进行导航跳转</strong></p><p>保留当前页面，跳转到应用内的某个页面，使用<code>uni.navigateBack</code>可以返回到原页面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;goAbout&quot;</span>&gt;</span>跳转到关于页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过navigateTo方法进行跳转到普通页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goAbout () &#123;</span><br><span class="line">  uni.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/pages/about/about&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过switchTab跳转到tabbar页面</strong></p><p>跳转到tabbar页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;goMessage&quot;</span>&gt;</span>跳转到message页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过switchTab方法进行跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goMessage () &#123;</span><br><span class="line">  uni.<span class="title function_">switchTab</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/pages/message/message&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>redirectTo进行跳转</strong> </p><p>关闭当前页面，跳转到应用内的某个页面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;goMessage&quot;</span>&gt;</span>跳转到message页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- js --&gt;</span></span><br><span class="line">goMessage () &#123;</span><br><span class="line">  uni.switchTab(&#123;</span><br><span class="line">    url: &#x27;/pages/message/message&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过onUnload测试当前组件确实卸载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onUnload () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件卸载了&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="导航跳转传递参数"><a href="#导航跳转传递参数" class="headerlink" title="导航跳转传递参数"></a>导航跳转传递参数</h5><p>在导航进行跳转到下一个页面的同时，可以给下一个页面传递相应的参数，接收参数的页面可以通过onLoad生命周期进行接收</p><p>传递参数的页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goAbout () &#123;</span><br><span class="line">  uni.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/pages/about/about?id=80&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收参数的页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">onLoad (options) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(options)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="uni-app中组件的创建"><a href="#uni-app中组件的创建" class="headerlink" title="uni-app中组件的创建"></a>uni-app中组件的创建</h4><p>在uni-app中，可以通过创建一个后缀名为vue的文件，即创建一个组件成功，其他组件可以将该组件通过impot的方式导入，在通过components进行注册即可</p><ul><li><p>创建login组件，在component中创建login目录，然后新建login.vue文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是一个自定义组件</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>在其他组件中导入该组件并注册</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import login from &quot;@/components/test/test.vue&quot;</span><br></pre></td></tr></table></figure></li><li><p>注册组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">components</span>: &#123;test&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;test&gt;&lt;/test&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="组件的生命周期函数"><a href="#组件的生命周期函数" class="headerlink" title="组件的生命周期函数"></a>组件的生命周期函数</h5><table><thead><tr><th>beforeCreate</th><th>在实例初始化之后被调用。<a href="https://cn.vuejs.org/v2/api/#beforeCreate">详见</a></th><th></th><th></th></tr></thead><tbody><tr><td>created</td><td>在实例创建完成后被立即调用。<a href="https://cn.vuejs.org/v2/api/#created">详见</a></td><td></td><td></td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用。<a href="https://cn.vuejs.org/v2/api/#beforeMount">详见</a></td><td></td><td></td></tr><tr><td>mounted</td><td>挂载到实例上去之后调用。<a href="https://cn.vuejs.org/v2/api/#mounted">详见</a> 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用<code>$nextTick</code><a href="https://cn.vuejs.org/v2/api/#Vue-nextTick">Vue官方文档</a></td><td></td><td></td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟 DOM 打补丁之前。<a href="https://cn.vuejs.org/v2/api/#beforeUpdate">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>updated</td><td>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。<a href="https://cn.vuejs.org/v2/api/#updated">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用。在这一步，实例仍然完全可用。<a href="https://cn.vuejs.org/v2/api/#beforeDestroy">详见</a></td><td></td><td></td></tr><tr><td>destroyed</td><td>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<a href="https://cn.vuejs.org/v2/api/#destroyed">详见</a></td><td></td><td></td></tr></tbody></table><h4 id="组件的通讯"><a href="#组件的通讯" class="headerlink" title="组件的通讯"></a>组件的通讯</h4><h5 id="父组件给子组件传值"><a href="#父组件给子组件传值" class="headerlink" title="父组件给子组件传值"></a>父组件给子组件传值</h5><p>通过props来接受外界传递到组件内部的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是一个自定义组件 &#123;&#123;msg&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">props: [&#x27;msg&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>其他组件在使用login组件的时候传递值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;test :msg=&quot;msg&quot;&gt;&lt;/test&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import test from &quot;@/components/test/test.vue&quot;</span><br><span class="line">export default &#123;</span><br><span class="line">data () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &#x27;hello&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">components: &#123;test&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="子组件给父组件传值"><a href="#子组件给父组件传值" class="headerlink" title="子组件给父组件传值"></a>子组件给父组件传值</h5><p>通过$emit触发事件进行传递参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">这是一个自定义组件 &#123;&#123;msg&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;sendMsg&quot;</span>&gt;</span>给父组件传值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">data () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">status</span>: <span class="string">&#x27;打篮球&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">value</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">sendMsg () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;myEvent&#x27;</span>,<span class="variable language_">this</span>.<span class="property">status</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件定义自定义事件并接收参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span> <span class="attr">:msg</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">myEvent</span>=<span class="string">&quot;getMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">&quot;@/components/test/test.vue&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">data () &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">getMsg (res) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="attr">components</span>: &#123;test&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="兄弟组件通讯"><a href="#兄弟组件通讯" class="headerlink" title="兄弟组件通讯"></a>兄弟组件通讯</h5><h4 id="uni-ui的使用"><a href="#uni-ui的使用" class="headerlink" title="uni-ui的使用"></a>uni-ui的使用</h4><p><a href="https://uniapp.dcloud.io/component/README?id=uniui">uni-ui文档</a></p><p>1、进入Grid宫格组件</p><p>2、使用HBuilderX导入该组件</p><p>3、导入该组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import uniGrid from &quot;@/components/uni-grid/uni-grid.vue&quot;</span><br><span class="line">import uniGridItem from &quot;@/components/uni-grid-item/uni-grid-item.vue&quot;</span><br></pre></td></tr></table></figure><p>4、注册组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">components: &#123;uniGrid,uniGridItem&#125;</span><br></pre></td></tr></table></figure><p>5、使用组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uni-grid</span> <span class="attr">:column</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uni-grid-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">uni-grid-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uni-grid-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">uni-grid-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uni-grid-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">uni-grid-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">uni-grid</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;uni-app的基本使用&quot;&gt;&lt;a href=&quot;#uni-app的基本使用&quot; class=&quot;headerlink&quot; title=&quot;uni-app的基本使用&quot;&gt;&lt;/a&gt;uni-app的基本使用&lt;/h4&gt;&lt;p&gt;课程介绍：&lt;/p&gt;
&lt;p&gt;基础部分：&lt;/p&gt;
&lt;ul&gt;
&lt;l</summary>
      
    
    
    
    <category term="Learning" scheme="https://blog.zepo.re/categories/Learning/"/>
    
    <category term="uni-app" scheme="https://blog.zepo.re/categories/Learning/uni-app/"/>
    
    
    <category term="learning" scheme="https://blog.zepo.re/tags/learning/"/>
    
    <category term="GDIP" scheme="https://blog.zepo.re/tags/GDIP/"/>
    
    <category term="uni-app" scheme="https://blog.zepo.re/tags/uni-app/"/>
    
  </entry>
  
</feed>
